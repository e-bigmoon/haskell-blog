<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>BIG MOON</title>
    <link href="https://haskell.e-bigmoon.com/feed.xml" rel="self" />
    <link href="https://haskell.e-bigmoon.com" />
    <id>https://haskell.e-bigmoon.com/feed.xml</id>
    <author>
        <name>BIG MOON</name>
        <email>it@e-bigmoon.com</email>
    </author>
    <updated></updated>
    <entry>
    <title>cabal repl コマンドについて</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/04-12-cabal-repl.html</id>
    <published>April 12, 2020</published>
    <updated></updated>
    <summary type="html"><![CDATA[<p><code>cabal repl</code> コマンドは</p>
<ul>
<li><code>ghci</code>, <code>ghc --interactive</code></li>
<li><code>stack repl</code>, <code>stack ghci</code></li>
</ul>
<p>などと同じように <strong>cabal</strong> で <strong>REPL</strong> 環境を実行するためのコマンドです。</p>
<p><strong>cabal</strong> プロジェクト内で実行する場合と、<strong>cabal</strong> プロジェクト外で実行する場合で挙動が少し異なります。</p>
<pre class="shell"><code>$ cabal -V
cabal-install version 3.2.0.0
compiled using version 3.2.0.0 of the Cabal library</code></pre>
<!--more-->
<h2 id="cabal-プロジェクト外で実行した場合"><strong>cabal</strong> プロジェクト外で実行した場合</h2>
<p><strong>cabal</strong> は自動的に <strong>fake-package</strong> という環境を用意します。これは使い捨てのダミー <strong>cabal</strong> プロジェクトです。</p>
<pre class="shell"><code>$ cabal repl
Resolving dependencies...
Build profile: -w ghc-8.10.1 -O1
In order, the following will be built (use -v for more details):
 - fake-package-0 (lib) (first run)
Configuring library for fake-package-0..
Preprocessing library for fake-package-0..
Warning: No exposed modules
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-3302/setcwd.ghci
Prelude&gt;</code></pre>
<p>生成される内容は <a href="https://github.com/haskell/cabal/blob/cabal-install-v3.2.0.0/cabal-install/Distribution/Client/CmdRepl.hs#L392">withoutProject</a> の中で定義されています。また、ログメッセージの最後に表示されている <code>/tmp/cabal-repl.-3302/</code> ディレクトリに、実際に生成された <strong>cabal</strong> ファイルなどが保存されます。</p>
<pre class="shell"><code>$ ls /tmp/cabal-repl.-3302/
dist-newstyle  fake-package.cabal  setcwd.ghci</code></pre>
<p><code>cabal-install-3.2</code> で生成される <code>fake-package.cabal</code> の内容は以下のようになっています。</p>
<pre><code>cabal-version: 2.2
name:          fake-package
version:       0

library
    default-language: Haskell2010
    build-depends:    base -any</code></pre>
<p><strong>build-depends</strong> に <code>base -any</code> が指定されているため、<strong>GHC</strong> のバージョンに対応した <strong>base</strong> パッケージがデフォルトで利用可能です。</p>
<p><strong>REPL</strong> の使い方は <strong>ghci</strong> などと同じなので大丈夫でしょう。</p>
<h3 id="repl-起動時のメッセージを省略する"><strong>REPL</strong> 起動時のメッセージを省略する</h3>
<p><strong>REPL</strong> 起動時のメッセージを省略するためには <code>-v0</code> オプションを指定します。</p>
<pre class="shell"><code>$ cabal repl -v0
Prelude&gt;</code></pre>
<h3 id="repl-で利用する-ghc-を切り替える"><strong>REPL</strong> で利用する GHC を切り替える</h3>
<p><code>cabal build</code> などでもおなじみの <code>-w</code> (<code>--with-compiler</code>) オプションを指定するだけです。</p>
<pre class="shell"><code>$ cabal repl -w ghc-8.8.3
...
GHCi, version 8.8.3: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20727/setcwd.ghci
Prelude&gt;

$ cabal repl -w ghc-8.10.1
...
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /tmp/cabal-repl.-20914/setcwd.ghci</code></pre>
<h3 id="ファイルを指定して-repl-を起動">ファイルを指定して <strong>REPL</strong> を起動</h3>
<p>例えば <code>ghci A.hs</code> のように <strong>REPL</strong> 起動時にファイル (モジュール) を読み込みたい時があります。</p>
<p>しかし、これを <strong>cabal</strong> で同じように実行するとエラーになります。</p>
<pre class="shell"><code>$ cabal repl -v0 A.hs
cabal: &#39;repl&#39; doesn&#39;t take any extra arguments when outside a project: A.hs</code></pre>
<p>そのため、一度 <code>cabal repl</code> を実行してから <code>:l</code> コマンドでファイルを読み込む必要があります。</p>
<pre class="shell"><code>$ cabal repl -v0
Prelude&gt; :l A.hs
*A&gt;</code></pre>
<h3 id="repl-にオプションを渡す"><strong>REPL</strong> にオプションを渡す</h3>
<p><code>stack repl</code> の <code>--ghci-options</code> に相当するオプションは <code>--repl-options</code> です。</p>
<pre class="shell"><code>$ cabal repl -v0 --repl-options=&quot;-XNoImplicitPrelude&quot;
&gt;</code></pre>
<p>複数指定する場合は <code>--repl-options</code> を何度も指定する必要があります。たぶんこれは<a href="https://github.com/haskell/cabal/pull/6190">仕様</a>っぽいです</p>
<pre class="shell"><code>$ cabal repl -v0 --repl-options=&quot;-XNoImplicitPrelude&quot; --repl-options=&quot;-XNoStarIsType&quot;</code></pre>
<h3 id="repl-に依存関係を追加"><strong>REPL</strong> に依存関係を追加</h3>
<p><strong>REPL</strong> を動かす際、少し複雑なファイルの場合は <strong>base</strong> 以外のパッケージを利用していることがほとんどです。</p>
<p>そういう時には <code>-b</code> (<code>--build-depends</code>) オプションを利用します。このオプションは <code>stack repl --package</code> と同じような感じでパッケージを追加できます。</p>
<p><strong>vector</strong> パッケージを追加で読み込む例です。(パッケージのビルドが走る場合があります。)</p>
<pre class="shell"><code>$ cabal repl -b vector
...
Prelude&gt; import Data.Vector
Prelude Data.Vector&gt; </code></pre>
<p>複数のパッケージ <strong>vector</strong>, <strong>aeson</strong> を読み込む例は以下のようになります。</p>
<pre class="shell"><code>$ cabal repl -b vector -b aeson
...
Prelude&gt; import Data.Vector
Prelude Data.Vector&gt; import Data.Aeson
Prelude Data.Vector Data.Aeson&gt;</code></pre>
<p>このように、カンマ区切りで続けてパッケージを指定することも可能です。(<code>-b</code> ではエラーになります)</p>
<pre class="shell"><code>$ cabal repl -v0 --build-depends=&quot;vector, aeson&quot;
Prelude&gt;</code></pre>
<p>パッケージのバージョンを指定することも可能です。バージョンの指定には <strong>build-depends</strong> と同じ記法が使えます。</p>
<pre class="shell"><code>$ cabal repl -b aeson==1.4.7.1
...
Prelude&gt;</code></pre>
<hr />
<p>ここで、パッケージを追加した際は追加したパッケージが依存しているパッケージも含めて読み込まれる点に注意してください。(つまり、推移的に依存関係が追加されます)</p>
<p>例えば <a href="https://hackage.haskell.org/package/deepseq">deepseq</a> パッケージで定義されている <code>Control.DeepSeq</code> は本当なら <strong>import</strong> できないはずです。しかし、<a href="https://hackage.haskell.org/package/vector">vector</a> パッケージは <strong>deepseq</strong> に依存しているため <strong>import</strong> できてしまいます。</p>
<pre class="shell"><code>$ cabal repl -v0 -b vector
Prelude&gt; import Control.DeepSeq 
Prelude Control.DeepSeq&gt;</code></pre>
<p>この挙動を変更したい場合は <code>--no-transitive-deps</code> オプションを指定します。</p>
<pre class="shell"><code>$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&gt; import Control.DeepSeq 

&lt;no location info&gt;: error:
    Could not load module ‘Control.DeepSeq’
    It is a member of the hidden package ‘deepseq-1.4.4.0’.
    Perhaps you need to add ‘deepseq’ to the build-depends in your .cabal file.</code></pre>
<p>読み込まれるパッケージがどのように変化しているか確認しておきましょう。</p>
<pre class="shell"><code>$ cabal repl -v0
Prelude&gt; :show packages 
active package flags:
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector
Prelude&gt; :show packages 
active package flags:
  -package-id transformers-0.5.6.2
  -package-id primitive-0.7.0.1-26f169240ac34903846f3a33e2517e97382af71bd7fe7cb7262fd6ca4381f53e
  -package-id array-0.5.4.0
  -package-id deepseq-1.4.4.0
  -package-id integer-gmp-1.0.3.0
  -package-id rts
  -package-id ghc-prim-0.6.1
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0

$ cabal repl -v0 -b vector --no-transitive-deps
Prelude&gt; :show packages 
active package flags:
  -package-id vector-0.12.1.2-8dc77cdd80241a59f0811ecc4c067ae98900f833977f73cce9795875f4909da9
  -package-id base-4.14.0.0</code></pre>
<h2 id="cabal-プロジェクト内で実行した場合"><strong>cabal</strong> プロジェクト内で実行した場合</h2>
<p>基本的にはプロジェクト内で <code>cabal repl</code> と実行するとプロジェクトの <strong>cabal</strong> ファイルに従い</p>
<ul>
<li>依存関係の追加</li>
<li>モジュールの追加</li>
<li>オプションの追加</li>
</ul>
<p>などを自動的に行い、<strong>REPL</strong> を起動します。</p>
<pre class="shell"><code>$ cabal repl -v0
*MyLib&gt; </code></pre>
<p>この時、<strong>import</strong> されるモジュールは1つのみです。(これは仕様みたいです)</p>
<p>そのため、必要なモジュールは自分で <strong>import</strong> する必要があります。</p>
<h3 id="プロジェクトを無視して-repl-を起動">プロジェクトを無視して <strong>REPL</strong> を起動</h3>
<p>プロジェクトを無視して <strong>REPL</strong> を起動するためには <code>-z</code> (<code>--ignore-project</code>) オプションを指定します。</p>
<pre class="shell"><code>$ cabal repl -v0 -z
Prelude&gt;</code></pre>
<h2 id="今回紹介したオプション一覧">今回紹介したオプション一覧</h2>
<table>
<thead>
<tr class="header">
<th>short</th>
<th>long</th>
<th>オプションの意味</th>
<th>stack</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>無し</td>
<td><code>--repl-options</code></td>
<td><strong>ghci</strong> に渡すオプション指定</td>
<td><code>--ghci-options</code></td>
</tr>
<tr class="even">
<td><code>-b</code></td>
<td><code>--build-depends</code></td>
<td>依存関係の追加</td>
<td><code>--package</code></td>
</tr>
<tr class="odd">
<td><code>-z</code></td>
<td><code>--ignore-project</code></td>
<td>プロジェクトの <strong>cabal</strong> を無視する</td>
<td><code>--no-load</code> が近いけど<br>プロジェクトの依存関係は読み込む</td>
</tr>
<tr class="even">
<td>無し</td>
<td><code>--no-transitive-deps</code></td>
<td>推移的な依存関係を追加しない</td>
<td>デフォルトの動作</td>
</tr>
<tr class="odd">
<td><code>-w</code></td>
<td><code>--with-compiler</code></td>
<td>利用するコンパイラの指定</td>
<td><code>-with-ghc</code>?</td>
</tr>
<tr class="even">
<td><code>-v0</code></td>
<td><code>--verbose=0</code></td>
<td>起動時のメッセージを省略</td>
<td>無し</td>
</tr>
</tbody>
</table>
<h2 id="参考リソース">参考リソース</h2>
<ul>
<li><a href="https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-repl">5.4.4. cabal v2-repl - Cabal User Manual</a></li>
<li><a href="https://github.com/haskell/cabal/pull/5454">Add –build-depends flag, associated support to new-repl #5454</a></li>
<li><a href="https://github.com/haskell/cabal/pull/3565">Cabal repl and cabal build/run conflict over .o object files if ghci has -fobject-code set #3565</a></li>
<li><a href="https://github.com/haskell/cabal/pull/2592">cabal repl load single module #2592</a></li>
<li><a href="https://github.com/haskell/cabal/pull/6190">–repl-options doesn’t split on whitespace #6190</a></li>
<li><a href="https://github.com/haskell/cabal/pull/5845">Allow list for <code>repl --build-depends</code> #5845</a></li>
<li><a href="https://github.com/haskell/cabal/issues/5374"><code>cabal new-repl</code> only brings one module into scope #5374</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>cabal-plan license-report 機能の紹介</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/03-30-cabal-plan-license-report.html</id>
    <published>March 30, 2020</published>
    <updated></updated>
    <summary type="html"><![CDATA[<p><a href="https://hackage.haskell.org/package/cabal-plan">cabal-plan</a> を使って、プロジェクトが依存するパッケージのライセンスを列挙する方法について紹介します。</p>
<p>本記事は <a href="https://www.reddit.com/r/haskell/comments/8vhkwv/is_there_a_tool_to_collect_all_license_files_of/">Is there a tool to collect all LICENSE files of used dependencies?</a> を参考にしています。</p>
<pre class="shell"><code>$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library</code></pre>
<!--more-->
<h2 id="インストール方法">インストール方法</h2>
<pre class="shell"><code>$ cabal update
$ cabal install cabal-plan -f license-report
$ cabal-plan --version
cabal-plan 0.6.2.0</code></pre>
<p>今回の機能を使うためには <strong>license-report</strong> フラグを有効にする必要があります。デフォルトでは無効になっています。</p>
<h2 id="ライセンスの列挙">ライセンスの列挙</h2>
<p>具体例として、このブログで試してみましょう。</p>
<ul>
<li><a href="https://github.com/e-bigmoon/haskell-blog">e-bigmoon/haskell-blog</a></li>
</ul>
<p>ライセンスファイルを抽出する場合は <code>--licensedir</code> オプションで出力先ディレクトリを指定します。</p>
<pre class="shell"><code>$ cabal-plan license-report --licensedir=licenses exe:site &gt; blog.md
WARNING: couldn&#39;t find metadata for base-4.13.0.0
WARNING: couldn&#39;t find metadata for hakyll-sass-0.3
WARNING: license files for array-0.5.4.0 (global/GHC bundled) not copied
WARNING: license files for binary-0.8.7.0 (global/GHC bundled) not copied
WARNING: license files for bytestring-0.10.10.0 (global/GHC bundled) not copied
WARNING: license files for containers-0.6.2.1 (global/GHC bundled) not copied
WARNING: license files for deepseq-1.4.4.0 (global/GHC bundled) not copied
WARNING: license files for directory-1.3.6.0 (global/GHC bundled) not copied
WARNING: license files for filepath-1.4.2.1 (global/GHC bundled) not copied
WARNING: couldn&#39;t find metadata for ghc-boot-th-8.8.3
WARNING: license files for ghc-prim-0.5.3 (global/GHC bundled) not copied
WARNING: license files for integer-gmp-1.0.2.0 (global/GHC bundled) not copied
WARNING: license files for mtl-2.2.2 (global/GHC bundled) not copied
WARNING: license files for parsec-3.1.14.0 (global/GHC bundled) not copied
WARNING: license files for pretty-1.1.3.6 (global/GHC bundled) not copied
WARNING: license files for process-1.6.8.0 (global/GHC bundled) not copied
WARNING: license files for stm-2.5.0.0 (global/GHC bundled) not copied
WARNING: license files for template-haskell-2.15.0.0 (global/GHC bundled) not copied
WARNING: license files for text-1.2.4.0 (global/GHC bundled) not copied
WARNING: license files for time-1.9.3 (global/GHC bundled) not copied
WARNING: license files for transformers-0.5.6.2 (global/GHC bundled) not copied
WARNING: license files for unix-2.7.2.2 (global/GHC bundled) not copied</code></pre>
<h2 id="出力結果">出力結果</h2>
<p><code>licenses</code> ディレクトリはだいたいこんな感じでライセンスファイルが格納されています。</p>
<pre class="shell"><code>$ tree licenses | head -n 20
licenses
├── Glob-0.10.0
│   └── LICENSE.txt
├── HTTP-4000.3.14
│   └── LICENSE
├── HsYAML-0.2.1.0
│   ├── LICENSE.GPLv2
│   └── LICENSE.GPLv3
├── HsYAML-aeson-0.2.0.0
│   └── LICENSE.GPLv2
├── JuicyPixels-3.3.5
│   └── LICENSE
├── Only-0.1
│   └── LICENSE
├── QuickCheck-2.13.2
│   └── LICENSE
├── SHA-1.6.4.4
│   └── LICENSE
├── StateVar-1.2
│   └── LICENSE</code></pre>
<hr />
<p><code>blog.md</code> の内容を一部を以下に貼り付けます。完全なコードは<a href="https://github.com/e-bigmoon/haskell-blog/sample-code/2020/03-30/blog.md">こちら</a>。</p>
<h1 id="dependency-license-report">Dependency License Report</h1>
<p>Bold-faced <strong><code>package-name</code></strong>s denote standard libraries bundled with <code>ghc-8.8.3</code>.</p>
<h2 id="direct-dependencies-of-bigmoon-haskellers-blogexesite">Direct dependencies of <code>bigmoon-haskellers-blog:exe:site</code></h2>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Version</th>
<th><a href="https://spdx.org/licenses/">SPDX</a> License Id</th>
<th>Description</th>
<th>Also depended upon by</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong><code>base</code></strong></td>
<td><a href="http://hackage.haskell.org/package/base-4.13.0.0"><code>4.13.0.0</code></a></td>
<td><em>MISSING</em></td>
<td><em>MISSING</em></td>
<td><em>(core library)</em></td>
</tr>
<tr class="even">
<td><code>extensible</code></td>
<td><a href="http://hackage.haskell.org/package/extensible-0.8"><code>0.8</code></a></td>
<td><a href="licenses/extensible-0.8/LICENSE"><code>BSD-3-Clause</code></a></td>
<td>Extensible, efficient, optics-friendly data types and effects</td>
<td></td>
</tr>
<tr class="odd">
<td><code>hakyll</code></td>
<td><a href="http://hackage.haskell.org/package/hakyll-4.13.2.0"><code>4.13.2.0</code></a></td>
<td><a href="licenses/hakyll-4.13.2.0/LICENSE"><code>BSD-3-Clause</code></a></td>
<td>A static website compiler library</td>
<td><code>hakyll-sass</code></td>
</tr>
<tr class="even">
<td><code>hakyll-sass</code></td>
<td><a href="http://hackage.haskell.org/package/hakyll-sass-0.3"><code>0.3</code></a></td>
<td><em>MISSING</em></td>
<td><em>MISSING</em></td>
<td></td>
</tr>
<tr class="odd">
<td><code>html-entities</code></td>
<td><a href="http://hackage.haskell.org/package/html-entities-1.1.4.3"><code>1.1.4.3</code></a></td>
<td><a href="licenses/html-entities-1.1.4.3/LICENSE"><code>MIT</code></a></td>
<td>A codec library for HTML-escaped text and HTML-entities</td>
<td></td>
</tr>
<tr class="even">
<td><code>rio</code></td>
<td><a href="http://hackage.haskell.org/package/rio-0.1.14.1"><code>0.1.14.1</code></a></td>
<td><a href="licenses/rio-0.1.14.1/LICENSE"><code>MIT</code></a></td>
<td>A standard library for Haskell</td>
<td></td>
</tr>
<tr class="odd">
<td><code>yaml</code></td>
<td><a href="http://hackage.haskell.org/package/yaml-0.11.3.0"><code>0.11.3.0</code></a></td>
<td><a href="licenses/yaml-0.11.3.0/LICENSE"><code>BSD-3-Clause</code></a></td>
<td>Support for parsing and rendering YAML documents.</td>
<td><code>hakyll</code>, <code>pandoc-citeproc</code></td>
</tr>
</tbody>
</table>
<h2 id="indirect-transitive-dependencies">Indirect transitive dependencies</h2>
<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Version</th>
<th><a href="https://spdx.org/licenses/">SPDX</a> License Id</th>
<th>Description</th>
<th>Depended upon by</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Glob</code></td>
<td><a href="http://hackage.haskell.org/package/Glob-0.10.0"><code>0.10.0</code></a></td>
<td><a href="licenses/Glob-0.10.0/LICENSE.txt"><code>BSD-3-Clause</code></a></td>
<td>Globbing library</td>
<td><code>pandoc</code></td>
</tr>
<tr class="even">
<td><code>HTTP</code></td>
<td><a href="http://hackage.haskell.org/package/HTTP-4000.3.14"><code>4000.3.14</code></a></td>
<td><a href="licenses/HTTP-4000.3.14/LICENSE"><code>BSD-3-Clause</code></a></td>
<td>A library for client-side HTTP</td>
<td><code>pandoc</code></td>
</tr>
</tbody>
</table>
<h2 id="まとめ">まとめ</h2>
<p>今回は <strong>cabal-plan</strong> を使ってみましたが、同様のツールとして <a href="https://github.com/fossas/fossa-cli/blob/master/docs/integrations/haskell.md#haskell">fossas/fossa-cli</a> や <a href="https://github.com/github/licensed/blob/master/docs/sources/cabal.md">github/licensed</a> なども利用できるようです。</p>]]></summary>
</entry>
<entry>
    <title>Haskell 関連書籍の紹介ページを作りました</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/03-28-haskell-books.html</id>
    <published>March 28, 2020</published>
    <updated></updated>
    <summary type="html"><![CDATA[<p><strong>Qiita</strong> で管理していた記事を移動しました。</p>
<!--more-->
<h2 id="haskell-関連の書籍紹介ページ">Haskell 関連の書籍紹介ページ</h2>
<p>「<a href="/books/">これから Haskell を学ぶ人のための書籍・論文紹介</a>」というページを作りました。</p>
<p>基本的には Qiita で管理していた内容ですが、いくつか書籍を追加し、「サポートページ」「正誤表」「レビュー」へのリンク等を追加しました。内容に不備がある場合は <a href="https://github.com/e-bigmoon/haskell-blog/issues">issue</a> などで教えていただけると助かります。</p>
<p>現在は主に自分が持っている物理書籍メインに紹介していますが、今後は電子書籍なども含めて充実させていけたらと思います。</p>
<p>ちなみに、今から入門するなら「<a href="https://www.lambdanote.com/collections/frontpage/products/haskell">プログラミング Haskell 第2版</a>」をオススメします。</p>]]></summary>
</entry>
<entry>
    <title>cabal install コマンドについて</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/03-25-cabal-install.html</id>
    <published>March 25, 2020</published>
    <updated>April  3, 2020</updated>
    <summary type="html"><![CDATA[<ul>
<li><code>stack install</code> と全く同じ動作をする <strong>cabal</strong> コマンドは <code>cabal install all:exes</code> です。</li>
</ul>
<hr />
<p>今回利用した <strong>cabal</strong> と <strong>stack</strong> のバージョンは以下の通りです。</p>
<pre class="shell"><code>$ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library 

$ stack --version
Version 2.1.3, Git revision 636e3a759d51127df2b62f90772def126cdf6d1f (7735 commits) x86_64 hpack-0.31.2</code></pre>
<p>この記事では <code>stack install</code> コマンドと <code>cabal install</code> コマンドの挙動の違いなどについて調査した結果等をまとめています。</p>
<!--more-->
<h2 id="プロジェクトの構成">プロジェクトの構成</h2>
<p>例えば、プロジェクトが以下のような構成になっていて、<strong>executable</strong> (mainExe1, mainExe2, subExe1, subExe2) が定義されているとしましょう。</p>
<pre class="shell"><code>$ tree .
.
├── app
│   ├── Main1.hs
│   └── Main2.hs
├── cabal.project
├── stack.yaml
├── subs
│   ├── pkg1
│   │   ├── app
│   │   │   └── Main.hs
│   │   └── pkg1.cabal
│   └── pkg2
│       ├── app
│       │   └── Main.hs
│       └── pkg2.cabal
└── app.cabal</code></pre>
<p><a href="https://github.com/e-bigmoon/haskell-blog/tree/master/sample-code/2020/03-25/">プロジェクトのコード</a></p>
<h2 id="stack-install-と-cabal-install-の違い">stack install と cabal install の違い</h2>
<table>
<thead>
<tr class="header">
<th>　</th>
<th><code>stack install</code></th>
<th><code>cabal install</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>インストール方法</td>
<td>コピー</td>
<td><strong>シンボリックリンク</strong></td>
</tr>
<tr class="even">
<td>インストール先ディレクトリの指定オプション</td>
<td><code>local-bin-path</code></td>
<td><code>--installdir</code></td>
</tr>
</tbody>
</table>
<h3 id="cabal-install">cabal install</h3>
<p><code>cabal install</code> に指定可能なコマンドをいくつか試してみて、実際に何がインストールされるか一覧にしました。</p>
<table>
<thead>
<tr class="header">
<th>コマンド</th>
<th style="text-align: center;"><code>mainExe1</code></th>
<th style="text-align: center;"><code>mainExe2</code></th>
<th style="text-align: center;"><code>subExe1</code></th>
<th style="text-align: center;"><code>subExe2</code></th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cabal install</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install .</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install app</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install pkg1</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install pkg2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install . pkg1 pkg2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install app pkg1 pkg2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install all</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td>*注意点</td>
</tr>
<tr class="odd">
<td><code>cabal install all:exes</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<ul>
<li><code>cabal install</code> や <code>stack install .</code> の挙動など、いくつか <strong>stack</strong> と異なる場合があるので注意が必要です。</li>
<li>注意点: 全てのパッケージに <strong>executable</strong> が含まれている場合に限り実行可能です。
<ul>
<li><code>cabal install all</code> で <strong>executable</strong> が含まれていないパッケージがある場合は以下のようなエラーになります。</li>
</ul></li>
</ul>
<pre class="shell"><code>cabal: Cannot build the executables in the package pkg2 because it does not
contain any executables. Check the .cabal file for the package and make sure
that it properly declares the components that you expect.</code></pre>
<ul>
<li><code>stack install</code> に相当するコマンドは <code>cabal install all:exes</code> です。</li>
</ul>
<h3 id="stack-install">stack install</h3>
<p>同様に <code>stack install</code> も確認しました。</p>
<table>
<thead>
<tr class="header">
<th>コマンド</th>
<th style="text-align: center;"><code>mainExe1</code></th>
<th style="text-align: center;"><code>mainExe2</code></th>
<th style="text-align: center;"><code>subExe1</code></th>
<th style="text-align: center;"><code>subExe2</code></th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>stack install</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>stack install .</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>stack install app</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td><code>stack install pkg1</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="odd">
<td><code>stack install pkg2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>stack install . pkg1 pkg2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー1</td>
</tr>
<tr class="odd">
<td><code>stack install app pkg1 pkg2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>stack install all</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー2</td>
</tr>
<tr class="odd">
<td><code>stack install all:exes</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー2</td>
</tr>
</tbody>
</table>
<p>エラー 1</p>
<pre class="shell"><code>$ stack install . pkg1 pkg2
The following errors occurred while parsing the build targets:
- The package pkg1 was specified in multiple, incompatible ways: . pkg1
- The package pkg2 was specified in multiple, incompatible ways: . pkg2</code></pre>
<p>エラー 2</p>
<pre class="shell"><code>$ stack install all
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: all
Some different approaches to resolving this:
Plan construction failed.</code></pre>
<h3 id="その他の指定方法">その他の指定方法</h3>
<h4 id="cabal">cabal</h4>
<table>
<thead>
<tr class="header">
<th>コマンド</th>
<th style="text-align: center;"><code>mainExe1</code></th>
<th style="text-align: center;"><code>mainExe2</code></th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cabal install app:exe</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー1</td>
</tr>
<tr class="even">
<td><code>cabal install app:exes</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install app:exe:mainExe1</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install app:exe:mainExe2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install app:mainExe1</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install app:mainExe2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install exes</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install exe:mainExe1</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install exe:mainExe2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="even">
<td><code>cabal install mainExe1</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>cabal install mainExe2</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>エラー1</p>
<pre class="shell"><code>$ cabal install app:exe
cabal: Unknown target &#39;app:exe&#39;.
The package app has no component &#39;exe&#39;.</code></pre>
<h4 id="stack">stack</h4>
<table>
<thead>
<tr class="header">
<th>コマンド</th>
<th style="text-align: center;"><code>mainExe1</code></th>
<th style="text-align: center;"><code>mainExe2</code></th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>stack install app:exe</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー1</td>
</tr>
<tr class="even">
<td><code>stack install app:exes</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー1</td>
</tr>
<tr class="odd">
<td><code>stack install app:exe:mainExe1</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td><code>stack install app:exe:mainExe2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>stack install app:mainExe1</code></td>
<td style="text-align: center;">O</td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td><code>stack install app:mainExe2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">O</td>
<td></td>
</tr>
<tr class="odd">
<td><code>stack install exes</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー2</td>
</tr>
<tr class="even">
<td><code>stack install exe:mainExe1</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー2</td>
</tr>
<tr class="odd">
<td><code>stack install exe:mainExe2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー2</td>
</tr>
<tr class="even">
<td><code>stack install mainExe1</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー3</td>
</tr>
<tr class="odd">
<td><code>stack install mainExe2</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td>*エラー3</td>
</tr>
</tbody>
</table>
<hr />
<p>エラー1</p>
<pre class="shell"><code>$ stack install app:exe
Error parsing targets: Component exe does not exist in package app</code></pre>
<p>エラー2</p>
<pre class="shell"><code>$ stack install exe:mainExe1
Error parsing targets: Unknown local package: exe</code></pre>
<p>エラー3</p>
<pre class="shell"><code>$ stack install mainExe1
Error: While constructing the build plan, the following exceptions were encountered:
Unknown package: mainExe1
Some different approaches to resolving this:
Plan construction failed.</code></pre>
<h2 id="cabal-install-で良く使うオプション">cabal install で良く使うオプション</h2>
<table>
<colgroup>
<col style="width: 47%" />
<col style="width: 52%" />
</colgroup>
<thead>
<tr class="header">
<th>オプション</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>--installdir=&lt;path&gt;</code></td>
<td>インストール先のパスを指定</td>
</tr>
<tr class="even">
<td><code>--install-method=copy</code></td>
<td>シンボリックリンクではなく、実体がコピーされる。<br><strong>Docker</strong> にバイナリをコピーする際や <strong>Windows</strong> 環境などで利用することがあります。</td>
</tr>
<tr class="odd">
<td><code>--overwrite-policy=always</code></td>
<td>すでに実行ファイルが存在する場合でも、常に上書きします。</td>
</tr>
</tbody>
</table>
<hr />
<p><code>--overwrite-policy=always</code> を毎回指定するのが面倒な場合は</p>
<pre class="shell"><code>$ cabal user-config update -a overwrite-policy:always</code></pre>
<p>というコマンドで <code>~/.cabal/config</code> に設定できます。</p>
<h2 id="で変更になる点など">3.2.0.0 で変更になる点など</h2>
<ul>
<li><a href="https://github.com/haskell/cabal/pull/6519/files">Copy on windows #6519</a></li>
</ul>
<p><strong>Windows</strong> 環境において <code>cabal install</code> の際のデフォルトの挙動が変更されます。シンボリックリンクが作成できない場合は自動的にコピーになります。</p>
<hr />
<ul>
<li><a href="https://github.com/haskell/cabal/pull/6428">Implement cabal install -z #6428</a></li>
</ul>
<p>ローカルのプロジェクト設定を無視するオプション <code>-z</code>, <code>--ignore-project</code> が追加されます。</p>
<hr />
<ul>
<li><a href="https://github.com/haskell/cabal/pull/6576">Resolve #6369 and #6393: Allow cabal v2-install pkgname:exename or http://example.com/package.tar.gz(#sha256=abcde…) #6576</a></li>
</ul>
<pre class="shell"><code>$ cabal install &#39;https://hackage.haskell.org/package/cabal-fmt-0.1.2/cabal-fmt-0.1.2.tar.gz#sha256=aae556efbcaddfd65c6a1c1811b122b0d8c8d00624c8c2e36aabb5e9f9ea9840&#39;</code></pre>]]></summary>
</entry>
<entry>
    <title>HUnit で日本語が文字化けする問題</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/02-19-hunit-show-unicode.html</id>
    <published>February 19, 2020</published>
    <updated>February 19, 2020</updated>
    <summary type="html"><![CDATA[<p><code>HUnit</code> で日本語を扱おうとすると、以下のように文字化けしますよね。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a>expected<span class="op">:</span> <span class="st">&quot;\12495\12473\12465\12523&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2"></a> but got<span class="op">:</span> <span class="st">&quot;Haskell&quot;</span></span></code></pre></div>
<p>この問題は簡単に回避できるので、その方法を紹介します。やり方は <a href="https://github.com/hspec/hspec/issues/384">Human-readable output of unicode characters in expectation results #384</a> の方法そのまんまです。</p>
<!--more-->
<h2 id="問題が発生している原因">問題が発生している原因</h2>
<p>今回使うコードはとてもシンプルです。依存しているパッケージは <a href="https://hackage.haskell.org/package/HUnit">HUnit</a> です。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- Main.hs</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">import</span> <span class="dt">Test.HUnit</span> <span class="kw">hiding</span> ((@?=))</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Test.HUnit</span> <span class="kw">as</span> <span class="dt">HUnit</span> ((@?=))</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">import</span> <span class="dt">Text.Show.Unicode</span></span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="ot">bad ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-7"><a href="#cb2-7"></a>bad <span class="ot">=</span> runTestTT (<span class="dt">TestCase</span> <span class="op">$</span> <span class="st">&quot;Haskell&quot;</span> <span class="op">HUnit.@?=</span> <span class="st">&quot;ハスケル&quot;</span>) <span class="op">&gt;&gt;</span> <span class="fu">return</span> ()</span></code></pre></div>
<p>上記のコードを実行すると、以下のような結果になります。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="op">$</span> stack repl <span class="co">--package HUnit ./Main.hs</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> bad</span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="pp">### Failure:                              </span></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="op">/</span>home<span class="op">/</span>guchi<span class="op">/</span><span class="dt">Desktop</span><span class="op">/</span>repos<span class="op">/</span>haskell<span class="op">-</span>blog<span class="op">/</span>sample<span class="op">-</span>code<span class="op">/</span><span class="dv">2020</span><span class="op">/</span><span class="dv">02</span><span class="op">-</span><span class="dv">19</span><span class="op">/</span>Main.hs<span class="op">:</span><span class="dv">6</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>expected<span class="op">:</span> <span class="st">&quot;\12495\12473\12465\12523&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6"></a> but got<span class="op">:</span> <span class="st">&quot;Haskell&quot;</span></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="dt">Cases</span><span class="op">:</span> <span class="dv">1</span>  <span class="dt">Tried</span><span class="op">:</span> <span class="dv">1</span>  <span class="dt">Errors</span><span class="op">:</span> <span class="dv">0</span>  <span class="dt">Failures</span><span class="op">:</span> <span class="dv">1</span></span></code></pre></div>
<p>この問題は何故発生するかと言うと、<code>HUnit</code> 内部で <code>show</code> 関数を利用しているためです。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="fu">show</span> <span class="st">&quot;ハスケル&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="st">&quot;\12495\12473\12465\12523&quot;</span></span></code></pre></div>
<p>上記のような文字化けに対応するには <a href="https://hackage.haskell.org/package/unicode-show">unicode-show</a> パッケージの <strong>ushow</strong> 関数が便利です。より詳しい紹介は「<a href="https://haskell.jp/blog/posts/2019/unicode-show.html">日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）</a>」を参照してください。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="op">$</span> stack repl <span class="co">--package HUnit --package unicode-show ./Main.hs</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Text.Show.Unicode</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="op">*</span><span class="dt">Main</span> <span class="dt">Text.Show.Unicode</span><span class="op">&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> ushow <span class="st">&quot;ハスケル&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="st">&quot;ハスケル&quot;</span></span></code></pre></div>
<p>ということで、<strong>HUnit</strong> を <strong>ushow</strong> を使うようにしてみましょう。</p>
<h2 id="解決策">解決策</h2>
<p>やり方はとても簡単です。<strong>(@?=)</strong> を以下のように再定義するだけです。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">newtype</span> <span class="dt">UString</span> a <span class="ot">=</span> <span class="dt">UString</span> a</span>
<span id="cb6-2"><a href="#cb6-2"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb6-3"><a href="#cb6-3"></a></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">instance</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">UString</span> a) <span class="kw">where</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  <span class="fu">show</span> (<span class="dt">UString</span> s) <span class="ot">=</span> ushow s</span>
<span id="cb6-6"><a href="#cb6-6"></a></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="ot">(@?=) ::</span> (<span class="dt">Eq</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">HUnit.Assertion</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>actual <span class="op">@?=</span> expected <span class="ot">=</span> <span class="dt">UString</span> actual <span class="op">HUnit.@?=</span> <span class="dt">UString</span> expected</span></code></pre></div>
<p>コード全体は以下の通りです。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">import</span> <span class="dt">Test.HUnit</span> <span class="kw">hiding</span> ((@?=))</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Test.HUnit</span> <span class="kw">as</span> <span class="dt">HUnit</span> ((@?=))</span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="kw">import</span> <span class="dt">Text.Show.Unicode</span></span>
<span id="cb7-4"><a href="#cb7-4"></a></span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="ot">bad ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-6"><a href="#cb7-6"></a>bad <span class="ot">=</span> runTestTT (<span class="dt">TestCase</span> <span class="op">$</span> <span class="st">&quot;Haskell&quot;</span> <span class="op">HUnit.@?=</span> <span class="st">&quot;ハスケル&quot;</span>) <span class="op">&gt;&gt;</span> <span class="fu">return</span> ()</span>
<span id="cb7-7"><a href="#cb7-7"></a></span>
<span id="cb7-8"><a href="#cb7-8"></a><span class="kw">newtype</span> <span class="dt">UString</span> a <span class="ot">=</span> <span class="dt">UString</span> a</span>
<span id="cb7-9"><a href="#cb7-9"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb7-10"><a href="#cb7-10"></a></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="kw">instance</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">UString</span> a) <span class="kw">where</span></span>
<span id="cb7-12"><a href="#cb7-12"></a>  <span class="fu">show</span> (<span class="dt">UString</span> s) <span class="ot">=</span> ushow s</span>
<span id="cb7-13"><a href="#cb7-13"></a></span>
<span id="cb7-14"><a href="#cb7-14"></a><span class="ot">(@?=) ::</span> (<span class="dt">Eq</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Assertion</span></span>
<span id="cb7-15"><a href="#cb7-15"></a>actual <span class="op">@?=</span> expected <span class="ot">=</span> <span class="dt">UString</span> actual <span class="op">HUnit.@?=</span> <span class="dt">UString</span> expected</span>
<span id="cb7-16"><a href="#cb7-16"></a></span>
<span id="cb7-17"><a href="#cb7-17"></a><span class="ot">good ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-18"><a href="#cb7-18"></a>good <span class="ot">=</span> runTestTT (<span class="dt">TestCase</span> <span class="op">$</span> <span class="st">&quot;Haskell&quot;</span> <span class="op">@?=</span> <span class="st">&quot;ハスケル&quot;</span>) <span class="op">&gt;&gt;</span> <span class="fu">return</span> ()</span></code></pre></div>
<p>実行してみましょう！</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="op">&gt;</span> good</span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="pp">### Failure:</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="op">/</span>home<span class="op">/</span>guchi<span class="op">/</span><span class="dt">Desktop</span><span class="op">/</span>repos<span class="op">/</span>haskell<span class="op">-</span>blog<span class="op">/</span>sample<span class="op">-</span>code<span class="op">/</span><span class="dv">2020</span><span class="op">/</span><span class="dv">02</span><span class="op">-</span><span class="dv">19</span><span class="op">/</span>Main.hs<span class="op">:</span><span class="dv">15</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>expected<span class="op">:</span> <span class="st">&quot;ハスケル&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5"></a> but got<span class="op">:</span> <span class="st">&quot;Haskell&quot;</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="dt">Cases</span><span class="op">:</span> <span class="dv">1</span>  <span class="dt">Tried</span><span class="op">:</span> <span class="dv">1</span>  <span class="dt">Errors</span><span class="op">:</span> <span class="dv">0</span>  <span class="dt">Failures</span><span class="op">:</span> <span class="dv">1</span></span></code></pre></div>
<p>こんな感じで他の関数も同様に定義してしまえば良い感じです。</p>
<h2 id="まとめ">まとめ</h2>
<p>日本語の文字化けで困っている人向け情報でした。</p>
<h2 id="参考リソース">参考リソース</h2>
<ul>
<li><a href="https://iwamototakashi.hatenadiary.jp/entry/20100722/p1">HUnitで日本語を出力してみる→成功</a></li>
<li><a href="https://github.com/hspec/hspec/issues/384">Human-readable output of unicode characters in expectation results #384</a></li>
<li><a href="https://haskell.jp/blog/posts/2019/unicode-show.html">日本語をshowしてうまく表示されなかったらunicode-showの紹介（と、pretty-simpleを少し）</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>stack で管理されたプロジェクトを cabal でビルドするために</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/01-22-get-freeze-from-stackage.html</id>
    <published>January 22, 2020</published>
    <updated>January 22, 2020</updated>
    <summary type="html"><![CDATA[<p>Haskell のビルドツールといえば <strong>cabal</strong> と <strong>stack</strong> です。ちょっと前までは <strong>cabal</strong> より <strong>stack</strong> の方が流行っていたのですが、最近は開発も落ち着いているようであまり動きがありません。それよりも <strong>cabal</strong> の <strong>nix-style local build</strong> が非常に使いやすく、近頃では <strong>stack</strong> から <strong>cabal</strong> に移行しているプロジェクトも多くあります。</p>
<p><strong>stack</strong> を使っていて改善したら良いなぁと思う部分としては、新しい <strong>GHC</strong> やライブラリをすぐに使おうと思っても <strong>LTS</strong> や <strong>nightly</strong> に入っていないため使えなかったり、<strong>Backpack</strong> が未だに使えなかったりするところでしょうか。</p>
<p>ただ、ビルドの再現性という点においては <strong>stack</strong> の方が優秀だと思っているので今は両方使っています。(<strong>index-state</strong> と <strong>freeze</strong> ファイルを組み合わせれば <strong>cabal</strong> でも再現性が保証されそうな気がしますが、どうなんだろう)</p>
<p>今回は <strong>stack</strong> で管理されたプロジェクトを確実に <strong>cabal</strong> でビルドするための方法についてまとめました。</p>
<ul>
<li><a href="https://medium.com/@fommil/why-not-both-8adadb71a5ed">Why Not Both?</a> に載ってた <strong>Stackage</strong> の使い方の紹介でもあります。</li>
</ul>
<!--more-->
<h2 id="モチベーション">モチベーション</h2>
<p>ここでは <code>stack</code> で管理されていて、<code>cabal</code> ファイルにバージョン制約が明記されていないという、良くあるシチュエーションを考えます。</p>
<p>どんなプロジェクトでも良いのですが、具体的には <a href="https://github.com/arcticmatt/dino-brick">arcticmatt/dino-brick</a> のようなプロジェクトです。<code>stack.yaml</code> は以下のようになっています。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-8.23</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">-</span><span class="at"> </span><span class="st">&#39;.&#39;</span></span></code></pre></div>
<p><code>dino.cabal</code> の <code>dependencies</code> には、ほとんどバージョンが明記されていません。(stack の場合はスナップショットが決まると自動的にパッケージのバージョンが決まるため、明示する必要はあまり無いのです)</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="at">  </span><span class="fu">build-depends</span><span class="kw">:</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="at">      base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">    , brick</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="at">    , containers</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="at">    , linear</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="at">    , microlens</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="at">    , microlens-th</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="at">    , random</span></span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="at">    , vty</span></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="at">    , MonadRandom</span></span></code></pre></div>
<p>このプロジェクトを <code>cabal</code> でビルドするためにはどうしたら良いんだろうか？というお話です。何もしなくてもビルドできるプロジェクトも結構あるんですが、ハマる時もあります・・・。</p>
<h2 id="package.yaml-から-cabal-ファイルを生成する">package.yaml から cabal ファイルを生成する</h2>
<p>リポジトリに <code>package.yaml</code> しか含まれていない場合は、<code>package.yaml</code> から <code>cabal</code> ファイルを生成しましょう。</p>
<p>以下のコマンドでビルドすることなくすぐに生成できます。</p>
<pre class="shell"><code>$ stack build --dry-run</code></pre>
<p>今回は <code>dino.cabal</code> が最初からリポジトリに含まれているため何もしなくても良さそうですね。</p>
<h2 id="cabal-でビルドしてみよう">cabal でビルドしてみよう</h2>
<p>とりあえずビルドしてみましょう。</p>
<pre class="shell"><code>$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update
Downloading the latest package list from hackage.haskell.org
To revert to previous state run:
    cabal v2-update &#39;hackage.haskell.org,2020-01-19T06:12:36Z&#39;

$ cabal build
...

src/UI.hs:142:56: error:
    • Couldn&#39;t match expected type ‘App s0 e0 n0’
                  with actual type ‘Game’
    • In the fourth argument of ‘customMain’, namely ‘g’
      In a stmt of a &#39;do&#39; block:
        customMain (V.mkVty V.defaultConfig) (Just chan) app g
      In the expression:
        do chan &lt;- newBChan 10
           forkIO
             $ forever
                 $ do modifyIORef counter (+ 1)
                      c&#39; &lt;- readIORef counter
                      ....
           g &lt;- initGame 0
           customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |
142 |   customMain (V.mkVty V.defaultConfig) (Just chan) app g
    |                                                        ^
cabal: Failed to build dino-0.1.0.0 (which is required by exe:dino from
dino-0.1.0.0).</code></pre>
<p>エラーがいくつも出てしまいました。上記の結果はそのうちの最後の1つだけを表示しています。</p>
<p>ちなみに <code>stack build</code> だとビルドできます。</p>
<h3 id="問題点">問題点</h3>
<p><code>stack</code> だとビルドできて、<code>cabal</code> だと失敗してしまう原因はビルド時にパッケージのバージョンにあります。どのパッケージが原因かと言うと、今回は <a href="https://hackage.haskell.org/package/brick">brick</a> です。</p>
<p><code>stack</code> の場合は <a href="https://www.stackage.org/lts-8.23">LTS-8.23</a> に含まれるバージョンを利用することになるので <a href="https://www.stackage.org/lts-8.23/package/brick-0.17.2">brick-0.17.2</a> を利用します。</p>
<p>一方で <code>cabal</code> の場合は <code>cabal update</code> を最後に実行した時の <code>Hackage</code> の最新バージョンが利用されます。これは明示的なバージョン制約が <code>cabal</code> ファイルに記述されていないためです。そのため <a href="https://hackage.haskell.org/package/brick-0.50.1">brick-0.50.1</a> などが利用されます。</p>
<p>バージョンアップによって後方互換性が保たれている場合は何も考えずにビルドが通るのですが、GHC のバージョンが変わるタイミングなどでは破壊的変更が含まれている場合も多いため、どこかでビルドが壊れます。</p>
<p>今回のプロジェクトでは <a href="https://github.com/jtdaugherty/brick/blob/master/CHANGELOG.md#047">brick-0.47</a> の変更によって <code>Brick.Main.customMain</code> の型が変わり、その結果ビルドエラーになりました。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- 0.46</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="ot">customMain ::</span> <span class="dt">Ord</span> n <span class="ot">=&gt;</span>        <span class="dt">IO</span> <span class="dt">Vty</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">BChan</span> e) <span class="ot">-&gt;</span> <span class="dt">App</span> s e n <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">IO</span> s</span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="co">-- 0.47</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="ot">customMain ::</span> <span class="dt">Ord</span> n <span class="ot">=&gt;</span> <span class="dt">Vty</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Vty</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">BChan</span> e) <span class="ot">-&gt;</span> <span class="dt">App</span> s e n <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> <span class="dt">IO</span> s</span></code></pre></div>
<p>このように、原因が特定できれば、修正は簡単です。<code>brick</code> にバージョン制約を付けるだけです。(0.47 でビルドできるようにコードを修正する方法ももちろん考えられます)</p>
<pre class="cabal"><code>library:
  build-depends:
      base &gt;= 4.7 &amp;&amp; &lt; 5
    , brick == 0.46       -- 破壊的変更が起きる前のバージョンを指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom</code></pre>
<p>このプロジェクトはこれで上手く動きました。</p>
<p>しかし、どのバージョンで壊れたかどうかを毎回調べるのはかなりつらいです。そのため、もっと良い方法として <code>LTS-8.23</code> のバージョン制約を使ってみましょう。</p>
<h2 id="cabal-freeze-コマンド">cabal freeze コマンド</h2>
<p><code>cabal</code> には <code>cabal freeze</code> というコマンドがあります。アプリケーション開発で便利な機能です。</p>
<p>コマンドを実行すると <code>cabal.project.freeze</code> というファイルが作られます。</p>
<pre class="shell"><code>$ cabal freeze
Wrote freeze file: dino-brick/cabal.project.freeze</code></pre>
<p>このファイルは一言でいえば <code>npm</code> の <code>package-lock.json</code> ファイルと同じです。ビルドの再現性を保証するためのものです。</p>
<p>例えば、先ほどの <code>dino.cabal</code> ファイルで <code>brick</code> のバージョンを <code>^&gt;= 0.46</code> のように指定した場合を考えてみましょう。この指定方法は <code>brick &gt;= 0.46 &amp;&amp; &lt; 0.47</code> と同じ意味になります。(cabal 2.0 から使えます)</p>
<pre class="cabal"><code>library:
  build-depends:
      base &gt;= 4.7 &amp;&amp; &lt; 5
    , brick ^&gt;= 0.46      -- brick &gt;= 0.46 &amp;&amp; &lt; 0.47 と同じ意味
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom</code></pre>
<p>例えば、会社のデスクトップPCでビルドしたときに <code>brick-0.46</code> がインストールされたとしましょう。</p>
<p>次の日の朝、バグフィックスされた <code>brick-0.46.1</code> が Hackage にアップロードされました。</p>
<p>その日の午後、自宅のノートPCで <code>cabal update &amp;&amp; cabal build</code> を行った場合、インストールされるのは <code>brick-0.46.1</code> になります。</p>
<p>つまり、<code>brick ^&gt;= 0.46</code> という指定方法では環境ごとに同じバージョンが使われていることを保証できません。そのため、<code>cabal freeze</code> コマンドで <code>cabal.project.freeze</code> を生成し、コマンドを実行した環境で実際に利用されている具体的なバージョンを記録しておきます。これは <code>stack</code> のスナップショットと同じようなものです。</p>
<p>実際に生成されたファイルの中身はこんな感じです。</p>
<pre class="cabal"><code>constraints: any.Cabal ==2.4.0.1,
             any.MonadRandom ==0.5.1.2,
             any.QuickCheck ==2.13.2,
             QuickCheck +templatehaskell,
             any.StateVar ==1.2,
             any.adjunctions ==4.4,
             any.ansi-terminal ==0.10.2,
             ansi-terminal -example,
             any.ansi-wl-pprint ==0.6.9,
             ansi-wl-pprint -example,
             any.array ==0.5.3.0,
             any.base ==4.12.0.0,
             any.base-orphans ==0.8.1,
             any.bifunctors ==5.5.6,
             bifunctors +semigroups +tagged,
             any.binary ==0.8.6.0,
             any.binary-orphans ==1.0.1,
             any.blaze-builder ==0.4.1.0,
             any.brick ==0.46,
             brick -demos,
             any.bytes ==0.16,
             bytes +test-doctests,
             any.bytestring ==0.10.8.2,
             any.cabal-doctest ==1.0.8,
             any.call-stack ==0.2.0,
             any.case-insensitive ==1.2.1.0,
             any.cereal ==0.5.8.1,
             cereal -bytestring-builder,
             any.colour ==2.3.5,
             any.comonad ==5.0.6,
             comonad +containers +distributive +test-doctests,
             any.config-ini ==0.2.4.0,
             config-ini -enable-doctests,
             any.containers ==0.6.0.1,
             any.contravariant ==1.5.2,
             contravariant +semigroups +statevar +tagged,
             any.data-clist ==0.1.2.3,
             any.deepseq ==1.4.4.0,
             any.directory ==1.3.3.0,
             any.distributive ==0.6.1,
             distributive +semigroups +tagged,
             any.dlist ==0.8.0.7,
             any.exceptions ==0.10.4,
             exceptions +transformers-0-4,
             any.filepath ==1.4.2.1,
             any.free ==5.1.3,
             any.ghc-boot-th ==8.6.5,
             any.ghc-prim ==0.5.3,
             any.hashable ==1.3.0.0,
             hashable -examples +integer-gmp +sse2 -sse41,
             any.integer-gmp ==1.0.2.0,
             any.integer-logarithms ==1.0.3,
             integer-logarithms -check-bounds +integer-gmp,
             any.invariant ==0.5.3,
             any.kan-extensions ==5.2,
             any.lens ==4.18.1,
             lens -benchmark-uniplate -dump-splices +inlining -j -old-inline-pragmas -safe +test-doctests +test-hunit +test-properties +test-templates +trustworthy,
             any.linear ==1.20.9,
             linear -herbie +template-haskell,
             any.megaparsec ==7.0.5,
             megaparsec -dev,
             any.microlens ==0.4.11.2,
             any.microlens-mtl ==0.2.0.1,
             any.microlens-th ==0.4.3.2,
             any.mtl ==2.2.2,
             any.optparse-applicative ==0.15.1.0,
             any.parallel ==3.2.2.0,
             any.parsec ==3.1.13.0,
             any.parser-combinators ==1.2.1,
             parser-combinators -dev,
             any.pretty ==1.1.3.6,
             any.primitive ==0.7.0.0,
             any.process ==1.6.5.0,
             any.profunctors ==5.5.1,
             any.random ==1.1,
             any.reflection ==2.1.5,
             reflection -slow +template-haskell,
             any.rts ==1.0,
             any.scientific ==0.3.6.2,
             scientific -bytestring-builder -integer-simple,
             any.semigroupoids ==5.3.4,
             semigroupoids +comonad +containers +contravariant +distributive +doctests +tagged +unordered-containers,
             any.semigroups ==0.19.1,
             semigroups +binary +bytestring -bytestring-builder +containers +deepseq +hashable +tagged +template-haskell +text +transformers +unordered-containers,
             any.splitmix ==0.0.3,
             splitmix -optimised-mixer +random,
             any.stm ==2.5.0.0,
             any.tagged ==0.8.6,
             tagged +deepseq +transformers,
             any.template-haskell ==2.14.0.0,
             any.terminfo ==0.4.1.2,
             any.text ==1.2.3.1,
             any.text-zipper ==0.10.1,
             any.th-abstraction ==0.3.1.0,
             any.time ==1.8.0.2,
             any.transformers ==0.5.6.2,
             any.transformers-base ==0.4.5.2,
             transformers-base +orphaninstances,
             any.transformers-compat ==0.6.5,
             transformers-compat -five +five-three -four +generic-deriving +mtl -three -two,
             any.type-equality ==1,
             any.unix ==2.7.2.2,
             any.unordered-containers ==0.2.10.0,
             unordered-containers -debug,
             any.utf8-string ==1.0.1.1,
             any.vector ==0.12.0.3,
             vector +boundschecks -internalchecks -unsafechecks -wall,
             any.void ==0.7.3,
             void -safe,
             any.vty ==5.26,
             any.word-wrap ==0.4.1</code></pre>
<p><code>cabal.project.freeze</code> ファイルと <code>&lt;project&gt;.cabal</code> ファイルでバージョンが異なる場合は <code>&lt;project&gt;.cabal</code> のバージョンが優先されるようです。</p>
<pre class="cabal"><code>library:
  build-depends:
      base &gt;= 4.7 &amp;&amp; &lt; 5
    , brick ^&gt;= 0.47      -- ビルドが失敗するバージョン制約を指定
    , containers
    , linear
    , microlens
    , microlens-th
    , random
    , vty
    , MonadRandom</code></pre>
<pre class="shell"><code>$ ls cabal.project.freeze 
cabal.project.freeze
$ cabal build
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&#39;ve had most trouble fulfilling: brick, dino

$ cabal freeze
...
[__1] fail (backjumping, conflict set: brick, dino)
After searching the rest of the dependency tree exhaustively, these were the
goals I&#39;ve had most trouble fulfilling: brick, dino</code></pre>
<p>そもそも制約を満たさない場合は <code>cabal freeze</code> が失敗するみたいです。</p>
<h2 id="スナップショットに対応した-freeze-ファイルを使おう">スナップショットに対応した freeze ファイルを使おう</h2>
<p>さて、それではリポジトリを <code>clone</code> した直後に戻しましょう。こんな状態です。</p>
<pre class="shell"><code>$ git clone https://github.com/arcticmatt/dino-brick.git
$ cd dino-brick
$ cabal update</code></pre>
<div class="sourceCode" id="cb13"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb13-1"><a href="#cb13-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="at">  </span><span class="fu">build-depends</span><span class="kw">:</span></span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="at">      base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="at">    , brick</span></span>
<span id="cb13-5"><a href="#cb13-5"></a><span class="at">    , containers</span></span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="at">    , linear</span></span>
<span id="cb13-7"><a href="#cb13-7"></a><span class="at">    , microlens</span></span>
<span id="cb13-8"><a href="#cb13-8"></a><span class="at">    , microlens-th</span></span>
<span id="cb13-9"><a href="#cb13-9"></a><span class="at">    , random</span></span>
<span id="cb13-10"><a href="#cb13-10"></a><span class="at">    , vty</span></span>
<span id="cb13-11"><a href="#cb13-11"></a><span class="at">    , MonadRandom</span></span></code></pre></div>
<p><code>Stackage</code> のスナップショットの <code>URL</code> の後ろに <code>cabal.config</code> を付けた <a href="https://www.stackage.org/lts-8.23/cabal.config">https://www.stackage.org/lts-8.23/cabal.config</a> にアクセスすると <code>cabal.project.freeze</code> ファイルとして利用可能なテキストファイルが表示されます。</p>
<p>これをそのまま保存してビルドするだけで全てが上手くいきます。</p>
<pre class="shell"><code>$ curl https://www.stackage.org/lts-8.23/cabal.config &gt; cabal.project.freeze
$ cabal build
[__2] fail (backjumping, conflict set: base, dino, optparse-applicative)
After searching the rest of the dependency tree exhaustively, these were the
goals I&#39;ve had most trouble fulfilling: optparse-applicative, base, dino</code></pre>
<p>おっと忘れていました。<code>LTS-8.23</code> は <code>GHC-8.0.2</code> でしたね。</p>
<p><code>-w</code> (<code>with-compiler</code> の頭文字) オプションで利用する <code>GHC</code> を切り替えてビルドしましょう！</p>
<pre class="shell"><code>$ cabal build -w ghc-8.0.2</code></pre>
<h2 id="まとめ">まとめ</h2>
<ul>
<li><code>stack</code> でビルドが通っていれば、<code>cabal</code> でも通る</li>
<li><code>cabal freeze</code> を使うとスナップショットのようにバージョンを記録できる</li>
<li><code>Stackage</code> のスナップショットの URL の最後に <code>cabal.config</code> を付けると <code>freeze</code> ファイルを取得できる</li>
</ul>
<h2 id="参考リソース">参考リソース</h2>
<ul>
<li><a href="https://www.haskell.org/cabal/users-guide/nix-local-build.html#cabal-v2-freeze">5.4.6. cabal v2-freeze</a></li>
<li><a href="https://medium.com/@fommil/why-not-both-8adadb71a5ed">Why Not Both?</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>cabal の build-tool-depends フィールド</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/01-18-cabal-build-tool-depends.html</id>
    <published>January 18, 2020</published>
    <updated>January 22, 2020</updated>
    <summary type="html"><![CDATA[<p>cabal の <a href="https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends">build-tool-depends</a> というフィールドが便利だったので紹介します。</p>
<p>テストを書くときに <a href="https://hackage.haskell.org/package/hspec-discover">hspec-discover</a> や <a href="https://hackage.haskell.org/package/tasty-discover">tasty-discover</a> などを使う場合、このフィールドを設定しておくことで依存している実行ファイルを自動的にダウンロードして使ってくれます。</p>
<pre class="shell"><code>$ cabal --version
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library </code></pre>
<!--more-->
<h2 id="サンプルプロジェクトの構成">サンプルプロジェクトの構成</h2>
<p>全体のディレクトリ構成は以下のようになっているとしましょう。</p>
<pre class="shell"><code>$ tree .
.
├── example.cabal
├── src
│   └── Lib.hs
├── stack.yaml
└── test
    ├── LibSpec.hs
    └── Spec.hs</code></pre>
<p>それぞれのファイルの内容は以下のようになっています。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="co">-- src/Lib.hs</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">module</span> <span class="dt">Lib</span> (someFunc) <span class="kw">where</span></span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-5"><a href="#cb3-5"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- test/LibSpec.hs</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">module</span> <span class="dt">LibSpec</span> (spec) <span class="kw">where</span></span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>spec <span class="ot">=</span> <span class="fu">undefined</span></span></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- test/Spec.hs</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="ot">{-# OPTIONS_GHC -F -pgmF hspec-discover #-}</span></span></code></pre></div>
<pre class="cabal"><code>-- example.cabal
cabal-version: 2.4
name:          example
version:       0.1.0.0

library
  exposed-modules:  Lib
  hs-source-dirs:   src
  build-depends:    base &gt;=4.7 &amp;&amp; &lt;5
  default-language: Haskell2010

test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &gt;=4.7 &amp;&amp; &lt;5
    , example

  default-language: Haskell2010</code></pre>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1"></a><span class="co"># stack.yaml</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-14.20</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">-</span><span class="at"> .</span></span></code></pre></div>
<p>このような状況で <code>cabal</code> や <code>stack</code> がどのように振舞うか見ていきましょう。</p>
<p>現時点では <code>hspec-discover</code> の実行ファイルは存在していません。</p>
<pre class="shell"><code>$ hspec-discover
bash: hspec-discover: コマンドが見つかりません</code></pre>
<h2 id="stack">stack</h2>
<p><code>hspec-discover</code> の実行ファイルが無い状態で <code>stack test</code> を実行すると以下のようにエラーになります。</p>
<pre class="shell"><code>$ stack test
...

ghc: could not execute: hspec-discover</code></pre>
<h3 id="hspec-discover-をインストールした場合">hspec-discover をインストールした場合</h3>
<pre class="shell"><code>$ stack install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]</code></pre>
<p>上記のようにインストールした場合は、問題無く動作します。</p>
<pre class="shell"><code>$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^</code></pre>
<p><code>hspec-discover</code> がファイルを自動的に見つけてくれたので、コンパイルエラーになりました。</p>
<p>次に進む前に実行ファイルを削除しておきます。</p>
<pre class="shell"><code>$ rm ~/.local/bin/hspec-discover</code></pre>
<h3 id="build-depends-に追加した場合">build-depends に追加した場合</h3>
<p><code>example.cabal</code> ファイルの <code>build-depends</code> に追加した場合はどうなるのでしょうか？</p>
<pre class="cabal"><code>test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &gt;=4.7 &amp;&amp; &lt;5
    , example
    , hspec-discover  -- 新しく追加した

  default-language: Haskell2010</code></pre>
<p>では <code>stack test</code> を実行してみます。</p>
<pre class="shell"><code>$ stack test
...

example/test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |         
3 | spec :: Spec
  |         ^^^^</code></pre>
<p>実行ファイルがローカル環境に存在しなくても自動的に <code>hspec-discover</code> が動作しています。</p>
<p>そのため、<code>stack</code> プロジェクトでは <code>hspec-discover</code> を依存関係 (<code>build-depends</code>) に追加するだけで良い感じにテストが進みます。</p>
<h2 id="cabal">cabal</h2>
<p>同様に <code>cabal</code> の場合も確かめてみましょう。(<code>example.cabal</code> ファイルから <code>hspec-discover</code> を削除しておきます)</p>
<pre class="shell"><code>$ cabal test
...

ghc: could not execute: hspec-discover</code></pre>
<p><code>stack</code> と同様のエラーになりました。</p>
<h3 id="hspec-discover-をインストールした場合-1">hspec-discover をインストールした場合</h3>
<pre class="shell"><code>$ cabal install hspec-discover

$ hspec-discover
Usage: hspec-discover SRC CUR DST [--module-name=NAME]</code></pre>
<p>同様に <code>cabal test</code> を実行してみます。</p>
<pre class="shell"><code>$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | </code></pre>
<p><code>stack</code> の場合と同じように、ちゃんと動いていますね。</p>
<h3 id="build-depends-に追加した場合-1">build-depends に追加した場合</h3>
<p>まずはバイナリファイルを削除しておきます。</p>
<pre class="shell"><code>$ rm ~/.cabal/bin/hspec-discover</code></pre>
<p><code>example.cabal</code> ファイルは先ほどと同じように <code>build-depends</code> に <code>hspec-discover</code> を追加した状態です。</p>
<p>テストを実行してみましょう。</p>
<pre class="shell"><code>$ cabal test
...

ghc: could not execute: hspec-discover</code></pre>
<p><code>stack</code> と異なる結果になりましたね・・・。僕は今までこの結果への対処法は <code>hspec-discover</code> をインストールしておくしかないと思っていました。</p>
<p>しかし、<code>build-tool-depends</code> をフィールドを利用することで <code>stack</code> と同じ挙動になるということがわかりました。</p>
<p>実際に試してみましょう。</p>
<h3 id="build-tool-depends-に追加した場合">build-tool-depends に追加した場合</h3>
<p><code>build-tool-depends</code> に追加するとこんな感じです。</p>
<pre class="cabal"><code>test-suite example-test
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   test
  other-modules:    LibSpec
  build-depends:
    , base     &gt;=4.7 &amp;&amp; &lt;5
    , example

  build-tool-depends:                 -- 新たに追加した行
    , hspec-discover:hspec-discover   -- 新たに追加した行

  default-language: Haskell2010</code></pre>
<p><code>build-depends</code> が <code>&lt;package_name&gt;</code> という指定方法でしたが、<code>build-tool-depends</code> では <code>&lt;package_name&gt;:&lt;exe_name&gt;</code> という指定方法になっている点に注意です。</p>
<p>バージョン制約が必要な場合は <code>build-depends</code> と同じように指定できます。</p>
<pre class="cabal"><code>hspec-discover:hspec-discover ^&gt;=2.7</code></pre>
<p>これでテストを実行してみましょう。</p>
<pre class="shell"><code>$ cabal test
...

test/LibSpec.hs:3:9: error:
    Not in scope: type constructor or class ‘Spec’
  |
3 | spec :: Spec
  | </code></pre>
<p>これで <code>stack</code> と同じような挙動になりました！happy!</p>
<h2 id="まとめ">まとめ</h2>
<p>こんな便利なフィールドがあるなんて全然知りませんでした・・・。</p>
<ul>
<li><code>build-tool-depends</code> を指定しておけば、実行ファイルが無くても大丈夫</li>
<li><code>stack</code> は初心者に優しい</li>
</ul>
<p><a href="https://www.haskell.org/ghc/blog/20200116-ghc-8.8.2-released.html">GHC-8.8.2 がリリース</a>されましたね。</p>
<h2 id="参考リソース">参考リソース</h2>
<ul>
<li><a href="https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends">cabal user guide</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Memo - unexpected At most 9 numbers are allowed per version number part</title>
    <link href="https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html" />
    <id>https://haskell.e-bigmoon.com/posts/2020/01-04-cabal-version-numbers-error.html</id>
    <published>January  4, 2020</published>
    <updated>January 22, 2020</updated>
    <summary type="html"><![CDATA[<p>GHC-8.8 への移行中に GitHub Actions で以下のようなエラーが発生しました。</p>
<pre class="shell"><code>proj/dist-newstyle/src/barbies-6f24224e2c384e2f/barbies.cabal:2:31: error:
unexpected At most 9 numbers are allowed per version number part

    1 | name:           barbies
    2 | version:        1.999999999999
      |                               ^

##[error]Process completed with exit code 1.</code></pre>
<p>初めて見るエラーだったのでメモとして残しておきます。</p>
<!--more-->
<h2 id="エラーが発生した理由">エラーが発生した理由</h2>
<p>エラー発生の原因はたぶんこれです。</p>
<ul>
<li><a href="https://github.com/haskell/cabal/pull/6386">Limit version number parts to be 9 digits #6386</a></li>
</ul>
<p>この変更は <code>cabal-3.0.1.0</code> に含まれるはずなので <code>cabal-3.0.0.0</code> では関係ないと思っていたのですが、<a href="https://github.com/e-bigmoon/haskell-blog/commit/73a7adcb8bf8204dd81de35d014c967b76040526/checks?check_suite_id=384131716">GitHub Actions のログ</a>を見るとわかるとおり、GitHub Actions では <code>cabal-3.0.1.0</code> がインストールされていました。(何故?<a href="https://github.com/haskell/cabal/issues/6328">cabal-install 3.0.1.0 release planning #6328</a> はまだ閉じられてない)</p>
<pre class="shell"><code>...
The Glorious Glasgow Haskell Compilation System, version 8.6.5
cabal-install version 3.0.1.0
compiled using version 3.0.1.0 of the Cabal library 
...</code></pre>
<p>また <a href="https://github.com/actions/setup-haskell">actions/setup-haskell</a> の README を見る限り <code>cabal</code> のバージョン指定方法は <code>2.0</code>, <code>2.2</code>, <code>2.4</code>, <code>3.0</code> しか無いので <code>3.0.0.0</code> を使う方法がありません・・・。</p>
<h2 id="とりあえずの解決策">とりあえずの解決策</h2>
<p><a href="https://github.com/jcpetruzza/barbies/blob/0b09a4235cd719aa3df9f9467f3e8fee81446bc8/barbies.cabal">barbies.cabal</a> のバージョン番号が長すぎるために起きているエラーなので、fork して一時的にバージョンを短くして対応しました。</p>
<pre><code>name:           barbies
version:        1.999999999999  -- 変更前
version:        1.999999999     -- 変更後</code></pre>
<h2 id="まとめ">まとめ</h2>
<p>もうすぐ GHC-8.10.1 がリリースされそうですね。</p>
<ul>
<li><a href="https://gitlab.haskell.org/ghc/ghc/wikis/status/ghc-8.10.1">GHC plans for 8.10.1</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Ap Monoid</title>
    <link href="https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html" />
    <id>https://haskell.e-bigmoon.com/posts/2019/12-24-ap-monoid.html</id>
    <published>December 24, 2019</published>
    <updated>March  3, 2020</updated>
    <summary type="html"><![CDATA[<p>まずは以下の関数 <code>f</code> を考えます。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="op">&gt;</span> f <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">concat</span> <span class="op">.</span> <span class="fu">sequence</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="op">&gt;</span> e1 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="op">&gt;</span> e2 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>], <span class="dt">Nothing</span>]</span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="op">&gt;</span> f e1</span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb1-7"><a href="#cb1-7"></a></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="op">&gt;</span> f e2</span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="dt">Nothing</span></span></code></pre></div>
<p>次に、この <code>f = fmap concat . sequence</code> をもっと短くカッコよく書けないかな？と考えます。</p>
<p>何となく <code>mconcat</code> で置き換えれそうな気がしたんですよ・・・。 だけど、動作が変わってしまうんです・・・。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="op">&gt;</span> <span class="fu">mconcat</span> e1</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="op">&gt;</span> <span class="fu">mconcat</span> e2</span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span></code></pre></div>
<p>ここで問題です。なぜ <code>mconcat</code> にすると結果が異なるのでしょうか？ また、<code>f = fmap concat . sequence</code> という定義を畳み込みを使って書き直すことはできるのでしょうか？</p>
<p>このことを考えていたら <code>Ap</code> モノイドにたどり着きました。</p>
<!--more-->
<h2 id="関数-f-は何を行っているのか">関数 f は何を行っているのか？</h2>
<p>まずは <code>f = fmap concat . sequence</code> がどのように動作するか確認してみましょう。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a>f e1</span>
<span id="cb3-2"><a href="#cb3-2"></a>  <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">concat</span> <span class="op">$</span> <span class="fu">sequence</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">concat</span> <span class="op">$</span> <span class="dt">Just</span> [[<span class="dv">1</span>,<span class="dv">2</span>], [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb3-4"><a href="#cb3-4"></a>  <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="fu">concat</span> [[<span class="dv">1</span>,<span class="dv">2</span>], [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb3-5"><a href="#cb3-5"></a>  <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a>f e2</span>
<span id="cb3-8"><a href="#cb3-8"></a>  <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">concat</span> <span class="op">$</span> <span class="fu">sequence</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>], <span class="dt">Nothing</span>]</span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">concat</span> <span class="dt">Nothing</span></span>
<span id="cb3-10"><a href="#cb3-10"></a>  <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>ここまでは簡単ですね。では <code>f = mconcat</code> の場合も確認します。(ここでの定義はデフォルト実装の <code>mconcat = foldr (&lt;&gt;) mempty</code> を使います)</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a>f e1</span>
<span id="cb4-2"><a href="#cb4-2"></a>  <span class="ot">=</span> <span class="fu">mconcat</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">&lt;&gt;</span>) <span class="fu">mempty</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb4-4"><a href="#cb4-4"></a>  <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>] <span class="op">&lt;&gt;</span> (<span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>] <span class="op">&lt;&gt;</span> <span class="fu">mempty</span>)</span>
<span id="cb4-5"><a href="#cb4-5"></a>  <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>] <span class="op">&lt;&gt;</span> (<span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>] <span class="op">&lt;&gt;</span> <span class="dt">Nothing</span>)</span>
<span id="cb4-6"><a href="#cb4-6"></a>    <span class="co">-- ココ!!!</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>  <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>] <span class="op">&lt;&gt;</span> <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb4-8"><a href="#cb4-8"></a>  <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span></code></pre></div>
<p>どうやら <code>mconcat</code> に変更すると <code>Just [3,4] &lt;&gt; Nothing</code> の計算で結果が変わってくるということがわかります。 つまり、求めている計算は <code>Monoid</code> の演算ではなく <code>Monad (Applicative)</code> の <code>Effect</code> なのです。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- 雰囲気でいえば、こんな感じになれば良いかも？</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>] <span class="op">&lt;&gt;</span> <span class="dt">Nothing</span> <span class="co">-- mconcat で行われる演算</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>] <span class="op">&gt;&gt;</span> <span class="dt">Nothing</span> <span class="co">-- 期待しているのは Maybe モナドの Effect</span></span></code></pre></div>
<h2 id="畳み込んでみる">畳み込んでみる</h2>
<p>何となく方向性は掴めました。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="co">-- 計算の途中で出てきたこの形を</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>] <span class="op">&lt;&gt;</span> (<span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>] <span class="op">&lt;&gt;</span> <span class="dt">Nothing</span>)</span>
<span id="cb6-3"><a href="#cb6-3"></a></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co">-- (とりあえず) こうしたい</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>] <span class="op">&gt;&gt;</span> (<span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>] <span class="op">&gt;&gt;</span> <span class="dt">Nothing</span>)</span></code></pre></div>
<p>形だけ見れば <code>foldr (&gt;&gt;) mempty</code> とすれば良さげです。試してみましょう。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="op">&gt;</span> f <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">&gt;&gt;</span>) <span class="fu">mempty</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="op">&gt;</span> e1 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="op">&gt;</span> e2 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>], <span class="dt">Nothing</span>]</span>
<span id="cb7-4"><a href="#cb7-4"></a></span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="op">&gt;</span> f e1</span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="dt">Nothing</span></span>
<span id="cb7-7"><a href="#cb7-7"></a></span>
<span id="cb7-8"><a href="#cb7-8"></a><span class="op">&gt;</span> f e2</span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="dt">Nothing</span></span></code></pre></div>
<p><code>f e2</code> は良い感じですが、今度は <code>f e1</code> の結果がおかしくなりました・・・。 それはそうですよね。<code>Maybe</code> モナドの <code>Effect</code> で畳み込んでいるため、どこかで <code>Nothing</code> が出てきたら計算全体は <code>Nothing</code> になりますよね。</p>
<p>これってつまり、<code>Maybe</code> モナドの <code>Effect</code> と <code>リスト</code> モノイドの演算の両方が必要ってことになりますね・・・。 オリジナルの <code>f = fmap concat . sequence</code> の定義も確かにそんな感じです。</p>
<h2 id="自分で定義しよう">自分で定義しよう！</h2>
<p>もう一度整理しましょう。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="co">-- 計算対象のリスト</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>[ m_a1, m_a2, m_a3, me ]</span>
<span id="cb8-3"><a href="#cb8-3"></a></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="co">-- まずは Effect を実行したい</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>m_a1 <span class="op">&gt;&gt;</span> m_a2 <span class="op">&gt;&gt;</span> m_a3 <span class="op">&gt;&gt;</span> me</span>
<span id="cb8-6"><a href="#cb8-6"></a></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="co">-- m_a1, m_a2, m_a3, me の結果をそれぞれ a1, a2, a3, e として</span></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="co">-- Monoid の演算を行いたい</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>a1 <span class="op">&lt;&gt;</span> a2 <span class="op">&lt;&gt;</span> a3 <span class="op">&lt;&gt;</span> e</span>
<span id="cb8-10"><a href="#cb8-10"></a></span>
<span id="cb8-11"><a href="#cb8-11"></a><span class="co">------------------------------------------------</span></span>
<span id="cb8-12"><a href="#cb8-12"></a></span>
<span id="cb8-13"><a href="#cb8-13"></a><span class="co">-- 具体的に、値が全部 Just でラップされていると考えた場合</span></span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="dt">Just</span> a1 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a2 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a3 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-15"><a href="#cb8-15"></a><span class="co">-- 期待する結果</span></span>
<span id="cb8-16"><a href="#cb8-16"></a>a1 <span class="op">&lt;&gt;</span> a2 <span class="op">&lt;&gt;</span> a3 <span class="op">&lt;&gt;</span> e</span>
<span id="cb8-17"><a href="#cb8-17"></a></span>
<span id="cb8-18"><a href="#cb8-18"></a><span class="co">-- どこか一箇所に Nothing がある (この場合 m_a2 が Nothing) と考えた場合</span></span>
<span id="cb8-19"><a href="#cb8-19"></a><span class="dt">Just</span> a1 <span class="op">&gt;&gt;</span> <span class="dt">Nothing</span> <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a3 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-20"><a href="#cb8-20"></a><span class="co">-- 期待する結果</span></span>
<span id="cb8-21"><a href="#cb8-21"></a><span class="dt">Nothing</span></span>
<span id="cb8-22"><a href="#cb8-22"></a><span class="co">-- 以下のようになってはダメ</span></span>
<span id="cb8-23"><a href="#cb8-23"></a>a1 <span class="op">&lt;&gt;</span> <span class="dt">Nothing</span> <span class="op">&lt;&gt;</span> a3 <span class="op">&lt;&gt;</span> e</span>
<span id="cb8-24"><a href="#cb8-24"></a></span>
<span id="cb8-25"><a href="#cb8-25"></a><span class="co">------------------------------------------------</span></span>
<span id="cb8-26"><a href="#cb8-26"></a><span class="co">-- こんな感じで計算が進むモノイドが欲しい</span></span>
<span id="cb8-27"><a href="#cb8-27"></a><span class="dt">Just</span> a1 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a2 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a3 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-28"><a href="#cb8-28"></a>  <span class="ot">=</span> <span class="dt">Just</span> (a1 <span class="op">&lt;&gt;</span> a2) <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a3 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-29"><a href="#cb8-29"></a>  <span class="ot">=</span> <span class="dt">Just</span> (a1 <span class="op">&lt;&gt;</span> a2 <span class="op">&lt;&gt;</span> a3) <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-30"><a href="#cb8-30"></a>  <span class="ot">=</span> <span class="dt">Just</span> (a1 <span class="op">&lt;&gt;</span> a2 <span class="op">&lt;&gt;</span> a3 <span class="op">&lt;&gt;</span> e)</span>
<span id="cb8-31"><a href="#cb8-31"></a></span>
<span id="cb8-32"><a href="#cb8-32"></a><span class="dt">Just</span> a1 <span class="op">&gt;&gt;</span> <span class="dt">Nothing</span> <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a3 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-33"><a href="#cb8-33"></a>  <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">&gt;&gt;</span> <span class="dt">Just</span> a3 <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-34"><a href="#cb8-34"></a>  <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">&gt;&gt;</span> <span class="dt">Just</span> e</span>
<span id="cb8-35"><a href="#cb8-35"></a>  <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>上記のような挙動を行う <code>Monoid</code> を新しく定義してみます！</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">newtype</span> <span class="dt">Sequence</span> m a <span class="ot">=</span> <span class="dt">Sequence</span> {<span class="ot"> getSequence ::</span> m a }</span>
<span id="cb9-2"><a href="#cb9-2"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb9-3"><a href="#cb9-3"></a></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="kw">instance</span> (<span class="dt">Monad</span> m, <span class="dt">Semigroup</span> a) <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Sequence</span> m a) <span class="kw">where</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>  ma <span class="op">&lt;&gt;</span> mb <span class="ot">=</span> <span class="dt">Sequence</span> <span class="op">$</span></span>
<span id="cb9-6"><a href="#cb9-6"></a>    <span class="kw">do</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>      a <span class="ot">&lt;-</span> getSequence ma</span>
<span id="cb9-8"><a href="#cb9-8"></a>      b <span class="ot">&lt;-</span> getSequence mb</span>
<span id="cb9-9"><a href="#cb9-9"></a>      <span class="fu">return</span> (a <span class="op">&lt;&gt;</span> b)</span>
<span id="cb9-10"><a href="#cb9-10"></a></span>
<span id="cb9-11"><a href="#cb9-11"></a><span class="kw">instance</span> (<span class="dt">Monad</span> m, <span class="dt">Monoid</span> a) <span class="ot">=&gt;</span> <span class="dt">Monoid</span> (<span class="dt">Sequence</span> m a) <span class="kw">where</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>  <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">Sequence</span> (<span class="fu">return</span> <span class="fu">mempty</span>)</span></code></pre></div>
<p>実際に確かめてみましょう。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="co">-- (&lt;&gt;) に変更した。</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="op">&gt;</span> f <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">&lt;&gt;</span>) <span class="fu">mempty</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="op">&gt;</span> e1 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="op">&gt;</span> e2 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>], <span class="dt">Nothing</span>]</span>
<span id="cb10-5"><a href="#cb10-5"></a></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="op">&gt;</span> f (<span class="fu">map</span> <span class="dt">Sequence</span> e1)</span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="dt">Sequence</span> {getSequence <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]}</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="op">&gt;</span> f (<span class="fu">map</span> <span class="dt">Sequence</span> e2)</span>
<span id="cb10-10"><a href="#cb10-10"></a><span class="dt">Sequence</span> {getSequence <span class="ot">=</span> <span class="dt">Nothing</span>}</span></code></pre></div>
<p>期待通りに動いていますね。<code>foldMap</code> を使うともう少し短くかけます。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="op">&gt;</span> <span class="fu">foldMap</span> <span class="dt">Sequence</span> e1</span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="dt">Sequence</span> {getSequence <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]}</span>
<span id="cb11-3"><a href="#cb11-3"></a></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="op">&gt;</span> <span class="fu">foldMap</span> <span class="dt">Sequence</span> e2</span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="dt">Sequence</span> {getSequence <span class="ot">=</span> <span class="dt">Nothing</span>}</span></code></pre></div>
<h2 id="ap-モノイド">Ap モノイド</h2>
<p>ここまでで定義した <code>Sequence</code> モノイドは <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html">Data.Monoid</a> に <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Ap">Ap</a> という名前で定義されています。</p>
<p>今回は <code>Monad</code> で話を進めましたが、実際は <code>Applicative</code> でも成り立ちます。 最初の例を <code>Ap</code> モノイドで置き換えれば以下のようになります。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Monoid</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="op">&gt;</span> e1 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>]]</span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="op">&gt;</span> e2 <span class="ot">=</span> [<span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>], <span class="dt">Just</span> [<span class="dv">3</span>,<span class="dv">4</span>], <span class="dt">Nothing</span>]</span>
<span id="cb12-4"><a href="#cb12-4"></a></span>
<span id="cb12-5"><a href="#cb12-5"></a><span class="op">&gt;</span> <span class="fu">foldMap</span> <span class="dt">Ap</span> e1</span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="dt">Ap</span> {getAp <span class="ot">=</span> <span class="dt">Just</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]}</span>
<span id="cb12-7"><a href="#cb12-7"></a></span>
<span id="cb12-8"><a href="#cb12-8"></a><span class="op">&gt;</span> <span class="fu">foldMap</span> <span class="dt">Ap</span> e2</span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="dt">Ap</span> {getAp <span class="ot">=</span> <span class="dt">Nothing</span>}</span></code></pre></div>
<h2 id="まとめ">まとめ</h2>
<ul>
<li><code>Ap</code> モノイドの使い道がわかった</li>
<li><a href="https://blog.miz-ar.info/2019/02/monoid-for-haskellers/">Haskellerのためのモノイド完全ガイド</a> でも解説されているので、気になった方はこちらもどうぞ</li>
<li><code>fmap fold . sequenceA</code> と <code>getAp . foldMap Ap</code> を比較すると型クラス制約が若干違う</li>
</ul>
<div class="sourceCode" id="cb13"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="op">&gt;</span> <span class="op">:</span>t <span class="fu">fmap</span> fold <span class="op">.</span> <span class="fu">sequenceA</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="fu">fmap</span> fold <span class="op">.</span><span class="ot"> sequenceA ::</span> (<span class="dt">Monoid</span> a, <span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f) <span class="ot">=&gt;</span> t (f a) <span class="ot">-&gt;</span> f a</span>
<span id="cb13-3"><a href="#cb13-3"></a></span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="op">&gt;</span> <span class="op">:</span>t getAp <span class="op">.</span> <span class="fu">foldMap</span> <span class="dt">Ap</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>getAp <span class="op">.</span> <span class="fu">foldMap</span> <span class="dt">Ap</span><span class="ot">    ::</span> (<span class="dt">Monoid</span> a, <span class="dt">Foldable</span> t, <span class="dt">Applicative</span> f) <span class="ot">=&gt;</span> t (f a) <span class="ot">-&gt;</span> f a</span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Megaparsec 8 (翻訳)</title>
    <link href="https://haskell.e-bigmoon.com/posts/2019/11-10-megaparsec8.html" />
    <id>https://haskell.e-bigmoon.com/posts/2019/11-10-megaparsec8.html</id>
    <published>November 10, 2019</published>
    <updated>December 24, 2019</updated>
    <summary type="html"><![CDATA[<p>Great original post: <a href="https://markkarpov.com/post/megaparsec-8.html">Megaparsec 8</a></p>
<p>一年が経ち、Megaparsecの新しいメジャーバージョンが再び登場する時がきました。 今回の変更は、これまでのメジャーリリースの中で最も破壊的ではない変更です。 実際、ほとんどのユーザはアップグレードのために何もする必要はないと思います。</p>
<!--more-->
<p>これには次の理由があります。</p>
<ul>
<li>それほど多くのissue が開かれておらず、バグも報告されていません。それはMegaparsecが最近、そしてほとんど満足のいく方法で「うまくいく」という事実と関係があると思います。</li>
<li>ライブラリは現在幅広く使用されています。この記事の執筆時点で、Megaparsecに直接依存する<a href="https://packdeps.haskellers.com/reverse/megaparsec">Hackageのパッケージは146個</a>あります。Megaparsecの上に構築することを選択した<a href="https://hackage.haskell.org/package/replace-megaparsec">新しい刺激的なライブラリ</a>も現れました。<a href="https://github.com/idris-lang/Idris-dev">Idris</a>や<a href="https://github.com/dhall-lang/dhall-haskell">Dhall</a>などのプロジェクトでは、Megaparsecを使用してパースの問題を解決しています。</li>
</ul>
<p>これらはライブラリが枯れ、成熟したことを示しているので、動作しているものを壊さないようにしましょう。 とはいえ、常に改善の余地があります。</p>
<h2 id="nixによる品質保証">Nixによる品質保証</h2>
<p>バージョン8の作業を開始する前に、Nixを使用して品質保証を強化することにしました。 現在のMegaparsecに依存するプロジェクトの数を把握し、Nixを使用して<a href="https://github.com/tweag/ormolu">Ormolu</a>のバグを発見したという成功体験から、依存パッケージによって引き起こされる破壊的変更、パフォーマンスの変更、およびバグのチェックにNixを用いることにしました。</p>
<p>結果をMegaparsecのリポジトリにある<a href="https://github.com/mrkkrp/megaparsec/blob/master/HACKING.md">HACKING.md</a>に文書化しました。 開発時のshellとは別に、Nix expressionは以下のターゲットグループを提供します。</p>
<ul>
<li><code>base</code> は <code>parser-combinators</code> や <code>hspec-megaparsec</code> などの密接に関連したパッケージとそのテストです。<code>nix-build -A base --no-out-link</code> を実行することにより、開発者はこれらすべてをビルドし、テストすることができます。</li>
<li><code>deps</code> は選択された依存関係のもとでビルドの破壊とテストスイートの失敗が起きないことを確認します。</li>
<li><code>benches</code> はベンチマークのコレクションです。これには、Megaparsecのマイクロベンチマークと、ライブラリが実際のタスクでどのように実行されるかを示すいくつかのパッケージが含まれます。</li>
</ul>
<p>これらコマンドのそれぞれで、特定のパッケージまたはベンチマークに「ズームイン」できます。 たとえば、<code>nix-build -A benches.parsers-bench</code> を実行して、<code>parsers-bench</code> のベンチマークを確認できます。 要するに、ほとんどのパッケージは新しい変更でも引き続き動作し、修正が容易ではないものでも動作します。 実際、システムを使い続けるためには不備のあるパッケージにパッチを適用する必要があり、そのための<a href="https://github.com/mrkkrp/megaparsec/tree/31b917b1297950c22925f9ee7f7a588834293103/nix/patches">アップグレード用のパッチ</a>も利用可能です。</p>
<p>ロジックやパフォーマンスの低下は見つかりませんでした。</p>
<h2 id="パースエラー位置の制御">パースエラー位置の制御</h2>
<p>新機能について話しましょう。 プリミティブ <code>failure</code> と <code>fancyFailure</code> は <code>parseError</code> に置き換わりました。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="ot">parseError ::</span> <span class="dt">MonadParsec</span> e s m <span class="ot">=&gt;</span> <span class="dt">ParseError</span> s e <span class="ot">-&gt;</span> m a</span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="co">-- 現在の &#39;failure&#39; と &#39;fancyFailure&#39; は普通の関数:</span></span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a>failure</span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="ot">  ::</span> <span class="dt">MonadParsec</span> e s m</span>
<span id="cb1-7"><a href="#cb1-7"></a>  <span class="ot">=&gt;</span> <span class="dt">Maybe</span> (<span class="dt">ErrorItem</span> (<span class="dt">Token</span> s)) <span class="co">-- ^ 期待しないアイテム (あれば)</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>  <span class="ot">-&gt;</span> <span class="dt">Set</span> (<span class="dt">ErrorItem</span> (<span class="dt">Token</span> s)) <span class="co">-- ^ 期待するアイテム</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="ot">-&gt;</span> m a</span>
<span id="cb1-10"><a href="#cb1-10"></a>failure us ps <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>  o <span class="ot">&lt;-</span> getOffset</span>
<span id="cb1-12"><a href="#cb1-12"></a>  parseError (<span class="dt">TrivialError</span> o us ps)</span>
<span id="cb1-13"><a href="#cb1-13"></a></span>
<span id="cb1-14"><a href="#cb1-14"></a>fancyFailure</span>
<span id="cb1-15"><a href="#cb1-15"></a><span class="ot">  ::</span> <span class="dt">MonadParsec</span> e s m</span>
<span id="cb1-16"><a href="#cb1-16"></a>  <span class="ot">=&gt;</span> <span class="dt">Set</span> (<span class="dt">ErrorFancy</span> e) <span class="co">-- ^ Fancy error components</span></span>
<span id="cb1-17"><a href="#cb1-17"></a>  <span class="ot">-&gt;</span> m a</span>
<span id="cb1-18"><a href="#cb1-18"></a>fancyFailure xs <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-19"><a href="#cb1-19"></a>  o <span class="ot">&lt;-</span> getOffset</span>
<span id="cb1-20"><a href="#cb1-20"></a>  parseError (<span class="dt">FancyError</span> o xs)</span></code></pre></div>
<p>これはプリミティブの数を減らすという話ではありません (減らすことも良いことですが)。 <code>parseError</code> の主な特徴は、パーサの状態から現在のオフセットを必要とすることなく、任意のオフセットでパースエラーを報告できることです。 これは、パースエラーにしたい位置を既に超えてしまっている場合でも、入力のその位置でパースエラーを作成したい場合に重要です。 これまでは、まず <code>getOffset</code> を介して正しいオフセットを取得し、次にパースエラーを報告する直前に <code>setOffset</code> でオフセットを設定することでしか達成できませんでした。 これは見苦しいだけでなく、エラーが発生しやすくなり、正しいオフセットの復元を忘れることがあります。 <code>mmark</code>の<a href="https://github.com/mmark-md/mmark/blob/8f5534d8068c2b7a139b893639ee5920bcaedd84/Text/MMark/Parser.hs#L787-L790">実例</a>を次に示します。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a>  o&#39; <span class="ot">&lt;-</span> getOffset</span>
<span id="cb2-2"><a href="#cb2-2"></a>  setOffset o</span>
<span id="cb2-3"><a href="#cb2-3"></a>  (void <span class="op">.</span> hidden <span class="op">.</span> string) <span class="st">&quot;[]&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>  <span class="co">-- ↑ これが失敗した場合、これをオフセット「o」で報告する必要があります</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>  setOffset (o&#39; <span class="op">+</span> <span class="dv">2</span>)</span></code></pre></div>
<p>ここでは完全な状況を説明しませんが、<code>"[]"</code>(<code>+ 2</code>の部分)のパース後にオフセットの増分を考慮するのを忘れたため、このコードにはしばらくバグがあったと言えば十分でしょう。 次のように書けば、同じことをよりうまく表現できます。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a>  region (setErrorOffset o) <span class="op">$</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>    (void <span class="op">.</span> hidden <span class="op">.</span> string) <span class="st">&quot;[]&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="co">-- 備考</span></span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="ot">region ::</span> <span class="dt">MonadParsec</span> e s m</span>
<span id="cb3-7"><a href="#cb3-7"></a>  <span class="ot">=&gt;</span> (<span class="dt">ParseError</span> s e <span class="ot">-&gt;</span> <span class="dt">ParseError</span> s e)</span>
<span id="cb3-8"><a href="#cb3-8"></a>     <span class="co">-- ^ &#39;ParseError&#39; の処理方法</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="ot">-&gt;</span> m a</span>
<span id="cb3-10"><a href="#cb3-10"></a>     <span class="co">-- ^ 処理を適用する「region」</span></span>
<span id="cb3-11"><a href="#cb3-11"></a>  <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p><code>region</code>は<code>getOffset</code> / <code>setOffset</code> ハックと同じ目的で使用されます。 副作用として、エラーが起きた場合にはパースエラーを更新する関数によって現在のオフセットが変更されます。 <code>region</code> は <code>parseError</code> を使用して、古いハックを廃止できます。</p>
<pre class="haskel"><code>region f m = do
  r &lt;- observing m
  case r of
    Left err -&gt; parseError (f err)
    Right x -&gt; return x</code></pre>
<p>いいね.</p>
<h2 id="マルチエラーパーサのより良いストーリー">マルチエラーパーサのより良いストーリー</h2>
<p>プロジェクトの最初期から、マルチエラーパーサをサポートする方向にゆっくりと動いていました。 バージョン7では、<code>ParseError</code>の代わりに<code>ParseErrorBundle</code>を返すようになりました。 マルチエラーをサポートするための準備はすべてが整っていましたが、複数のパースエラーを報告するための方法がまだ提供されていませんでした。</p>
<p>マルチエラーパーサに求められる事前条件は、入力に問題のある部分をスキップして、正常であることがわかっている位置からパースを再開できることです。 この部分は、<code>withRecovery</code>プリミティブ（Megaparsec 4.4.0以降で使用可能）を使用して実現されます。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- | @&#39;withRecovery&#39; r p@ は、パーサー @p@ が失敗した場合でも解析を続行できます。</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="co">-- この場合、実際の &#39;ParseError&#39; を引数とする @r@ が呼び出されます。</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="co">-- よくある使い方として、特定のオブジェクトのパースの失敗を意味する値を返すことで、</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="co">-- その入力の一部を消費し次のオブジェクトの開始位置に移動します。</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="co">--</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="co">-- @r@ が失敗すると、元のエラーメッセージが &#39;withRecovery&#39; なしで報告されることに注意してください。</span></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="co">-- パーサ @r@ を回復してもエラーメッセージに影響することはありません。</span></span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a></span>
<span id="cb5-10"><a href="#cb5-10"></a>withRecovery</span>
<span id="cb5-11"><a href="#cb5-11"></a><span class="ot">  ::</span> (<span class="dt">ParseError</span> s e <span class="ot">-&gt;</span> m a) <span class="co">-- ^ 失敗の回復方法</span></span>
<span id="cb5-12"><a href="#cb5-12"></a>  <span class="ot">-&gt;</span> m a             <span class="co">-- ^ オリジナルのパーサ</span></span>
<span id="cb5-13"><a href="#cb5-13"></a>  <span class="ot">-&gt;</span> m a             <span class="co">-- ^ 失敗から回復できるパーサ</span></span></code></pre></div>
<p>Megaparsec 8 までのユーザーは、成功と失敗の可能性を含む直和型になるように型<code>a</code>を選択する必要がありました。 たとえば、<code>Either (ParseError s e) Result</code> です。 パースエラーを収集し、後で表示する前に手動で<code>ParseErrorBundle</code>に追加する必要がありました。 言うまでもなく、これらはすべて、ユーザーフレンドリーではない高度な使用例です。</p>
<p>Megaparsec 8 は、遅延パースエラーのサポートを追加します。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="co">-- | 後で報告するために &#39;ParseError&#39;を登録します。</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co">-- このアクションはパースを終了せず、パースの最後に考慮される</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="co">-- 「遅延」&#39;ParseError&#39;のコレクションに特定の「ParseError」を</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co">-- 追加する以外は効果がありません。 このコレクションが空の場合のみ、</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="co">-- パーサは成功します。 これは、複数のパースエラーを一度に報告する</span></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="co">-- 主な方法です。</span></span>
<span id="cb6-7"><a href="#cb6-7"></a></span>
<span id="cb6-8"><a href="#cb6-8"></a><span class="ot">registerParseError ::</span> <span class="dt">MonadParsec</span> e s m <span class="ot">=&gt;</span> <span class="dt">ParseError</span> s e <span class="ot">-&gt;</span> m ()</span>
<span id="cb6-9"><a href="#cb6-9"></a></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="co">-- | &#39;failure&#39;に似ていますが、 遅延&#39;ParseError&#39;のためのものです。</span></span>
<span id="cb6-11"><a href="#cb6-11"></a></span>
<span id="cb6-12"><a href="#cb6-12"></a>registerFailure</span>
<span id="cb6-13"><a href="#cb6-13"></a><span class="ot">  ::</span> <span class="dt">MonadParsec</span> e s m</span>
<span id="cb6-14"><a href="#cb6-14"></a>  <span class="ot">=&gt;</span> <span class="dt">Maybe</span> (<span class="dt">ErrorItem</span> (<span class="dt">Token</span> s)) <span class="co">-- ^ 期待しないアイテム (あれば)</span></span>
<span id="cb6-15"><a href="#cb6-15"></a>  <span class="ot">-&gt;</span> <span class="dt">Set</span> (<span class="dt">ErrorItem</span> (<span class="dt">Token</span> s)) <span class="co">-- ^ 期待するアイテム</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>  <span class="ot">-&gt;</span> m ()</span>
<span id="cb6-17"><a href="#cb6-17"></a></span>
<span id="cb6-18"><a href="#cb6-18"></a><span class="co">-- | &#39;fancyFailure&#39;に似ていますが、 遅延&#39;ParseError&#39;のためのものです。</span></span>
<span id="cb6-19"><a href="#cb6-19"></a></span>
<span id="cb6-20"><a href="#cb6-20"></a>registerFancyFailure</span>
<span id="cb6-21"><a href="#cb6-21"></a><span class="ot">  ::</span> <span class="dt">MonadParsec</span> e s m</span>
<span id="cb6-22"><a href="#cb6-22"></a>  <span class="ot">=&gt;</span> <span class="dt">Set</span> (<span class="dt">ErrorFancy</span> e) <span class="co">-- ^ Fancy error components</span></span>
<span id="cb6-23"><a href="#cb6-23"></a>  <span class="ot">-&gt;</span> m ()</span></code></pre></div>
<p>これらのエラーは <code>withRecovery</code> のエラー処理コールバックに登録でき、結果の型は <code>Maybe Result</code> になります。 これにより、遅延エラーが最終的な <code>ParseErrorBundle</code> に含まれるようになり、遅延エラーのコレクションが空でない場合に パーサが最終的に失敗するようになります。</p>
<p>以上のことから、マルチエラーパーサを書く習慣がユーザ間でより一般的になることを願っています。</p>
<h2 id="その他">その他</h2>
<ul>
<li>いつものように、変更の完全なリストについては、<a href="https://github.com/mrkkrp/megaparsec/blob/master/CHANGELOG.md">chagelog</a> を参照してください。</li>
<li><a href="https://markkarpov.com/megaparsec/megaparsec.html">公式チュートリアル</a>を含むすべてのテキストをバージョン8と互換性があるように更新しました。新しい機能の使用方法を説明するセクションを含めるように拡張しました。</li>
<li><code>hspec-megaparsec</code> などのサテライトパッケージが更新され、バージョン8で動作するようになりました。</li>
</ul>]]></summary>
</entry>

</feed>

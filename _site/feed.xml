<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>BIG MOON</title>
    <link href="https://haskell.e-bigmoon.com/feed.xml" rel="self" />
    <link href="https://haskell.e-bigmoon.com" />
    <id>https://haskell.e-bigmoon.com/feed.xml</id>
    <author>
        <name>BIG MOON</name>
        <email>it@e-bigmoon.com</email>
    </author>
    <updated>2019-02-04T00:00:00Z</updated>
    <entry>
    <title>Endo Monoid</title>
    <link href="https://haskell.e-bigmoon.com/posts/2019/02-04-endo-monoid.html" />
    <id>https://haskell.e-bigmoon.com/posts/2019/02-04-endo-monoid.html</id>
    <published>2019-02-04T00:00:00Z</published>
    <updated>2019-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p><a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html">Data.Monoid</a> に <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Endo">Endo</a> 型が定義されています。</p>
<p><code>Endo</code> という名前は <code>自己準同型 (Endomorphism)</code> に由来します。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">newtype</span> <span class="dt">Endo</span> a <span class="fu">=</span> <span class="dt">Endo</span> {<span class="ot"> appEndo ::</span> a <span class="ot">-&gt;</span> a }</a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">instance</span> <span class="dt">Semigroup</span> a <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Endo</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-4" title="4">  <span class="dt">Endo</span> f <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> g <span class="fu">=</span> <span class="dt">Endo</span> (f <span class="fu">.</span> g)</a>
<a class="sourceLine" id="cb1-5" title="5"></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">instance</span> <span class="dt">Monoid</span> (<span class="dt">Endo</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="fu">mempty</span> <span class="fu">=</span> <span class="dt">Endo</span> <span class="fu">id</span></a></code></pre></div>
<p>使い方は簡単。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1">ghci<span class="fu">&gt;</span> f <span class="fu">=</span> <span class="fu">foldMap</span> <span class="dt">Endo</span> [(<span class="fu">+</span><span class="dv">1</span>), (<span class="fu">*</span><span class="dv">2</span>), <span class="fu">negate</span>]</a>
<a class="sourceLine" id="cb2-2" title="2">ghci<span class="fu">&gt;</span> <span class="fu">print</span> <span class="fu">$</span> appEndo f <span class="dv">5</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="fu">-</span><span class="dv">9</span></a>
<a class="sourceLine" id="cb2-4" title="4"></a>
<a class="sourceLine" id="cb2-5" title="5">ghci<span class="fu">&gt;</span> appEndo (<span class="dt">Endo</span> (<span class="st">&quot;Hello, &quot;</span> <span class="fu">++</span>) <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> (<span class="fu">++</span> <span class="st">&quot;!&quot;</span>)) <span class="st">&quot;Haskell&quot;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="st">&quot;Hello, Haskell!&quot;</span></a></code></pre></div>
<p><code>appEndo</code> すると関数が出てくるところがポイントですね。2つ目の評価の流れをざっくり追うとこんな感じです。</p>
<pre class="haskll"><code>  appEndo (Endo (&quot;Hello, &quot; ++) &lt;&gt; Endo (++ &quot;!&quot;)) &quot;Haskell&quot;
= appEndo (Endo ((&quot;Hello, &quot; ++ ) . (++ &quot;!&quot;))) &quot;Haskell&quot;
= (&quot;Hello, &quot; ++ ) . (++ &quot;!&quot;) $ &quot;Haskell&quot;
= &quot;Hello, &quot; ++ (&quot;Haskell&quot; ++ &quot;!&quot;)
= &quot;Hello, &quot; ++ &quot;Haskell!&quot;
= &quot;Hello, Haskell!&quot;</code></pre>
<p><code>appEndo</code> は意外と色んなところで使える便利なモノイドです。</p>
<!--more-->
<h2 id="semigroup-monoid-law-の確認">Semigroup, Monoid law の確認</h2>
<p>Semigroup Law</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1">  <span class="dt">Endo</span> f <span class="fu">&lt;&gt;</span> (<span class="dt">Endo</span> g <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> h)</a>
<a class="sourceLine" id="cb4-2" title="2"><span class="fu">=</span> <span class="dt">Endo</span> f <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> (g <span class="fu">.</span> h)</a>
<a class="sourceLine" id="cb4-3" title="3"><span class="fu">=</span> <span class="dt">Endo</span> (f <span class="fu">.</span> (g <span class="fu">.</span> h))</a>
<a class="sourceLine" id="cb4-4" title="4"><span class="co">-- Category の定義より f . (g . h) == (f . g) . h</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="fu">=</span> <span class="dt">Endo</span> ((f <span class="fu">.</span> g) <span class="fu">.</span> h)</a>
<a class="sourceLine" id="cb4-6" title="6"><span class="fu">=</span> <span class="dt">Endo</span> (f <span class="fu">.</span> g) <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> h</a>
<a class="sourceLine" id="cb4-7" title="7"><span class="fu">=</span> (<span class="dt">Endo</span> f <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> g) <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> h</a></code></pre></div>
<p>Monoid Law</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1">  <span class="dt">Endo</span> f <span class="fu">&lt;&gt;</span> (<span class="fu">mempty</span><span class="ot"> ::</span> <span class="dt">Endo</span> a)</a>
<a class="sourceLine" id="cb5-2" title="2"><span class="fu">=</span> <span class="dt">Endo</span> f <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> <span class="fu">id</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="fu">=</span> <span class="dt">Endo</span> (f <span class="fu">.</span> <span class="fu">id</span>)</a>
<a class="sourceLine" id="cb5-4" title="4"><span class="co">-- Category の定義より f . id == f</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="fu">=</span> <span class="dt">Endo</span> f</a>
<a class="sourceLine" id="cb5-6" title="6"></a>
<a class="sourceLine" id="cb5-7" title="7">  (<span class="fu">mempty</span><span class="ot"> ::</span> <span class="dt">Endo</span> a) <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> f</a>
<a class="sourceLine" id="cb5-8" title="8"><span class="fu">=</span> <span class="dt">Endo</span> <span class="fu">id</span> <span class="fu">&lt;&gt;</span> <span class="dt">Endo</span> <span class="fu">id</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="fu">=</span> <span class="dt">Endo</span> (<span class="fu">id</span> <span class="fu">.</span> f)</a>
<a class="sourceLine" id="cb5-10" title="10"><span class="co">-- Category の定義より id . f == f</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="fu">=</span> <span class="dt">Endo</span> f</a></code></pre></div>
<h3 id="f-.-g-.-h-f-.-g-.-h"><code>f . (g . h) == (f . g) . h</code></h3>
<p><code>(.)</code> の定義</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> c)</a>
<a class="sourceLine" id="cb6-2" title="2">f <span class="fu">.</span> g <span class="fu">=</span> \x <span class="ot">-&gt;</span> f (g x)</a></code></pre></div>
<p>証明</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1">(<span class="dt">LHS</span>)</a>
<a class="sourceLine" id="cb7-2" title="2">  f <span class="fu">.</span> (g <span class="fu">.</span> h)</a>
<a class="sourceLine" id="cb7-3" title="3"><span class="fu">=</span> \x <span class="ot">-&gt;</span> f ((g <span class="fu">.</span> h) x)</a>
<a class="sourceLine" id="cb7-4" title="4"><span class="fu">=</span> \x <span class="ot">-&gt;</span> f ((\y <span class="ot">-&gt;</span> g (h y)) x)</a>
<a class="sourceLine" id="cb7-5" title="5"><span class="fu">=</span> \x <span class="ot">-&gt;</span> f (g (h x))</a>
<a class="sourceLine" id="cb7-6" title="6"></a>
<a class="sourceLine" id="cb7-7" title="7">(<span class="dt">RHS</span>)</a>
<a class="sourceLine" id="cb7-8" title="8">  (f <span class="fu">.</span> g) <span class="fu">.</span> h</a>
<a class="sourceLine" id="cb7-9" title="9"><span class="fu">=</span> \x <span class="ot">-&gt;</span> (f <span class="fu">.</span> g) (h x)</a>
<a class="sourceLine" id="cb7-10" title="10"><span class="fu">=</span> \x <span class="ot">-&gt;</span> (\y <span class="ot">-&gt;</span> f (g y)) (h x)</a>
<a class="sourceLine" id="cb7-11" title="11"><span class="fu">=</span> \x <span class="ot">-&gt;</span> f (g (h x))</a></code></pre></div>
<h3 id="id-.-f-f"><code>id . f == f</code></h3>
<p><code>id</code> の定義</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="fu">id</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb8-2" title="2"><span class="fu">id</span> x <span class="fu">=</span> x</a></code></pre></div>
<p>証明</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1">  <span class="fu">id</span> <span class="fu">.</span> f</a>
<a class="sourceLine" id="cb9-2" title="2"><span class="fu">=</span> \x <span class="ot">-&gt;</span> <span class="fu">id</span> (f x)</a>
<a class="sourceLine" id="cb9-3" title="3"><span class="fu">=</span> \x <span class="ot">-&gt;</span> f x</a>
<a class="sourceLine" id="cb9-4" title="4"><span class="fu">=</span> f</a></code></pre></div>
<h2 id="例1-write-endo-パターン">例1) Write Endo パターン</h2>
<p><a href="https://hackage.haskell.org/package/yesod-core">yesod-core</a> パッケージの <a href="https://hackage.haskell.org/package/yesod-core-1.6.11/docs/Yesod-Core-Handler.html#t:ProvidedRep">ProvideRep</a> を扱う関数は <code>Endo</code> を利用しています。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="ot">selectRep ::</span> <span class="dt">MonadHandler</span> m <span class="ot">=&gt;</span> <span class="dt">Writer</span> (<span class="dt">Endo</span> [<span class="dt">ProvidedRep</span> m]) () <span class="ot">-&gt;</span> m <span class="dt">TypedContent</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="ot">provideRep ::</span> (<span class="dt">Monad</span> m, <span class="dt">HasContentType</span> a) <span class="ot">=&gt;</span> m a <span class="ot">-&gt;</span> <span class="dt">Writer</span> (<span class="dt">Endo</span> [<span class="dt">ProvidedRep</span> m]) ()</a>
<a class="sourceLine" id="cb10-3" title="3"><span class="ot">provideRepType ::</span> (<span class="dt">Monad</span> m, <span class="dt">ToContent</span> a) <span class="ot">=&gt;</span> <span class="dt">ContentType</span> <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> <span class="dt">Writer</span> (<span class="dt">Endo</span> [<span class="dt">ProvidedRep</span> m]) ()</a></code></pre></div>
<p>また <code>Yesod</code> には <a href="https://hackage.haskell.org/package/yesod-core-1.6.11/docs/Yesod-Core-Types.html#t:GHState">GHState</a> 型がありますが、そこでも <code>Endo</code> を使っています。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">data</span> <span class="dt">GHState</span> <span class="fu">=</span> <span class="dt">GHState</span></a>
<a class="sourceLine" id="cb11-2" title="2">    {<span class="ot"> ghsSession ::</span> <span class="fu">!</span><span class="dt">SessionMap</span></a>
<a class="sourceLine" id="cb11-3" title="3">    ,<span class="ot"> ghsRBC     ::</span> <span class="fu">!</span>(<span class="dt">Maybe</span> <span class="dt">RequestBodyContents</span>)</a>
<a class="sourceLine" id="cb11-4" title="4">    ,<span class="ot"> ghsIdent   ::</span> <span class="fu">!</span><span class="dt">Int</span></a>
<a class="sourceLine" id="cb11-5" title="5">    ,<span class="ot"> ghsCache   ::</span> <span class="fu">!</span><span class="dt">TypeMap</span></a>
<a class="sourceLine" id="cb11-6" title="6">    ,<span class="ot"> ghsCacheBy ::</span> <span class="fu">!</span><span class="dt">KeyedTypeMap</span></a>
<a class="sourceLine" id="cb11-7" title="7">    ,<span class="ot"> ghsHeaders ::</span> <span class="fu">!</span>(<span class="dt">Endo</span> [<span class="dt">Header</span>])</a>
<a class="sourceLine" id="cb11-8" title="8">    }</a></code></pre></div>
<p>このような <code>Writer</code> と <code>Endo</code> を使った実装パターンは <a href="https://ocharles.org.uk/blog/posts/2013-02-12-quick-dsls-with-endo-writers.html">Quick and Easy DSLs with Writer Endo</a> で紹介されている <code>Writer Endo</code> パターンとして知られているようです。</p>
<h2 id="例2-データの更新">例2) データの更新</h2>
<p>こんな感じで設定等を更新する際にも使えるかもしれません。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="ot">{-# LANGUAGE DataKinds        #-}</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="ot">{-# LANGUAGE OverloadedLabels #-}</span></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="ot">{-# LANGUAGE TypeOperators    #-}</span></a>
<a class="sourceLine" id="cb12-4" title="4"></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="kw">import</span> <span class="dt">Control.Lens</span></a>
<a class="sourceLine" id="cb12-6" title="6"><span class="kw">import</span> <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb12-7" title="7"><span class="kw">import</span> <span class="dt">Data.Monoid</span></a>
<a class="sourceLine" id="cb12-8" title="8"></a>
<a class="sourceLine" id="cb12-9" title="9"><span class="kw">type</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb12-10" title="10">  &#39;[ <span class="st">&quot;name&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb12-11" title="11">   , <span class="st">&quot;age&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb12-12" title="12">   ]</a>
<a class="sourceLine" id="cb12-13" title="13"></a>
<a class="sourceLine" id="cb12-14" title="14"><span class="ot">update ::</span> [<span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">Person</span>] <span class="ot">-&gt;</span> <span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb12-15" title="15">update fs <span class="fu">=</span> appEndo (<span class="fu">foldMap</span> <span class="dt">Endo</span> fs)</a>
<a class="sourceLine" id="cb12-16" title="16"></a>
<a class="sourceLine" id="cb12-17" title="17"><span class="ot">me ::</span> [<span class="dt">Person</span> <span class="ot">-&gt;</span> <span class="dt">Person</span>]</a>
<a class="sourceLine" id="cb12-18" title="18">me <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-19" title="19">  [ (<span class="fu">&amp;</span> <span class="fu">#</span>name <span class="fu">.~</span> <span class="st">&quot;guchi&quot;</span>)</a>
<a class="sourceLine" id="cb12-20" title="20">  , (<span class="fu">&amp;</span> <span class="fu">#</span>age <span class="fu">.~</span> <span class="dv">20</span>)</a>
<a class="sourceLine" id="cb12-21" title="21">  ]</a>
<a class="sourceLine" id="cb12-22" title="22"></a>
<a class="sourceLine" id="cb12-23" title="23"><span class="ot">defaultPerson ::</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb12-24" title="24">defaultPerson <span class="fu">=</span> <span class="fu">#</span>name <span class="fu">@=</span> <span class="st">&quot;NONAME&quot;</span></a>
<a class="sourceLine" id="cb12-25" title="25">             <span class="fu">&lt;:</span> <span class="fu">#</span>age  <span class="fu">@=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb12-26" title="26">             <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1">λ<span class="fu">&gt;</span> stack repl <span class="co">--package extensible --package lens EndoExample.hs</span></a>
<a class="sourceLine" id="cb13-2" title="2"></a>
<a class="sourceLine" id="cb13-3" title="3">ghci<span class="fu">&gt;</span> defaultPerson</a>
<a class="sourceLine" id="cb13-4" title="4">name <span class="fu">@=</span> <span class="st">&quot;NONAME&quot;</span> <span class="fu">&lt;:</span> age <span class="fu">@=</span> <span class="dv">0</span> <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb13-5" title="5"></a>
<a class="sourceLine" id="cb13-6" title="6">ghci<span class="fu">&gt;</span> update me defaultPerson</a>
<a class="sourceLine" id="cb13-7" title="7">name <span class="fu">@=</span> <span class="st">&quot;guchi&quot;</span> <span class="fu">&lt;:</span> age <span class="fu">@=</span> <span class="dv">20</span> <span class="fu">&lt;:</span> nil</a></code></pre></div>
<h2 id="例3-パターンマッチの実装">例3) パターンマッチの実装</h2>
<p>僕はあまり <code>Endo</code> モノイドを使いこなせていませんが、良い感じに使えたと思える例としては TAPL 11章でレコードパターンを実装する際です。</p>
<p>レコードのパターンマッチは代入の合成で書くことができるので、<code>Endo</code> がちょうどぴったり適用できました。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="ot">match ::</span> <span class="dt">Pattern</span> <span class="ot">-&gt;</span> <span class="dt">Value</span> <span class="ot">-&gt;</span> (<span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Term</span>)</a>
<a class="sourceLine" id="cb14-2" title="2">match (<span class="dt">PtVar</span> _ n) v <span class="fu">=</span> subst n v</a>
<a class="sourceLine" id="cb14-3" title="3">match p<span class="fu">@</span>(<span class="dt">PtRecord</span> fs) v<span class="fu">@</span>(<span class="dt">TmRecord</span> fs&#39;)</a>
<a class="sourceLine" id="cb14-4" title="4">  <span class="fu">|</span> isRecordValue v <span class="fu">&amp;&amp;</span> sameFieldLength p v</a>
<a class="sourceLine" id="cb14-5" title="5">      <span class="fu">=</span> appEndo <span class="fu">$</span> <span class="fu">foldMap</span> (<span class="dt">Endo</span> <span class="fu">.</span> <span class="fu">uncurry</span> match) <span class="fu">$</span> <span class="fu">zip</span> (<span class="fu">map</span> <span class="fu">snd</span> fs) (<span class="fu">map</span> <span class="fu">snd</span> fs&#39;)</a>
<a class="sourceLine" id="cb14-6" title="6">  <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;match: pattern match failure&quot;</span></a>
<a class="sourceLine" id="cb14-7" title="7">match <span class="dt">PtRecord</span>{} _ <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;match: v is not Rrcord&quot;</span></a></code></pre></div>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.schoolofhaskell.com/user/mgsloan/monoids-tour">Monoids Tour</a></li>
<li><a href="https://ocharles.org.uk/blog/posts/2013-02-12-quick-dsls-with-endo-writers.html">Quick and Easy DSLs with Writer Endo</a></li>
<li><a href="http://blog.ploeh.dk/2018/04/16/endomorphic-composite-as-a-monoid/">Endomorphic Composite as a monoid</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Dual Monoid</title>
    <link href="https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html" />
    <id>https://haskell.e-bigmoon.com/posts/2019/02-02-dual-monoid.html</id>
    <published>2019-02-02T00:00:00Z</published>
    <updated>2019-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p><a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html">Data.Monoid</a> に <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Dual">Dual</a> 型が定義されています。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">newtype</span> <span class="dt">Dual</span> a <span class="fu">=</span> <span class="dt">Dual</span> {<span class="ot"> getDual ::</span> a }</a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">instance</span> <span class="dt">Semigroup</span> a <span class="ot">=&gt;</span> <span class="dt">Semigroup</span> (<span class="dt">Dual</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-4" title="4">  <span class="dt">Dual</span> a <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> b <span class="fu">=</span> <span class="dt">Dual</span> (b <span class="fu">&lt;&gt;</span> a)</a>
<a class="sourceLine" id="cb1-5" title="5"></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">instance</span> <span class="dt">Monoid</span> a <span class="ot">=&gt;</span> <span class="dt">Monoid</span> (<span class="dt">Dual</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="fu">mempty</span> <span class="fu">=</span> <span class="dt">Dual</span> <span class="fu">mempty</span></a></code></pre></div>
<p>使い方は簡単。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1">ghci<span class="fu">&gt;</span> getDual <span class="fu">$</span> <span class="dt">Dual</span> <span class="st">&quot;aaa&quot;</span> <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> <span class="st">&quot;bbb&quot;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="st">&quot;bbbaaa&quot;</span></a></code></pre></div>
<p>いつか使う時もあるかもしれないので、適当な例を作ってみます。</p>
<!--more-->
<h2 id="semigroup-monoid-law-の確認">Semigroup, Monoid law の確認</h2>
<p>Semigroup Law</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1">  <span class="dt">Dual</span> a <span class="fu">&lt;&gt;</span> (<span class="dt">Dual</span> b <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> c)</a>
<a class="sourceLine" id="cb3-2" title="2"><span class="fu">=</span> <span class="dt">Dual</span> a <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> (c <span class="fu">&lt;&gt;</span> b)</a>
<a class="sourceLine" id="cb3-3" title="3"><span class="fu">=</span> <span class="dt">Dual</span> ((c <span class="fu">&lt;&gt;</span> b) <span class="fu">&lt;&gt;</span> a)</a>
<a class="sourceLine" id="cb3-4" title="4"><span class="co">-- a, b, c は Semigroup なので</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="fu">=</span> <span class="dt">Dual</span> (c <span class="fu">&lt;&gt;</span> (b <span class="fu">&lt;&gt;</span> a))</a>
<a class="sourceLine" id="cb3-6" title="6"><span class="fu">=</span> <span class="dt">Dual</span> (b <span class="fu">&lt;&gt;</span> a) <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> c</a>
<a class="sourceLine" id="cb3-7" title="7"><span class="fu">=</span> (<span class="dt">Dual</span> a <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> b) <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> c</a></code></pre></div>
<p>Monoid Law</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1">  <span class="dt">Dual</span> a <span class="fu">&lt;&gt;</span> (<span class="fu">mempty</span><span class="ot"> ::</span> <span class="dt">Dual</span> a)</a>
<a class="sourceLine" id="cb4-2" title="2"><span class="fu">=</span> <span class="dt">Dual</span> a <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> (<span class="fu">mempty</span><span class="ot"> ::</span> a)</a>
<a class="sourceLine" id="cb4-3" title="3"><span class="fu">=</span> <span class="dt">Dual</span> ((<span class="fu">mempty</span><span class="ot"> ::</span> a) <span class="fu">&lt;&gt;</span> a)</a>
<a class="sourceLine" id="cb4-4" title="4"><span class="co">-- a は Monoid なので</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="fu">=</span> <span class="dt">Dual</span> a</a>
<a class="sourceLine" id="cb4-6" title="6"></a>
<a class="sourceLine" id="cb4-7" title="7">  (<span class="fu">mempty</span><span class="ot"> ::</span> <span class="dt">Dual</span> a) <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> a</a>
<a class="sourceLine" id="cb4-8" title="8"><span class="fu">=</span> <span class="dt">Dual</span> (<span class="fu">mempty</span><span class="ot"> ::</span> a) <span class="fu">&lt;&gt;</span> <span class="dt">Dual</span> a</a>
<a class="sourceLine" id="cb4-9" title="9"><span class="fu">=</span> <span class="dt">Dual</span> (a <span class="fu">&lt;&gt;</span> (<span class="fu">mempty</span><span class="ot"> ::</span> a))</a>
<a class="sourceLine" id="cb4-10" title="10"><span class="co">-- a は Monoid なので</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="fu">=</span> <span class="dt">Dual</span> a</a></code></pre></div>
<h2 id="headmaybe">headMaybe</h2>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="ot">headMaybe ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb5-2" title="2">headMaybe <span class="fu">=</span> getLast <span class="fu">.</span> getDual <span class="fu">.</span> <span class="fu">foldMap</span> (<span class="dt">Dual</span> <span class="fu">.</span> <span class="dt">Last</span> <span class="fu">.</span> <span class="fu">pure</span>)</a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="co">-- First を使った定義</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="ot">headMaybe ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb5-6" title="6">headMaybe <span class="fu">=</span> getFirst <span class="fu">.</span> <span class="fu">foldMap</span> (<span class="dt">First</span> <span class="fu">.</span> <span class="fu">pure</span>)</a></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1">ghci<span class="fu">&gt;</span> headMaybe []</a>
<a class="sourceLine" id="cb6-2" title="2"><span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb6-3" title="3"></a>
<a class="sourceLine" id="cb6-4" title="4">ghci<span class="fu">&gt;</span> headMaybe <span class="st">&quot;abcd&quot;</span></a>
<a class="sourceLine" id="cb6-5" title="5"><span class="dt">Just</span> <span class="ch">&#39;a&#39;</span></a></code></pre></div>
<h2 id="lastmaybe">lastMaybe</h2>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="ot">lastMaybe ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb7-2" title="2">lastMaybe <span class="fu">=</span> getFirst <span class="fu">.</span> getDual <span class="fu">.</span> <span class="fu">foldMap</span> (<span class="dt">Dual</span> <span class="fu">.</span> <span class="dt">First</span> <span class="fu">.</span> <span class="fu">pure</span>)</a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="co">-- Last を使った定義</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="ot">lastMaybe ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb7-6" title="6">lastMaybe <span class="fu">=</span> getLast <span class="fu">.</span> <span class="fu">foldMap</span> (<span class="dt">Last</span> <span class="fu">.</span> <span class="fu">pure</span>)</a></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1">ghci<span class="fu">&gt;</span> lastMaybe []</a>
<a class="sourceLine" id="cb8-2" title="2"><span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb8-3" title="3"></a>
<a class="sourceLine" id="cb8-4" title="4">ghci<span class="fu">&gt;</span> lastMaybe <span class="st">&quot;abcd&quot;</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="dt">Just</span> <span class="ch">&#39;d&#39;</span></a></code></pre></div>
<h2 id="last">last</h2>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="ot">last&#39; ::</span> [a] <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb9-2" title="2">last&#39; <span class="fu">=</span> getAlt <span class="fu">.</span> getDual <span class="fu">.</span> <span class="fu">foldMap</span> (<span class="dt">Dual</span> <span class="fu">.</span> <span class="dt">Alt</span> <span class="fu">.</span> <span class="fu">pure</span>)</a></code></pre></div>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1">ghci<span class="fu">&gt;</span> <span class="fu">last</span> []</a>
<a class="sourceLine" id="cb10-2" title="2"><span class="fu">***</span> <span class="dt">Exception</span><span class="fu">:</span> user <span class="fu">error</span> (mzero)</a>
<a class="sourceLine" id="cb10-3" title="3"></a>
<a class="sourceLine" id="cb10-4" title="4">ghci<span class="fu">&gt;</span> <span class="fu">last</span> <span class="st">&quot;abc&quot;</span></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="ch">&#39;c&#39;</span></a></code></pre></div>
<h2 id="reverse">reverse</h2>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="ot">rev ::</span> [a] <span class="ot">-&gt;</span> [a]</a>
<a class="sourceLine" id="cb11-2" title="2">rev <span class="fu">=</span> getDual <span class="fu">.</span> <span class="fu">foldMap</span> (<span class="dt">Dual</span> <span class="fu">.</span> <span class="fu">pure</span>)</a></code></pre></div>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1">ghci<span class="fu">&gt;</span> rev [<span class="dv">5</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">7</span>]</a>
<a class="sourceLine" id="cb12-2" title="2">[<span class="dv">7</span>,<span class="dv">4</span>,<span class="dv">2</span>,<span class="dv">5</span>]</a>
<a class="sourceLine" id="cb12-3" title="3"></a>
<a class="sourceLine" id="cb12-4" title="4">ghci<span class="fu">&gt;</span> rev <span class="st">&quot;Hello World&quot;</span></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="st">&quot;dlroW olleH&quot;</span></a></code></pre></div>
<h2 id="foldl">foldl</h2>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="fu">foldl</span><span class="ot"> ::</span> (b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</a>
<a class="sourceLine" id="cb13-2" title="2"><span class="fu">foldl</span> f z t <span class="fu">=</span> appEndo (getDual (<span class="fu">foldMap</span> (<span class="dt">Dual</span> <span class="fu">.</span> <span class="dt">Endo</span> <span class="fu">.</span> <span class="fu">flip</span> f) t)) z</a></code></pre></div>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://riptutorial.com/haskell/example/2555/folding-a-structure-in-reverse">Folding a structure in reverse</a></li>
<li><a href="https://medium.com/@sjsyrek/five-minutes-to-monoid-fe6f364d0bba">Five Minutes to Monoid</a></li>
<li><a href="http://ozark.hendrix.edu/~yorgey/pub/monoid-pearl.pdf">Monoids: Theme and Variations (Functional Pearl)</a></li>
<li><a href="https://www.stackage.org/haddock/lts-13.5/base-4.12.0.0/Prelude.html#t:Foldable">Foldable</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>cabal build で package.yaml を使う</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html</id>
    <published>2018-12-25T00:00:00Z</published>
    <updated>2018-12-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>最近少しずつ <code>cabal</code> を使うようになりました。</p>
<p>そのため、<code>stack</code> と <code>cabal</code> のどちらを使ってもビルドできるようにプロジェクトを修正していたのですが、<code>cabal</code> ファイルの取り扱いが難しかったのでメモ程度に残しておきます。</p>
<p>方針としては <code>cabal</code> コマンドの実行時にフックを仕掛けて <code>hpack</code> を使って <code>package.yaml</code> から <code>cabal</code> ファイルを生成しようという感じです。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">$</span> cabal <span class="co">--numeric-version</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="fl">2.4</span><span class="fu">.</span><span class="fl">1.0</span></a></code></pre></div>
<!--more-->
<h2 id="setup.hs-は何のためにあるのか">Setup.hs は何のためにあるのか？</h2>
<p><code>stack</code> を使ってプロジェクトを作ると <code>Setup.hs</code> が以下の内容で自動的に生成されると思います。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">import</span> <span class="dt">Distribution.Simple</span></a>
<a class="sourceLine" id="cb2-2" title="2">main <span class="fu">=</span> defaultMain</a></code></pre></div>
<p>今まで特に使わなくても困らなかったので、気にせずに放置していましたが、このファイルが今回の主役になります。</p>
<p><code>cabal</code> には <a href="https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-type">build-type</a> という設定項目があり、この値はデフォルトでは <code>Simple</code> か <code>Custom</code> のどちらかに自動的に推論されます。(他にも <code>Configure</code>, <code>Make</code> などもあります。詳しくはドキュメントを参照してください)</p>
<h3 id="simple">Simple</h3>
<p><code>build-type</code> に <code>Simple</code> を指定した場合、<code>cabal</code> は <code>Setup.hs</code> に以下の内容が記述されているものとして処理を進めます。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">import</span> <span class="dt">Distribution.Simple</span></a>
<a class="sourceLine" id="cb3-2" title="2">main <span class="fu">=</span> defaultMain</a></code></pre></div>
<p>そのため <code>Setup.hs</code> を削除しても問題なくビルド可能です。</p>
<h3 id="custom">Custom</h3>
<p><code>build-type</code> に <code>Custom</code> を指定した場合、<code>Setup.hs</code> の内容をユーザが自由に書き換えることができます。</p>
<p>Cabal には <a href="https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#v:defaultMainWithHooks">defaultMainWithHooks</a> という素晴らしい関数が用意されています。</p>
<p>この関数を利用することで、コマンドの前後に好きな処理を挟むことができます。(処理の上書きも可能です)</p>
<p>詳しいドキュメントは <a href="https://www.haskell.org/cabal/users-guide/developing-packages.html#more-complex-packages">3.3.8. More complex packages</a> を参照ください。</p>
<h3 id="userhooks">UserHooks</h3>
<p><code>defaultMainWithHooks</code> に渡す <a href="https://www.stackage.org/haddock/lts-13.0/Cabal-2.4.1.0/Distribution-Simple.html#t:UserHooks">UserHooks</a> 型はこんな感じで定義されています。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">data</span> <span class="dt">UserHooks</span> <span class="fu">=</span> <span class="dt">UserHooks</span> {</a>
<a class="sourceLine" id="cb4-2" title="2"><span class="ot">    runTests ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-3" title="3"><span class="ot">    readDesc ::</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">GenericPackageDescription</span>),</a>
<a class="sourceLine" id="cb4-4" title="4"><span class="ot">    hookedPreProcessors ::</span> [ <span class="dt">PPSuffixHandler</span> ],</a>
<a class="sourceLine" id="cb4-5" title="5"><span class="ot">    hookedPrograms ::</span> [<span class="dt">Program</span>],</a>
<a class="sourceLine" id="cb4-6" title="6"></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="ot">    preConf  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">ConfigFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-8" title="8"><span class="ot">    confHook ::</span> (<span class="dt">GenericPackageDescription</span>, <span class="dt">HookedBuildInfo</span>) <span class="ot">-&gt;</span> <span class="dt">ConfigFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">LocalBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-9" title="9"><span class="ot">    postConf ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">ConfigFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-10" title="10"></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="ot">    preBuild  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">BuildFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-12" title="12"><span class="ot">    buildHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">BuildFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-13" title="13"><span class="ot">    postBuild ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">BuildFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-14" title="14"></a>
<a class="sourceLine" id="cb4-15" title="15"><span class="ot">    preRepl  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">ReplFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="ot">    replHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">ReplFlags</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="ot">    postRepl ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">ReplFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-18" title="18"></a>
<a class="sourceLine" id="cb4-19" title="19"><span class="ot">    preClean  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">CleanFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="ot">    cleanHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> () <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">CleanFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-21" title="21"><span class="ot">    postClean ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">CleanFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> () <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-22" title="22"></a>
<a class="sourceLine" id="cb4-23" title="23"><span class="ot">    preCopy  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">CopyFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-24" title="24"><span class="ot">    copyHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">CopyFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-25" title="25"><span class="ot">    postCopy ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">CopyFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-26" title="26"></a>
<a class="sourceLine" id="cb4-27" title="27"><span class="ot">    preInst  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">InstallFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-28" title="28"><span class="ot">    instHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">InstallFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-29" title="29"><span class="ot">    postInst ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">InstallFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-30" title="30"></a>
<a class="sourceLine" id="cb4-31" title="31"><span class="ot">    preSDist  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">SDistFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-32" title="32"><span class="ot">    sDistHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">SDistFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-33" title="33"><span class="ot">    postSDist ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">SDistFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-34" title="34"></a>
<a class="sourceLine" id="cb4-35" title="35"><span class="ot">    preReg  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">RegisterFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-36" title="36"><span class="ot">    regHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">RegisterFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-37" title="37"><span class="ot">    postReg ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">RegisterFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-38" title="38"></a>
<a class="sourceLine" id="cb4-39" title="39"><span class="ot">    preUnreg  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">RegisterFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-40" title="40"><span class="ot">    unregHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">RegisterFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-41" title="41"><span class="ot">    postUnreg ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">RegisterFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-42" title="42"></a>
<a class="sourceLine" id="cb4-43" title="43"><span class="ot">    preHscolour  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">HscolourFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-44" title="44"><span class="ot">    hscolourHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">HscolourFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-45" title="45"><span class="ot">    postHscolour ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">HscolourFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-46" title="46"></a>
<a class="sourceLine" id="cb4-47" title="47"><span class="ot">    preDoctest  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">DoctestFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-48" title="48"><span class="ot">    doctestHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">DoctestFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-49" title="49"><span class="ot">    postDoctest ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">DoctestFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-50" title="50"></a>
<a class="sourceLine" id="cb4-51" title="51"><span class="ot">    preHaddock  ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">HaddockFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-52" title="52"><span class="ot">    haddockHook ::</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">HaddockFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-53" title="53"><span class="ot">    postHaddock ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">HaddockFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-54" title="54"></a>
<a class="sourceLine" id="cb4-55" title="55"><span class="ot">    preTest ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">TestFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-56" title="56"><span class="ot">    testHook ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">TestFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-57" title="57"><span class="ot">    postTest ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">TestFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-58" title="58"></a>
<a class="sourceLine" id="cb4-59" title="59"><span class="ot">    preBench ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">BenchmarkFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span>,</a>
<a class="sourceLine" id="cb4-60" title="60"><span class="ot">    benchHook ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">UserHooks</span> <span class="ot">-&gt;</span> <span class="dt">BenchmarkFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (),</a>
<a class="sourceLine" id="cb4-61" title="61"><span class="ot">    postBench ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">BenchmarkFlags</span> <span class="ot">-&gt;</span> <span class="dt">PackageDescription</span> <span class="ot">-&gt;</span> <span class="dt">LocalBuildInfo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb4-62" title="62">  }</a></code></pre></div>
<p>これだけあれば、やりたいことはほとんど出来そうですね。</p>
<h2 id="実装">実装</h2>
<p>フックする場所はたくさんあるので問題無さそうです。</p>
<p>しかし、これだけあると、どこにフックすれば良いのか？ということになるのですが、処理的には <code>package.yaml</code> から <code>.cabal</code> ファイルを生成したいので <code>.cabal</code> ファイルを読み込む手前で差し込む必要がありそうです。</p>
<p>適当に cabal のコードを読んでいると、どうやら <a href="https://github.com/haskell/cabal/blob/e15d87d542b4b23983aed3d54e0b42585257f453/cabal-install/Distribution/Client/CmdBuild.hs#L119">establishProjectBaseContext</a> という関数が <code>.cabal</code> ファイルを読み込んでコンテキストを作っているっぽいことがわかりました。</p>
<p>なので、<code>preBuild</code> にフックすれば良さそうです。(<code>cabal</code> のコードベースについて全然わからないので、本当に合ってるかどうかは不安)</p>
<p>最終的に、こんな感じで完成しました。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">import</span> <span class="dt">Distribution.Simple</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">import</span> <span class="dt">Distribution.Simple.Setup</span> (<span class="dt">BuildFlags</span>)</a>
<a class="sourceLine" id="cb5-5" title="5"><span class="kw">import</span> <span class="dt">Distribution.Types.HookedBuildInfo</span> (<span class="dt">HookedBuildInfo</span>, emptyHookedBuildInfo)</a>
<a class="sourceLine" id="cb5-6" title="6"><span class="kw">import</span> <span class="dt">Hpack</span></a>
<a class="sourceLine" id="cb5-7" title="7"></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-9" title="9">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-10" title="10">  <span class="kw">let</span> myHook <span class="fu">=</span> simpleUserHooks {</a>
<a class="sourceLine" id="cb5-11" title="11">    preBuild <span class="fu">=</span> pbHpack</a>
<a class="sourceLine" id="cb5-12" title="12">  }</a>
<a class="sourceLine" id="cb5-13" title="13">  defaultMainWithHooks myHook</a>
<a class="sourceLine" id="cb5-14" title="14"></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="ot">pbHpack ::</span> <span class="dt">Args</span> <span class="ot">-&gt;</span> <span class="dt">BuildFlags</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">HookedBuildInfo</span></a>
<a class="sourceLine" id="cb5-16" title="16">pbHpack _ _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-17" title="17">  hpack <span class="dt">Verbose</span> defaultOptions</a>
<a class="sourceLine" id="cb5-18" title="18">  <span class="fu">return</span> emptyHookedBuildInfo</a></code></pre></div>
<p><a href="https://www.stackage.org/package/hpack">hpack</a> パッケージの関数をそのまま使ってます。</p>
<p>今回は他に何もしないので <code>emptyHookedBuildInfo</code> で大丈夫でした。(たぶん)</p>
<h3 id="extra-source-files">extra-source-files</h3>
<p>キャッシュの問題があるので <code>extra-source-files</code> に <code>package.yaml</code> を追加しておくと良さそうです。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb6-1" title="1"><span class="fu">extra-source-files:</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">-</span> package.yaml</a></code></pre></div>
<h3 id="custom-setup">custom-setup</h3>
<p>最後に忘れてはいけないのが、<code>custom-setup</code> の設定です。</p>
<p><code>Setup.hs</code> で利用する依存関係などは <code>library</code> や <code>executables</code>, <code>tests</code> と同様に <code>custom-setup</code> を <code>package.yaml</code> に追記します。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" title="1"><span class="fu">custom-setup:</span></a>
<a class="sourceLine" id="cb7-2" title="2">  <span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb7-3" title="3">    <span class="kw">-</span> base</a>
<a class="sourceLine" id="cb7-4" title="4">    <span class="kw">-</span> Cabal</a>
<a class="sourceLine" id="cb7-5" title="5">    <span class="kw">-</span> hpack</a></code></pre></div>
<p>これで完成です。</p>
<p>最初の一度だけは <code>hpack</code> を使って <code>cabal</code> ファイルを生成する必要がありますが、それ以降は必要ありません。</p>
<pre class="shell"><code>$ curl -sSL https://github.com/sol/hpack/raw/master/get-hpack.sh | bash
$ hpack package.yaml
$ cabal new-build</code></pre>
<h2 id="失敗したこと">失敗したこと</h2>
<p>最初はフックさせずにこんな感じですぐに実装できるものだと思ってましたが、</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" title="2"></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="kw">import</span> <span class="dt">Distribution.Simple</span></a>
<a class="sourceLine" id="cb9-4" title="4"><span class="kw">import</span> <span class="dt">Hpack</span></a>
<a class="sourceLine" id="cb9-5" title="5"></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb9-7" title="7">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-8" title="8">  hpack <span class="dt">Verbose</span> defaultOptions</a>
<a class="sourceLine" id="cb9-9" title="9">  defaultMain</a></code></pre></div>
<p>これだと、あんまり上手くいきません。</p>
<p><code>package.yaml</code> を更新しても実行されなかったり、期待するタイミングで <code>.cabal</code> ファイルが生成されていないっぽい感じでした。</p>
<h2 id="まとめ">まとめ</h2>
<p>とりあえず実装してみたという感じなので、実際どのぐらい使えるのか試してみようと思います。</p>
<p><code>stack</code> も <code>cabal</code> も両方とも良いビルドツールだと思います。</p>
<p>もうちょっとしたら、<code>cabal</code> も同様にオススメしていこうと思います。</p>]]></summary>
</entry>
<entry>
    <title>Stack 1.9.3 がリリースされました。</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/12-10-stack-193.html</id>
    <published>2018-12-10T00:00:00Z</published>
    <updated>2018-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>12月3日に Stack version 1.9.3 が<a href="https://github.com/commercialhaskell/stack/blob/v1.9.3/ChangeLog.md#v193">リリース</a>されました。</p>
<p>更新は <code>stack upgrade</code> コマンドを実行します。</p>
<pre class="shell"><code>$ stack upgrade
...

$ stack --numeric-version
1.9.3</code></pre>
<p>今回はバグフィックスが3点のみです。</p>
<!--more-->
<h2 id="changelog-翻訳">Changelog (翻訳)</h2>
<h3 id="バグフィックス">バグフィックス</h3>
<ul>
<li>Stack をコンパイルする際に <code>.git</code> ディレクトリが含まれていない場合、コンパイルに失敗する問題を修正しました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841">#4364</a></li>
</ul>
<p>この問題は <code>Stack</code> をビルドする人の話なので、普通の人は問題になりませんが、githash を使っている人は自分のアプリケーションでも起こりうる問題なので注意です。</p>
<p>Stack はバージョン情報に git の情報を含めるために <a href="https://github.com/acfoltzer/gitrev">gitrev</a> を使っていたのですが、現在は開発が止まっているようで <a href="https://github.com/snoyberg/githash">githash</a> に切り替えました。(<a href="https://github.com/commercialhaskell/stack/pull/4130">Switch to githash to include some unmerged bugfixes in gitrev #4130</a>)</p>
<p>今回の問題を修正するために実装された <code>tGitInfoCwdTry</code> 関数を使うことで <code>.git</code> ディレクトリが存在しない場合でもコンパイルできるようになります。</p>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/4364">1.9.1 fails to build from tarball without .git/ #4364</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4368">Compile without a Git dir #4364 #4368</a></li>
</ul>
<hr />
<ul>
<li>GHC が生成する hi-dump ファイルの <code>addDependentFile</code> 関連のフォーマット変更 (ハッシュを含むようになった) に対応しました。詳細: <a href="https://github.com/yesodweb/yesod/issues/1551">yesodweb/yesod#1551</a></li>
</ul>
<p>Yesod で報告された問題に対する修正です。<code>.hi-dump</code> フォーマットが変わったので、それに対応しました。shakespeare の問題なので主に Yesod ユーザに影響があるかと思われます。以下のバージョンを利用すればこの問題は解決するため、この現象で悩んでいる人は stack と shakespeare の両方を更新しましょう。</p>
<ul>
<li>stack &gt;= 1.9.3</li>
<li>shakespeare &gt;= 2.0.19</li>
</ul>
<p>stack は GHC が出力する <code>hi</code> ファイルの情報を内部で利用しているため、このようなことが起きます。(ビルド時にデフォルトで <code>-ddump-hi -ddump-to-file</code> オプションが追加されています)</p>
<p><code>-ddump-to-file</code> が自動的に追加されてしまうせいで <code>-ddump-splices</code> の結果を表示しようとしてもコンソールに出力されなかったりして不便だったので出力先のディレクトリを指定できるようにしました。たぶん次のメジャーリリースで使えるようになると思います。</p>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/yesodweb/yesod/issues/1551">Unable to detect file changes on hamlet templates on stack devel for lts-12.5 #1551</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4369">Support GHC 8.4 in addDependentFile for 1.9.3 #4369</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4360">qAddDependentFile doesn’t cause re-compilation without extra-source-files #4360</a></li>
<li><a href="https://github.com/commercialhaskell/stack/commit/aae15e3">commit@aae15e3ae5767febe9fcad36bf5a5e184c635de1</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4225">Can’t display -ddump-splices result. #4225</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4242">Add the ddump-dir option/config value #4225 #4242</a></li>
</ul>
<hr />
<ul>
<li>テンプレートファイルのファイル名に変数が利用できるようになりました</li>
</ul>
<p>こんな感じで使えます。</p>
<pre class="mastache"><code>{-# START_FILE {{name}}.cabal #-}
name: {{name}}
version: 0.0</code></pre>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4397">Expand mustache variables in template file names #4397</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4381">Allow variables in filenames in templates #4381</a></li>
</ul>
<hr />
<h2 id="changelog-オリジナル">Changelog (オリジナル)</h2>
<h3 id="bug-fixes">Bug fixes</h3>
<ul>
<li>Stack can now be compiled again inside a directory that does not contain a <code>.git</code> directory, see <a href="https://github.com/commercialhaskell/stack/issues/4364#issuecomment-431600841">#4364</a></li>
<li>Handle a change in GHC’s hi-dump format around <code>addDependentFile</code>, which now includes a hash. See <a href="https://github.com/yesodweb/yesod/issues/1551">yesodweb/yesod#1551</a></li>
<li>Allow variables to appear in template file names.</li>
</ul>]]></summary>
</entry>
<entry>
    <title>CamelCase の split</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/11-16-split-camel-case.html</id>
    <published>2018-11-16T00:00:00Z</published>
    <updated>2018-11-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>Twitter で <code>CamelCase</code> の文字列を <code>Camel Case</code> にするという話を見かけたので、やってみました。</p>
<p>文字列に含まれる文字は <code>['a'..'z'] ++ ['A'..'Z']</code> を想定しています。</p>
<ul>
<li>追記: 寄せられたご意見について追記しました。</li>
</ul>
<!--more-->
<h2 id="split">split</h2>
<p>分割するということなので <a href="https://www.stackage.org/package/split">split</a> パッケージを使ってみます。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">import</span> <span class="dt">Data.List.Split</span> (split, startsWithOneOf)</a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="ot">splitCC ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-4" title="4">splitCC  <span class="fu">=</span> <span class="fu">unwords</span> <span class="fu">.</span> split (startsWithOneOf [<span class="ch">&#39;A&#39;</span><span class="fu">..</span><span class="ch">&#39;Z&#39;</span>])</a></code></pre></div>
<p>実行結果</p>
<pre class="shell"><code>ghci&gt; splitCC &quot;CamelCase&quot;
&quot;Camel Case&quot;</code></pre>
<h2 id="fold">fold</h2>
<p><code>split</code> パッケージを使った実装は直感的でコードもコンパクトです。</p>
<p>しかし、見た感じ効率悪そうですよね。(リスト全体を分割した後で <code>unwords</code> かけるため)</p>
<p>そのため、<code>fold</code> バージョンも実装してみましょう。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">import</span> <span class="dt">Data.Char</span> (isUpper, isSpace)</a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="ot">foldSplitCC ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb3-4" title="4">foldSplitCC <span class="fu">=</span> fmt <span class="fu">.</span> <span class="fu">foldr</span> go []</a>
<a class="sourceLine" id="cb3-5" title="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-6" title="6">    go c acc</a>
<a class="sourceLine" id="cb3-7" title="7">      <span class="fu">|</span> <span class="fu">isUpper</span> c <span class="fu">=</span> <span class="ch">&#39; &#39;</span><span class="fu">:</span>c<span class="fu">:</span>acc</a>
<a class="sourceLine" id="cb3-8" title="8">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> c<span class="fu">:</span>acc</a>
<a class="sourceLine" id="cb3-9" title="9">    fmt cs</a>
<a class="sourceLine" id="cb3-10" title="10">      <span class="fu">|</span> <span class="fu">null</span> cs <span class="fu">=</span> cs</a>
<a class="sourceLine" id="cb3-11" title="11">      <span class="fu">|</span> <span class="fu">isSpace</span> (<span class="fu">head</span> cs) <span class="fu">=</span> <span class="fu">tail</span> cs</a>
<a class="sourceLine" id="cb3-12" title="12">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> cs</a></code></pre></div>
<p>実行結果</p>
<pre class="shell"><code>ghci&gt; foldSplitCC &quot;CamelCase&quot;
&quot;Camel Case&quot;</code></pre>
<h2 id="quickcheck">QuickCheck</h2>
<p>念の為 <a href="https://www.stackage.org/package/QuickCheck">QuickCheck</a> を使ってランダムテストを行ってみましょう。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">import</span> <span class="dt">Test.QuickCheck</span></a>
<a class="sourceLine" id="cb5-4" title="4"></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="kw">import</span> <span class="dt">SplitCC</span></a>
<a class="sourceLine" id="cb5-6" title="6"></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="kw">newtype</span> <span class="dt">MyString</span> <span class="fu">=</span> <span class="dt">MyString</span> {<span class="ot"> getString ::</span> <span class="dt">String</span> }</a>
<a class="sourceLine" id="cb5-8" title="8">  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb5-9" title="9"></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">MyString</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-11" title="11">  arbitrary <span class="fu">=</span> <span class="fu">fmap</span> <span class="dt">MyString</span> <span class="fu">$</span> listOf <span class="fu">$</span> elements ([<span class="ch">&#39;a&#39;</span><span class="fu">..</span><span class="ch">&#39;z&#39;</span>]<span class="fu">++</span>[<span class="ch">&#39;A&#39;</span><span class="fu">..</span><span class="ch">&#39;Z&#39;</span>])</a>
<a class="sourceLine" id="cb5-12" title="12"></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-14" title="14">main <span class="fu">=</span> quickCheck prop_split</a>
<a class="sourceLine" id="cb5-15" title="15"></a>
<a class="sourceLine" id="cb5-16" title="16"><span class="ot">prop_split ::</span> <span class="dt">MyString</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb5-17" title="17">prop_split xs <span class="fu">=</span> splitCC xs&#39; <span class="fu">==</span> foldSplitCC xs&#39;</a>
<a class="sourceLine" id="cb5-18" title="18">  <span class="kw">where</span> xs&#39; <span class="fu">=</span> getString xs</a></code></pre></div>
<p>実行結果</p>
<pre class="shell"><code>$ stack test
splitcc-0.1.0.0: test (suite: splitcc-test)

+++ OK, passed 100 tests.

splitcc-0.1.0.0: Test suite splitcc-test passed</code></pre>
<h2 id="ベンチマーク">ベンチマーク</h2>
<p>次は <a href="https://github.com/vincenthz/hs-gauge">gauge</a> を使ってどっちが速いか確認してみましょう。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">import</span> <span class="dt">Gauge.Main</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="kw">import</span> <span class="dt">Gauge.Main.Options</span></a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">import</span> <span class="dt">Test.QuickCheck</span></a>
<a class="sourceLine" id="cb7-5" title="5"></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="kw">import</span> <span class="dt">SplitCC</span></a>
<a class="sourceLine" id="cb7-7" title="7"></a>
<a class="sourceLine" id="cb7-8" title="8"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-9" title="9">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb7-10" title="10">  <span class="kw">let</span> conf <span class="fu">=</span> defaultConfig { displayMode <span class="fu">=</span> <span class="dt">Condensed</span> }</a>
<a class="sourceLine" id="cb7-11" title="11">  sampleData1 <span class="ot">&lt;-</span> generate <span class="fu">$</span> vectorOf <span class="dv">10</span> charGen</a>
<a class="sourceLine" id="cb7-12" title="12">  sampleData2 <span class="ot">&lt;-</span> generate <span class="fu">$</span> vectorOf <span class="dv">1000</span> charGen</a>
<a class="sourceLine" id="cb7-13" title="13">  sampleData3 <span class="ot">&lt;-</span> generate <span class="fu">$</span> vectorOf <span class="dv">100000</span> charGen</a>
<a class="sourceLine" id="cb7-14" title="14">  sampleData4 <span class="ot">&lt;-</span> generate <span class="fu">$</span> vectorOf <span class="dv">1000000</span> charGen</a>
<a class="sourceLine" id="cb7-15" title="15"></a>
<a class="sourceLine" id="cb7-16" title="16">  defaultMainWith conf</a>
<a class="sourceLine" id="cb7-17" title="17">    [ bgroup <span class="st">&quot;splitCC&quot;</span> [ bench <span class="st">&quot;10&quot;</span>      <span class="fu">$</span> nf splitCC sampleData1</a>
<a class="sourceLine" id="cb7-18" title="18">                       , bench <span class="st">&quot;1000&quot;</span>    <span class="fu">$</span> nf splitCC sampleData2</a>
<a class="sourceLine" id="cb7-19" title="19">                       , bench <span class="st">&quot;100000&quot;</span>  <span class="fu">$</span> nf splitCC sampleData3</a>
<a class="sourceLine" id="cb7-20" title="20">                       , bench <span class="st">&quot;1000000&quot;</span> <span class="fu">$</span> nf splitCC sampleData4</a>
<a class="sourceLine" id="cb7-21" title="21">                       ]</a>
<a class="sourceLine" id="cb7-22" title="22">    , bgroup <span class="st">&quot;foldSplitCC&quot;</span> [ bench <span class="st">&quot;10&quot;</span>      <span class="fu">$</span> nf foldSplitCC sampleData1</a>
<a class="sourceLine" id="cb7-23" title="23">                           , bench <span class="st">&quot;1000&quot;</span>    <span class="fu">$</span> nf foldSplitCC sampleData2</a>
<a class="sourceLine" id="cb7-24" title="24">                           , bench <span class="st">&quot;100000&quot;</span>  <span class="fu">$</span> nf foldSplitCC sampleData3</a>
<a class="sourceLine" id="cb7-25" title="25">                           , bench <span class="st">&quot;1000000&quot;</span> <span class="fu">$</span> nf foldSplitCC sampleData4</a>
<a class="sourceLine" id="cb7-26" title="26">                           ]</a>
<a class="sourceLine" id="cb7-27" title="27">    ]</a>
<a class="sourceLine" id="cb7-28" title="28"></a>
<a class="sourceLine" id="cb7-29" title="29"><span class="ot">charGen ::</span> <span class="dt">Gen</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb7-30" title="30">charGen <span class="fu">=</span> elements ([<span class="ch">&#39;a&#39;</span><span class="fu">..</span><span class="ch">&#39;z&#39;</span>]<span class="fu">++</span>[<span class="ch">&#39;A&#39;</span><span class="fu">..</span><span class="ch">&#39;Z&#39;</span>])</a></code></pre></div>
<p>実行結果</p>
<pre class="shell"><code>$ stack bench
Benchmark splitcc-bench: RUNNING...
splitCC/10                               mean 2.847 μs  ( +- 261.0 ns  )
splitCC/1000                             mean 287.2 μs  ( +- 3.935 μs  )
splitCC/100000                           mean 29.10 ms  ( +- 1.348 ms  )
splitCC/1000000                          mean 287.3 ms  ( +- 735.0 μs  )

foldSplitCC/10                           mean 219.3 ns  ( +- 2.955 ns  )
foldSplitCC/1000                         mean 25.65 μs  ( +- 246.5 ns  )
foldSplitCC/100000                       mean 2.640 ms  ( +- 22.98 μs  )
foldSplitCC/1000000                      mean 27.43 ms  ( +- 1.795 ms  )
Benchmark splitcc-bench: FINISH</code></pre>
<h2 id="autobench">AutoBench</h2>
<p>最後に <a href="https://github.com/mathandley/AutoBench">AutoBench</a> を使って視覚的に実行時間の変化を確認してみましょう。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span></a>
<a class="sourceLine" id="cb9-2" title="2"><span class="ot">{-# LANGUAGE DeriveGeneric #-}</span></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="kw">module</span> <span class="dt">Input</span> (ts, splitCC, foldSplitCC) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-4" title="4"></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="kw">import</span> <span class="dt">Data.Char</span>          (isSpace, isUpper)</a>
<a class="sourceLine" id="cb9-6" title="6"><span class="kw">import</span> <span class="dt">Data.List.Split</span>    (split, startsWithOneOf)</a>
<a class="sourceLine" id="cb9-7" title="7"></a>
<a class="sourceLine" id="cb9-8" title="8"><span class="kw">import</span> <span class="dt">GHC.Generics</span>    (<span class="dt">Generic</span>)</a>
<a class="sourceLine" id="cb9-9" title="9"><span class="kw">import</span> <span class="dt">Control.DeepSeq</span></a>
<a class="sourceLine" id="cb9-10" title="10"></a>
<a class="sourceLine" id="cb9-11" title="11"><span class="kw">import</span> <span class="dt">Data.Default</span>         (def)</a>
<a class="sourceLine" id="cb9-12" title="12"><span class="kw">import</span> <span class="dt">AutoBench.Types</span>      (<span class="dt">DataOpts</span>(..), <span class="dt">TestSuite</span>(..))</a>
<a class="sourceLine" id="cb9-13" title="13"><span class="kw">import</span> <span class="dt">AutoBench.QuickCheck</span> ()</a>
<a class="sourceLine" id="cb9-14" title="14"><span class="kw">import</span> <span class="dt">Test.QuickCheck</span></a>
<a class="sourceLine" id="cb9-15" title="15"></a>
<a class="sourceLine" id="cb9-16" title="16"><span class="ot">splitCC ::</span> <span class="dt">MyString</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-17" title="17">splitCC <span class="fu">=</span> <span class="fu">unwords</span> <span class="fu">.</span> split (startsWithOneOf [<span class="ch">&#39;A&#39;</span><span class="fu">..</span><span class="ch">&#39;Z&#39;</span>]) <span class="fu">.</span> getString</a>
<a class="sourceLine" id="cb9-18" title="18"></a>
<a class="sourceLine" id="cb9-19" title="19"><span class="ot">foldSplitCC ::</span> <span class="dt">MyString</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-20" title="20">foldSplitCC <span class="fu">=</span> fmt <span class="fu">.</span> <span class="fu">foldr</span> go [] <span class="fu">.</span> getString</a>
<a class="sourceLine" id="cb9-21" title="21">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-22" title="22">    go c acc</a>
<a class="sourceLine" id="cb9-23" title="23">      <span class="fu">|</span> <span class="fu">isUpper</span> c <span class="fu">=</span> <span class="ch">&#39; &#39;</span><span class="fu">:</span>c<span class="fu">:</span>acc</a>
<a class="sourceLine" id="cb9-24" title="24">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> c<span class="fu">:</span>acc</a>
<a class="sourceLine" id="cb9-25" title="25">    fmt cs</a>
<a class="sourceLine" id="cb9-26" title="26">      <span class="fu">|</span> <span class="fu">null</span> cs <span class="fu">=</span> cs</a>
<a class="sourceLine" id="cb9-27" title="27">      <span class="fu">|</span> <span class="fu">isSpace</span> (<span class="fu">head</span> cs) <span class="fu">=</span> <span class="fu">tail</span> cs</a>
<a class="sourceLine" id="cb9-28" title="28">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> cs</a>
<a class="sourceLine" id="cb9-29" title="29"></a>
<a class="sourceLine" id="cb9-30" title="30"><span class="ot">ts ::</span> <span class="dt">TestSuite</span></a>
<a class="sourceLine" id="cb9-31" title="31">ts  <span class="fu">=</span> def { _dataOpts <span class="fu">=</span> <span class="dt">Gen</span> <span class="dv">0</span> <span class="dv">10000</span> <span class="dv">200000</span> }</a>
<a class="sourceLine" id="cb9-32" title="32"></a>
<a class="sourceLine" id="cb9-33" title="33"><span class="kw">newtype</span> <span class="dt">MyString</span> <span class="fu">=</span> <span class="dt">MyString</span> {<span class="ot"> getString ::</span> <span class="dt">String</span> }</a>
<a class="sourceLine" id="cb9-34" title="34">  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Generic</span>, <span class="dt">NFData</span>)</a>
<a class="sourceLine" id="cb9-35" title="35"></a>
<a class="sourceLine" id="cb9-36" title="36"><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">MyString</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-37" title="37">  arbitrary <span class="fu">=</span> <span class="fu">fmap</span> <span class="dt">MyString</span> <span class="fu">$</span> listOf <span class="fu">$</span> elements ([<span class="ch">&#39;a&#39;</span><span class="fu">..</span><span class="ch">&#39;z&#39;</span>]<span class="fu">++</span>[<span class="ch">&#39;A&#39;</span><span class="fu">..</span><span class="ch">&#39;Z&#39;</span>])</a></code></pre></div>
<ul>
<li>AutoBench を利用する際、デフォルトの設定では、入力の型は <code>NFData</code> 型クラスのインスタンスになっている必要があります。</li>
</ul>
<p>AutoBench の結果</p>
<figure>
<img src="/images/2018/11-16/AutoBenched.png" alt="AutoBench の結果" /><figcaption>AutoBench の結果</figcaption>
</figure>
<p>一応ターミナルにもこんな感じで詳細な結果も出力してくれます。</p>
<pre class="shell"><code>     • Executed benchmarking file ✔
     • Generating test report ✔
     • Analysing performance results...

 ―― Test summary ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  Programs       foldSplitCC, splitCC
  Data           Random, size range [0,10000..200000]
  Normalisation  nf
  QuickCheck     ✔
  GHC flags      n/a

 ―― Analysis ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  foldSplitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   0.179   1.225   1.978   2.112   6.172   4.232   1.248
                  0.217   5.961   5.184   2.715   5.186   2.690   6.810   4.810
                  7.073   7.760   5.122   8.280   18.66
    Std dev (ms)  1.742
    Average variance introduced by outliers: 83% (severely inflated)

    Fits          y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
                  y = 3.45e-13 + 4.71e-8x
                  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  splitCC
    Size          0       10000   20000   30000   40000   50000   60000   70000
                  80000   90000   100000  110000  120000  130000  140000  150000
                  160000  170000  180000  190000  200000
    Time    (ms)  0.000   1.080   9.397   13.53   6.133   39.55   29.14   9.504
                  1.596   44.46   38.58   16.35   35.41   17.94   38.40   52.06
                  59.35   62.88   40.68   58.27   105.0
    Std dev (ms)  10.54
    Average variance introduced by outliers: 62% (severely inflated)

    Fits          y = 2.41e-12 + 3.29e-7x
                  y = 8.06e-15 + 1.92e-8xlog₂(x)
                  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  Optimisation:

    splitCC ≥ foldSplitCC (1.00)

 ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――</code></pre>
<p><code>splitCC ≥ foldSplitCC (1.00)</code> ということなので <code>foldSplitCC</code> の方が良い結果となりました。</p>
<h2 id="まとめ">まとめ</h2>
<ul>
<li>リストを何度も走査すると遅くなるので、fold で書くと良いよ！</li>
<li>関数の振る舞いが変化していないか確認するために QuickCheck を使おう！</li>
<li>ベンチマークの実行はとても簡単なので積極的にやってみよう！</li>
<li>AutoBench を使って可視化すると楽しいよ！</li>
</ul>
<h2 id="寄せられたご意見">寄せられたご意見</h2>
<blockquote>
<p>問題設定として <code>convertRGB</code> は <code>convert R G B</code> でいいの？</p>
</blockquote>
<p>直感的に良くないですが、全然考えてなかったので今回は良いことにしておきたいと思います・・・。</p>
<blockquote>
<p>グラフの隅に、“splitCCは線形でfoldsplitCCは2次”とか書いてあって本当にそうだと巨大な列で結果が逆転してしまうんだけどそれは間違いだよね。</p>
</blockquote>
<p>これは (たぶん) グラフをプロットする際の値の選択が良くなかったため、間違った計算量が推論されてしまっています。</p>
<p>具体的にはこのような表示があり、ここから選ぶことになるのですが全然わからないので <code>1</code> を選択した結果、今回の図のようになりました。</p>
<pre class="shell"><code>  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 1.18e-23 + 8.49e-17x + 2.98e-13x²
    2)  y = 3.45e-13 + 4.71e-8x
    3)  y = 3.47e-34 + 5.68e-29x + 9.70e-24x² + 1.70e-18x³

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&#39;t plot         [X]

&gt; 1

  splitCC
    1)  y = 2.41e-12 + 3.29e-7x
    2)  y = 8.06e-15 + 1.92e-8xlog₂(x)
    3)  y = 8.20e-23 + 1.21e-16x + 2.07e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&#39;t plot         [X]

&gt; 1</code></pre>
<p>以下のように正しく選ぶと</p>
<pre class="shell"><code>――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  ▸ Select trend lines for the graph of results:

  foldSplitCC
    1)  y = 2.80e-13 + 3.83e-8x
    2)  y = 9.34e-16 + 2.22e-9xlog₂(x)
    3)  y = -7.13e-3 + 1.34e-6log₂(x) + 4.22e-5log₂²(x)

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&#39;t plot         [X]

&gt; 1

  splitCC
    1)  y = 2.15e-12 + 2.94e-7x
    2)  y = 7.18e-15 + 1.71e-8xlog₂(x)
    3)  y = 6.99e-23 + 2.79e-16x + 1.76e-12x²

  ▸ Select a fit       [1..3]
  ▸ View fits          [V]
  ▸ View statistics    [S]
  ▸ Don&#39;t plot         [X]

&gt; 1</code></pre>
<p>このように、正しい計算量になります。</p>
<figure>
<img src="/images/2018/11-16/true-result.png" alt="AutoBench の真の結果" /><figcaption>AutoBench の真の結果</figcaption>
</figure>
<blockquote>
<p>MyString を定義するのが面倒な場合は以下のようにすると良いよ</p>
</blockquote>
<div class="sourceCode" id="cb13"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1">prop_split <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-2" title="2">  xs <span class="ot">&lt;-</span> listOf <span class="fu">$</span> elements ([<span class="ch">&#39;a&#39;</span><span class="fu">..</span><span class="ch">&#39;z&#39;</span>]<span class="fu">++</span>[<span class="ch">&#39;A&#39;</span><span class="fu">..</span><span class="ch">&#39;Z&#39;</span>])</a>
<a class="sourceLine" id="cb13-3" title="3">  <span class="fu">return</span> <span class="fu">$</span> splitCC xs <span class="fu">==</span> foldSplitCC xs</a></code></pre></div>
<blockquote>
<p><code>splitCC ≥ foldSplitCC (1.00)</code> っていうのはどういう意味</p>
</blockquote>
<ul>
<li><code>splitCC ≥ foldSplitCC</code> の部分は <code>splitCC</code> よりも <code>foldSplitCC</code> 関数の方がパフォーマンスが向上していることを示しています。</li>
<li><code>(1.00)</code> は QuickCheck によって生成されたテストケースを入力として利用した時に全てのテストケース (<code>100%</code>) で性能が改善されたという意味です。<code>0.5</code> などとなっていた場合はテストケースによっては性能が向上していないということです。</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Stack 1.9.1 がリリースされました。</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/10-22-stack-191.html</id>
    <published>2018-10-22T00:00:00Z</published>
    <updated>2018-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>10月18日に Stack version 1.9.1 が<a href="https://github.com/commercialhaskell/stack/blob/v1.9.1/ChangeLog.md#v191">リリース</a>されました。</p>
<p>更新は <code>stack upgrade</code> コマンドを実行します。</p>
<pre class="shell"><code>$ stack upgrade
Current Stack version: 1.7.1, available download version: 1.9.1
Newer version detected, downloading
Querying for archive location for platform: linux-x86_64-static
Downloading from: https://github.com/commercialhaskell/stack/releases/download/v1.9.1/stack-1.9.1-linux-x86_64-static.tar.gz
Download complete, testing executable
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0
New stack executable available at /home/guchi/.local/bin/stack
Also copying stack executable to /usr/local/bin/stack
Permission error when trying to copy: /usr/local/bin: copyFile:atomicCopyFileContents:withReplacementFile:openBinaryTempFile: permission denied (Permission denied)
Should I try to perform the file copy using sudo? This may fail
Try using sudo? (y/n)</code></pre>
<p>実行ファイルは <code>~/.local/bin/stack</code> と <code>/usr/local/bin</code> にインストールされます。</p>
<p>ただし、権限が無いと上記のように <code>/usr/local/bin</code> へのコピーに失敗するため <code>sudo</code> で再実行するか聞かれます。必要であれば <code>y</code> でインストールしましょう。</p>
<pre class="shell"><code>Try using sudo? (y/n) y
Going to run the following commands:

-  sudo cp /home/guchi/.local/bin/stack /usr/local/bin/stack.tmp
-  sudo mv /usr/local/bin/stack.tmp /usr/local/bin/stack

sudo file copy worked!</code></pre>
<p>インストールされるバージョンは以下の通りです。</p>
<pre class="shell"><code>$ stack --version
Version 1.9.1, Git revision f9d0042c141660e1d38f797e1d426be4a99b2a3c (6168 commits) x86_64 hpack-0.31.0</code></pre>
<p>気になる更新内容まとめ</p>
<ul>
<li>static binary の復活</li>
<li>Cabal 2.4 への対応</li>
<li>internal-library 関連のバグ修正</li>
<li>namespaced template</li>
<li>stack run</li>
<li>ghci に -fobject-code を渡した際にちゃんとキャッシュされるようになった</li>
</ul>
<!--more-->
<h2 id="changelog-翻訳">Changelog (翻訳)</h2>
<h3 id="リリースノート">リリースノート</h3>
<ul>
<li><a href="https://github.com/nh2">@nh2</a>さんのおかげで、静的にリンクされた Linux バイナリが再び利用できるようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/blob/c34f11190302b2db9bab44ac6e45ca2c5f7810ce/doc/maintainers/releases.md#build-linux-static-binary-distribution-with-nix">Build Linux static binary distribution with Nix</a></li>
<li><a href="https://github.com/nh2/static-haskell-nix/tree/upstream-nixpkgs-musl-1.1.19/static-stack">Fully statically linked stack</a></li>
</ul>
<hr />
<ul>
<li><code>download.fpcomplete.com</code> から Ubuntu, Debian, CentOS, Fedora, Arch のパッケージリポジトリを削除する予定です。これらは既に1年以上前から非推奨となっており、新しいリリースにも対応していませんでしたが、過去のスクリプトとの互換性のために残していました。</li>
</ul>
<hr />
<h3 id="大きな変更点">大きな変更点</h3>
<ul>
<li>Cabal 2.4 にアップグレードしました。
<ul>
<li>注意点: ファイル名のパターンマッチの動作が変わりました。Cabal spec 2.4 より前のバージョンでは <code>*.txt</code> は <code>foo.txt</code> にマッチしていましたが、<code>foo.2.txt</code> にはマッチしませんでした。</li>
</ul></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4317">Use Cabal 2.4 for the 1.9 branch #4317</a></li>
<li><a href="https://github.com/haskell/cabal/blob/master/Cabal/ChangeLog.md#2400-mikhail-glushenkov-september-2018">ChangeLog (Cabal 2.4)</a></li>
<li><a href="https://github.com/haskell/cabal/pull/5372">Multi-dot globbing #5372</a></li>
<li><a href="https://github.com/haskell/cabal/issues/784">Wildcards in data-files don’t work with filenames containing multiple dots #784</a></li>
<li><a href="https://github.com/haskell/cabal/issues/5057"><code>cabal sdist</code> does not pick up files with multiple dots #5057</a></li>
</ul>
<hr />
<ul>
<li><code>GHCJS</code> のサポートが <code>experimental (実験的)</code> へ降格しました。また、<code>GHCJS</code> が実験段階であることをユーザに知らせるための警告が表示されるようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/4086">DISCUSSION: Mark GHCJS support as deprecated? #4086</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4154">Warning about GHCJS use when constructing a build plan #4154</a></li>
<li><a href="https://github.com/commercialhaskell/stack/commit/729a052cede11855644bf00c4b7661a89148bdc7#diff-e705c8fadf1193ab59443a5e6c8cbe8b">commit@729a052cede11855644bf00c4b7661a89148bdc7</a></li>
</ul>
<hr />
<h3 id="変更点">変更点</h3>
<ul>
<li><code>stack.yaml</code> の <code>ghc-options</code> と <code>config.yaml</code> の <code>ghc-options</code> を結合するようにしました。今までは置き換えていました。</li>
</ul>
<h4 id="解説">解説</h4>
<p>グローバルな <code>~/.stack/.config.yaml</code> とプロジェクト固有の <code>stack.yaml</code> の話で <code>package.yaml</code> は関係しません。</p>
<p>例として、それぞれファイルの内容を以下のように設定しておきます。(<code>$everything</code> は全てのパッケージを指定)</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb4-1" title="1"><span class="co"># ~/.stack/config.yaml</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="fu">&quot;$everything&quot;:</span><span class="at"> </span><span class="st">&quot;aaa&quot;</span></a></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" title="1"><span class="co"># stack.yaml</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="fu">resolver:</span><span class="at"> lts-12.13</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb5-5" title="5"><span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb5-6" title="6">  <span class="fu">&quot;$everything&quot;:</span><span class="at"> </span><span class="st">&quot;bbb&quot;</span></a></code></pre></div>
<p>パッケージの指定が重複していたときに今までは、<code>stack.yaml</code> (プロジェクト固有) の <code>ghc-options</code> で上書きされていましたが、 <code>stack.yaml</code> の <code>ghc-options</code> を結合するようになりました。以下は動作例です。</p>
<pre class="shell"><code># stack v1.9.1 の動作
$ stack build
... --ghc-options aaa --ghc-options bbb

# stack v1.7.1 の動作
$ stack build
... --ghc-options bbb</code></pre>
<p><code>ghc-options</code> の内容が重複する場合は両方とも引数に与えられますが、後ろの値で上書きされるようなのでプロジェクト固有の設定が優先されます。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" title="1"><span class="co"># ~/.stack/config.yaml</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb7-3" title="3">  <span class="fu">&quot;$everything&quot;:</span><span class="at"> </span><span class="st">&quot;-dumpdir=./respect-config&quot;</span></a></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb8-1" title="1"><span class="co"># stack.yaml</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="fu">resolver:</span><span class="at"> lts-12.13</span></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb8-5" title="5"><span class="fu">ghc-options:</span></a>
<a class="sourceLine" id="cb8-6" title="6">  <span class="fu">&quot;$everything&quot;:</span><span class="at"> </span><span class="st">&quot;-dumpdir=./respect-stack&quot;</span></a></code></pre></div>
<p>実際に試してみると、以下のようになると思います。</p>
<pre class="sell"><code>$ stack build -v
... --ghc-options -dumpdir=./respect-config --ghc-options -dumpdir=./respect-stack

$ ls  -l
...
drwxrwxr-x 5 guchi guchi 4096 10月 21 13:35 respect-stack
...</code></pre>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3753">Stack does not respect ghc-options in user config #3753</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/3781">Fix inheritance of category ghc-options from config.yaml #3753 #3781</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4089">Have project ghc-options append to config.yaml ghc-options #3753</a></li>
</ul>
<hr />
<ul>
<li><code>stack build</code> コマンドはパッケージのサブライブラリをビルドする際に executables, test, benchmarks, libraries などと同様の方法でアナウンスを行うようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4111">Consistent handling of internal libraries #4111</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4111/commits/4a4b63f59130bb66477d155dcb401d50fac02fab">commit@4a4b63f59130bb66477d155dcb401d50fac02fab</a></li>
</ul>
<hr />
<ul>
<li><code>stack sdist</code> コマンドはサニティチェックの結果にかかわらず、生成された tarball の場所をアナウンスするようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4117">Mention tarball earlier in sdist #4117</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4112">stack sdist fails when modules are exposed based on a flag in the cabal file #4112</a></li>
</ul>
<hr />
<ul>
<li><code>stack setup</code> コマンドの <code>--upgrade-cabal</code> オプションは廃止されます。この機能は GHC 8.2 以降では動作しません。また、このフラグが実装された当初の動機は Stack がカスタムセットアップのためにスナップショットの <code>Cabal</code> ライブラリを利用し始めたことでほとんど無くなりました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4070">#4070</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4118">Deprecate the –upgrade-cabal flag (fixes #4070) #4118</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4070"><code>stack setup --upgrade-cabal</code> doesn’t work for Cabal-2.2.0.1 + ghc-8.2.2 #4070</a></li>
</ul>
<hr />
<ul>
<li>新たに namespaced template 機能が実装されたため、<code>stack templates</code> コマンドは利用可能な全てのテンプレートの一覧を良い感じに表示できなくなりました。代わりに、テンプレートを見つける方法についての<a href="https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md">ヘルプファイル</a>をダウンロードし、表示します。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4039">#4039</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4129">Get stack templates help from Github file #4039 #4129</a></li>
<li><a href="https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md">help file</a></li>
</ul>
<hr />
<ul>
<li>ビルドツールを <code>cabal-install</code> と同様の方法で取り扱うようになりました。また、レガシーな <code>build-tools</code> フィールドに対しては、ツールマップの中からビルドツールパッケージを調べるのではなく、ハードコードされたビルドツールのリストを利用します。この変更により Stack の動作は <code>cabal-install</code> に近づいたため、いくつかのバグを回避し、最適化/遅延性の恩恵を得られる可能性があります。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4125">#4125</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/4125">stack 1.7.1 still has problems finding build tools (“The program ‘happy’ is required”) #4125</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4132">Use a hard-coded tool dependency map (fixes #4125) #4132</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/595">Build-tools not detected when not using Stackage snapshot #595</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3178">Stack cannot find happy during build #3178</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/3249">Extensible snapshots #3249</a></li>
</ul>
<hr />
<ul>
<li>パフォーマンスの低下を避けるため、Mustache テンプレートに (50kb を超える) 大きなファイルを適用できなくなりました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4133">#4133</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4134">Do not apply Mustache to large files (fixes #4133) #4134</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4133">stack new is very slow at compiling Mustache templates #4133</a></li>
</ul>
<hr />
<ul>
<li><code>stack upload</code> はデフォルトでパッケージに署名を行うようになりました。また、<code>--no-signature</code> オプションで署名をスキップできます。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3739">#3739</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3739">stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4167">Fix behavior of –no-signature to turn signing off #4167</a></li>
</ul>
<hr />
<ul>
<li>テンプレートダウンロード時のネットワーク接続問題に備えて、事前にチェックを行うようになりました。もし、問題があればキャッシュ済みのテンプレートを利用します。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3850">stack new requires network to work #3850</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3850">stack new requires network to work #3850</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4173">Use cached template if template download fails #4173</a></li>
</ul>
<hr />
<h3 id="その他の改良点">その他の改良点</h3>
<ul>
<li>Windows 10 より前の Windows 環境では、ターミナルのデフォルト値が <code>--color=never</code> となります。エミュレーションによる出力のみ ANSI カラーコードが利用できます。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4106">Re #4091: Pre-Windows 10, default –color=never #4106</a></li>
</ul>
<hr />
<ul>
<li>Windows 環境では、デフォルトのターミナルを ‘mintty’ (false) として認識するように変更しました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4015">Windows: use ‘hIsTerminalDevice or isMinTTYHandle’ #4015</a></li>
</ul>
<hr />
<ul>
<li><code>stack build</code> コマンドは <code>stack.yaml</code> の <code>extra-deps</code> に <code>base</code> が明示的に記載されているとき、警告を出すようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/3993">Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3940">Warn when upgrading base #3940</a></li>
</ul>
<hr />
<ul>
<li><code>stack build</code> コマンドは、ビルドプランで達成不可能な <code>base</code> バージョンが要求された際に、別の GHC バージョンを試すように提案するようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/3993">Help users not to go down the road of base upgrade/downgrade, addresses #3940 #3993</a></li>
</ul>
<hr />
<ul>
<li>新たなサブコマンド <code>run</code> が導入されました。このコマンドは <code>cabal run</code> のように、指定された executable をビルド&amp;実行します。executable が省略された場合は、プロジェクト内で最初に利用可能な executable が指定されます。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/3952">Introduce <code>stack run</code> command line option #3952</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/233">Wishlist: <code>stack run</code> #233</a></li>
<li><a href="https://haskell.e-bigmoon.com/posts/2018/06-25-stack-run.html">stack run コマンド – BIGMOON Blog</a></li>
</ul>
<hr />
<ul>
<li><code>stack build</code> コマンドは、依存関係が足りない旨を伝えるメッセージにパッケージの最新の cabal ファイルリビジョンハッシュを含めるようになりました。詳細: <a href="https://github.com/commercialhaskell/stack/pull/4068">#4068</a></li>
</ul>
<h4 id="解説-1">解説</h4>
<p>こんな感じで表示されるようです。</p>
<pre class="shell"><code>...
  * Recommended action: try adding the following to your extra-deps in /home/thomas/github/stack/stack.yaml:
rio-0.1.2.0@sha256:cb2a65cee1c0450815002ca890633215e4544b5c1c9f7091a950142c6efe8f3f</code></pre>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4068">Add cabal-hash revision info when displaying recommended packages when failing to construct buildplan #4068</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3925">Modify “recommended packages” output to include revision info #3925</a></li>
</ul>
<hr />
<ul>
<li><code>stack sdist</code> コマンドに新しく <code>--tar-dir</code> オプションを追加しました。このオプションにより指定したディレクトリに生成された tarball をコピーできるようになります。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/3621">3568 add tar files option to sdist #3621</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3568">Stack sdist option to place build artefacts elsewhere #3568</a></li>
<li><a href="https://github.com/commercialhaskell/stack/commit/9a58d5bf5346bedb0d460335c7018c256591966d">commit@9a58d5bf5346bedb0d460335c7018c256591966d</a></li>
</ul>
<hr />
<ul>
<li><code>--interleaved-output</code> オプションと <code>build.interleaved-output</code> 設定値が導入されました。これにより、複数の並行ビルドの出力が <code>packagename&gt;</code> プレフィックス付きで同時に標準エラー出力にダンプされます。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3225">#3225</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4097">Add the interleaved-output option/config value #3225 #4097</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3225">Add flag to print GHC output to stdout #3225</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3508">Report progress on STDOUT/STDERR during compilation of individual modules #3508</a></li>
</ul>
<hr />
<ul>
<li>デフォルトの再接続戦略を exponential backoff に変更しました。これにより <a href="https://github.com/commercialhaskell/stack/issues/3510">#3510</a> の問題が緩和されます。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4109">Changed the default retry strategy #4109</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3510">Stack does not retry effectively when S3 is being flaky. #3510</a></li>
<li><a href="https://www.stackage.org/haddock/lts-12.14/retry-0.7.7.0/Control-Retry.html#v:exponentialBackoff">exponentialBackoff</a></li>
</ul>
<hr />
<ul>
<li><code>stack new</code> コマンドは <code>username/foo</code> という形式で、<code>commercialstack</code> 以外のリポジトリからテンプレートをダウンロードできるようになりました。また <code>github:</code> という形式でプレフィックスを付けることでサービスを指定することもできます。現状は <code>github:</code> の他に <code>gitlab:</code> と <code>bitbucket:</code> が利用可能です。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4103">4039 namespaced templates #4103</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4039">Namespaced templates #4039</a></li>
<li><a href="https://haskell.e-bigmoon.com/posts/2018/06-27-namespaced-templates.html">namespaced templates - BIGMOON Blog</a></li>
</ul>
<hr />
<ul>
<li><code>gitrev</code> から <code>githash</code> に切り替えました。このパッケージには <code>gitrev</code> にマージされていないバグフィックスが含まれています。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4130">Switch to githash to include some unmerged bugfixes in gitrev #4130</a></li>
</ul>
<hr />
<ul>
<li><code>'allow-newer': true</code> を追加するファイルがわかりづらいため、ユーザ設定ファイルへのパスをエラーメッセージに含めるようにしました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3685">#3685</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3685">allow-newer in global-project doesn’t work #3685</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4127">Point to user’s config.yaml when advising ‘allow-newer: true’ #4127</a></li>
</ul>
<hr />
<ul>
<li><code>stack ghci</code> コマンドはビルド後ではなく、ビルド前にどのメインターゲットを読み込むか質問するようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4138">‘stack ghci’ now asks which main module to load before building #4138</a></li>
</ul>
<hr />
<ul>
<li>hpack のバージョンを 0.29.0 に更新しました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4151">Bump to hpack 0.29 #4151</a></li>
</ul>
<hr />
<ul>
<li>GHC 8.4 以降のバージョンを利用したとき、自動的に Haddock へ <code>--quickjump</code> オプションが渡されるようになります。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4163">Pass –quickjump to Haddock for GHC 8.4 and later #4163</a></li>
</ul>
<hr />
<ul>
<li><p><code>hackage-base-url</code> 設定オプションを利用することで、パッケージアップロード時の Hackage ベースURL に任意のURLを指定できるようになりました。(デフォルトは <code>https://hackage.haskell.org/</code> です)</p></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4167">Fix behavior of –no-signature to turn signing off #4167</a></li>
<li><p><a href="https://github.com/commercialhaskell/stack/issues/3739">stack upload –no-signature still shows “Unable to find gpg2 or gpg executable” #3739</a></p></li>
</ul>
<hr />
<ul>
<li>Nix 利用時に GHC のマイナーバージョンを省略した場合、メジャーブランチの最新のマイナーバージョンを自動的に利用するようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4189">Do not hardcode GHC versions for Nixpkgs #4189</a></li>
</ul>
<hr />
<h3 id="バグフィックス">バグフィックス</h3>
<ul>
<li><code>stack ghci</code> を繰り返し実行したときに <code>.o</code> ファイルを無効化しなくなりました。これにより、<code>-fobject-code</code> でコンパイルされた全てのモジュールは ghci を実行する度にキャッシュされます。 詳細: <a href="https://github.com/commercialhaskell/stack/pull/4038">#4038</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4038">Set cabal_macros.h work directory in stack ghci to something non-temporary #4038</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3344">stack ghci recompiles all modules on every startup, even when invoked with “-fobject-code” or “–no-build” #3344</a></li>
</ul>
<hr />
<ul>
<li><code>~/.stack/config.yaml</code> と <code>stack.yaml</code> の最後に改行が追加されました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/3983">fixed: terminating is newline #3983</a></li>
</ul>
<hr />
<ul>
<li>前回のリリースで <code>ghc-pkg</code> コマンドの出力が <code>stderr</code> に出力されてしまう問題が再発したので修正しました。現在の出力はとても静かになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4028">Make ghc-pkg calls less noisy #4028</a></li>
</ul>
<hr />
<ul>
<li><code>v1.7.1</code> で導入された再コンパイルチェックの問題を修正し、回帰テストを追加しました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4001">#4001</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4003">4001 excess recompilation #4003</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4001">–file-watch is watching test suites again #4001</a></li>
</ul>
<hr />
<ul>
<li><code>stack ghci</code> は internal library を含むパッケージの処理で internal libray に対応する間違ったパッケージを探し、モジュールの読み込みに失敗していました。この問題は現在修正済みで、ライブラリとサブライブラリが適切に追跡されるようにコードが変更されました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3926">#3926</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3926"><code>stack ghci</code> does not recognise internal libraries #3926</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/3982">Handle internal libraries in GHCi. #3982</a></li>
</ul>
<hr />
<ul>
<li>internal library に依存していないパッケージを <code>stack build</code> すると、internal library をビルドしていないのにも関わらず登録しようとするため、ビルドに失敗していました。この問題は internal library を常にビルドすることで解決しました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4033">Handle internal libs not listed as dependencies #4033</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3996">Build fails with internal libraries that aren’t dependencies #3996</a></li>
</ul>
<hr />
<ul>
<li>NixOS 環境では <code>--no-nix</code> オプションの影響を受けなくなりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4021">Allow Nix mode to be disabled under NixOS #4021</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4002">stack does not honor –no-nix under NixOS #4002</a></li>
</ul>
<hr />
<ul>
<li>RAM を大量に消費してしまう問題が再発していたので修正しました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4027">#4027</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/4027">Regression in 1.7.1 (compared to 1.6.5) in getPackageFiles RAM usage #4027</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4066">Fix RAM usage upon big dump-hi files parsing #4066</a></li>
</ul>
<hr />
<ul>
<li>コマンドラインの引数の順序によって動作が異なる問題を修正しました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3959">#3959</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3959">It should not matter if flags given before command or after #3959</a></li>
<li><a href="https://github.com/commercialhaskell/stack/pull/4067">Change parsers to use <code>flag'</code> instead of <code>switch</code> #4067</a></li>
</ul>
<hr />
<ul>
<li>パッケージをアップロードする際の Hackage クレデンシャル保存プロンプトで、ユーザの入力前に表示されなければならないメッセージが入力後に表示されてしまっていた問題を修正しました。ghci のターゲット選択プロンプトでも同様の問題が発生していたので修正しました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4063">Flush after prompt #4063</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4162">Stack Upload waits for confirmation BEFORE printing confirmation message #4162</a></li>
</ul>
<hr />
<ul>
<li><code>stack solver</code> コマンドで、PATH に <code>cabal</code> が存在しない場合、ユーザに対して <code>stack install cabal-install</code> の実行を促すためのメッセージが表示されるようになりました。</li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4100">Solver cabal install hint #4100</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3841">stack solver complains there’s no cabal in path. #3841</a></li>
</ul>
<hr />
<ul>
<li><code>stack build</code> コマンドはサブライブラリを含むパッケージが executable, test, benchmark などの依存関係になっている場合でも、正しくビルドできるようになりました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3787">#3787</a>.</li>
</ul>
<h4 id="解説-2">解説</h4>
<p>Cabal 2.0 から <code>internal Libraries</code> が追加され、stack 側も対応したという感じです。</p>
<p>例として以下のような <code>package.yaml</code> があった場合</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb11-1" title="1"><span class="co"># package.yaml</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="fu">name:</span><span class="at"> test-internal</span></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb11-4" title="4">  <span class="kw">-</span> base</a>
<a class="sourceLine" id="cb11-5" title="5"><span class="fu">internal-libraries:</span></a>
<a class="sourceLine" id="cb11-6" title="6">  <span class="fu">internal-foo:</span><span class="at"> </span><span class="kw">{}</span></a></code></pre></div>
<p>自動生成される <code>cabal</code> ファイルは以下のようになります。</p>
<pre class="cabal"><code>name:           test-internal
version:        0.0.0
build-type:     Simple
cabal-version:  &gt;= 2.0

library internal-foo
  other-modules:
      Paths_test_internal
  build-depends:
      base
  default-language: Haskell2010</code></pre>
<p>この状態でビルドした結果は次のとおりです。</p>
<pre class="shell"><code># v1.7.1
$ stack build
Package has buildable sublibraries but no buildable libraries, I&#39;m giving up
CallStack (from HasCallStack):
  error, called at src/Stack/Package.hs:280:30 in stack-1.7.1-JqFYW3fz7If7um4NzPRwPj:Stack.Package

# v1.9.1
$ stack build
test-internal-0.0.0: configure (internal-lib)
Configuring test-internal-0.0.0...
test-internal-0.0.0: build (internal-lib)
Preprocessing library &#39;internal-foo&#39; for test-internal-0.0.0..
Building library &#39;internal-foo&#39; for test-internal-0.0.0..
[1 of 1] Compiling Paths_test_internal ( .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/autogen/Paths_test_internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.2.0.1/build/internal-foo/Paths_test_internal.o )
ignoring (possibly broken) abi-depends field for packages
test-internal-0.0.0: copy/register
Installing internal library internal-foo in /home/guchi/Desktop/stack-191-working/test-internal/.stack-work/install/x86_64-linux/lts-12.14/8.4.3/lib/x86_64-linux-ghc-8.4.3/test-internal-0.0.0-6jijyMwb8IH16YEILzaUQW-internal-foo</code></pre>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4111">Consistent handling of internal libraries #4111</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3787">Internal libraries does not work if there’s no main library #3787</a></li>
<li><a href="https://www.haskell.org/cabal/users-guide/developing-packages.html#sublibs">Internal Libraries - Cabal document</a></li>
<li><a href="https://github.com/sol/hpack#library-fields">hpack Top-level fields</a></li>
</ul>
<hr />
<ul>
<li>internal library に依存したテストスイートのカバレッジレポートで、サブライブラリが適切に処理されるようになりました。以前まではカバレッジレポートを生成するときにエラーとなっていました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4105">#4105</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4111">Consistent handling of internal libraries #4111</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4105">Error running test coverage when tests depend on internal lbraries. #4105</a></li>
</ul>
<hr />
<ul>
<li>スナップショット更新時にサブライブラリがプリコンパイルキャシュに追加されるようになりました。以前まではスナップショットにサブライブラリを含むパッケージが存在するようなスナップショットを更新するとビルドが壊れていました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/4071">#4071</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4111">Consistent handling of internal libraries #4111</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/4071">haddock-library’s internal attoparsec library cannot be found - broken package #4071</a></li>
</ul>
<hr />
<ul>
<li>Stack は <code>warning</code> の代わりに適切な <code>error</code> ログレベルでエラーメッセージをプリティプリントするようになりました。これにより self-executing scripts で runhaskell のプラン構築エラーがターミナルに出力されない問題も修正されます。詳細: <a href="https://github.com/commercialhaskell/stack/pull/4114">#4114</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4114">Fixes self-executing scripts not piping plan construction errors from runhaskell to terminal, issue #3942 #4114</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3942">Self-executing scripts don’t pipe plan construction errors from runhaskell to terminal #3942</a></li>
</ul>
<hr />
<ul>
<li>Cabal の呼び出しに失敗した際に “While building Setup.hs” という間違ったメッセージが表示されていた問題を修正しました。詳細: <a href="https://github.com/commercialhaskell/stack/issues/3934">#3934</a></li>
</ul>
<p>参考リンク</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/4131">Fix invalid “While building Setup.hs” #3934 #4131</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3934">Invalid “While building Setup.hs” error message #3934</a></li>
</ul>
<hr />
<h2 id="changelog-オリジナル">Changelog (オリジナル)</h2>
<h3 id="release-notes">Release notes</h3>
<ul>
<li>Statically linked Linux bindists are back again, thanks to <a href="https://github.com/nh2">@nh2</a>.</li>
<li>We will be deleting the Ubuntu, Debian, CentOS, Fedora, and Arch package repos from <code>download.fpcomplete.com</code> soon. These have been deprecated for over a year and have not received new releases, but were left in place for compatibility with older scripts.</li>
</ul>
<h3 id="major-changes">Major changes</h3>
<ul>
<li>Upgrade to Cabal 2.4
<ul>
<li>Note that, in this process, the behavior of file globbing has been modified to match that of Cabal. In particular, this means that for Cabal spec versions less than 2.4, <code>*.txt</code> will match <code>foo.txt</code>, but not <code>foo.2.txt</code>.</li>
</ul></li>
<li><code>GHCJS</code> support is being downgraded to ‘experimental’. A warning notifying the user of the experimental status of <code>GHCJS</code> will be displayed.</li>
</ul>
<h3 id="behavior-changes">Behavior changes:</h3>
<ul>
<li><code>ghc-options</code> from <code>stack.yaml</code> are now appended to <code>ghc-options</code> from <code>config.yaml</code>, whereas before they would be replaced.</li>
<li><code>stack build</code> will now announce when sublibraries of a package are being build, in the same way executables, tests, benchmarks and libraries are announced</li>
<li><code>stack sdist</code> will now announce the destination of the generated tarball, regardless of whether or not it passed the sanity checks</li>
<li>The <code>--upgrade-cabal</code> option to <code>stack setup</code> has been deprecated. This feature no longer works with GHC 8.2 and later. Furthermore, the reason for this flag originally being implemented was drastically lessened once Stack started using the snapshot’s <code>Cabal</code> library for custom setups. See: <a href="https://github.com/commercialhaskell/stack/issues/4070">#4070</a>.</li>
<li>With the new namespaced template feature, <code>stack templates</code> is no longer able to meaningfully display a list of all templates available. Instead, the command will download and display a <a href="https://github.com/commercialhaskell/stack-templates/blob/master/STACK_HELP.md">help file</a> with more information on how to discover templates. See: <a href="https://github.com/commercialhaskell/stack/issues/4039">#4039</a></li>
<li>Build tools are now handled in a similar way to <code>cabal-install</code>. In particular, for legacy <code>build-tools</code> fields, we use a hard-coded list of build tools in place of looking up build tool packages in a tool map. This both brings Stack’s behavior closer into line with <code>cabal-install</code>, avoids some bugs, and opens up some possible optimizations/laziness. See: <a href="https://github.com/commercialhaskell/stack/issues/4125">#4125</a>.</li>
<li>Mustache templating is not applied to large files (over 50kb) to avoid performance degredation. See: <a href="https://github.com/commercialhaskell/stack/issues/4133">#4133</a>.</li>
<li><code>stack upload</code> signs the package by default, as documented. <code>--no-signature</code> turns the signing off. <a href="https://github.com/commercialhaskell/stack/issues/3739">#3739</a></li>
<li>In case there is a network connectivity issue while trying to download a template, stack will check whether that template had been downloaded before. In that case, the cached version will be used. See <a href="https://github.com/commercialhaskell/stack/issues/3739">#3850</a>.</li>
</ul>
<h3 id="other-enhancements">Other enhancements</h3>
<ul>
<li>On Windows before Windows 10, –color=never is the default on terminals that can support ANSI color codes in output only by emulation</li>
<li>On Windows, recognise a ‘mintty’ (false) terminal as a terminal, by default</li>
<li><code>stack build</code> issues a warning when <code>base</code> is explicitly listed in <code>extra-deps</code> of <code>stack.yaml</code></li>
<li><code>stack build</code> suggests trying another GHC version should the build plan end up requiring unattainable <code>base</code> version.</li>
<li>A new sub command <code>run</code> has been introduced to build and run a specified executable similar to <code>cabal run</code>. If no executable is provided as the first argument, it defaults to the first available executable in the project.</li>
<li><code>stack build</code> missing dependency suggestions (on failure to construct a valid build plan because of missing deps) are now printed with their latest cabal file revision hash. See <a href="https://github.com/commercialhaskell/stack/pull/4068">#4068</a>.</li>
<li>Added new <code>--tar-dir</code> option to <code>stack sdist</code>, that allows to copy the resulting tarball to the specified directory.</li>
<li>Introduced the <code>--interleaved-output</code> command line option and <code>build.interleaved-output</code> config value which causes multiple concurrent builds to dump to stderr at the same time with a <code>packagename&gt;</code> prefix. See <a href="https://github.com/commercialhaskell/stack/issues/3225">#3225</a>.</li>
<li>The default retry strategy has changed to exponential backoff. This should help with <a href="https://github.com/commercialhaskell/stack/issues/3510">#3510</a>.</li>
<li><code>stack new</code> now allows template names of the form <code>username/foo</code> to download from a user other than <code>commercialstack</code> on Github, and can be prefixed with the service <code>github:</code>, <code>gitlab:</code>, or <code>bitbucket:</code>. <a href="https://github.com/commercialhaskell/stack/issues/4039">#4039</a></li>
<li>Switch to <code>githash</code> to include some unmerged bugfixes in <code>gitrev</code> Suggestion to add <code>'allow-newer': true</code> now shows path to user config file where this flag should be put into <a href="https://github.com/commercialhaskell/stack/issues/3685">#3685</a></li>
<li><code>stack ghci</code> now asks which main target to load before doing the build, rather than after</li>
<li>Bump to hpack 0.29.0</li>
<li>With GHC 8.4 and later, Haddock is given the <code>--quickjump</code> flag.</li>
<li>It is possible to specify the Hackage base URL to upload packages to, instead of the default of <code>https://hackage.haskell.org/</code>, by using <code>hackage-base-url</code> configuration option.</li>
<li>When using Nix, if a specific minor version of GHC is not requested, the latest minor version in the given major branch will be used automatically.</li>
</ul>
<h3 id="bug-fixes">Bug fixes</h3>
<ul>
<li><code>stack ghci</code> now does not invalidate <code>.o</code> files on repeated runs, meaning any modules compiled with <code>-fobject-code</code> will be cached between ghci runs. See <a href="https://github.com/commercialhaskell/stack/pull/4038">#4038</a>.</li>
<li><code>~/.stack/config.yaml</code> and <code>stack.yaml</code> terminating by newline</li>
<li>The previous released caused a regression where some <code>stderr</code> from the <code>ghc-pkg</code> command showed up in the terminal. This output is now silenced.</li>
<li>A regression in recompilation checking introduced in v1.7.1 has been fixed. See <a href="https://github.com/commercialhaskell/stack/issues/4001">#4001</a></li>
<li><code>stack ghci</code> on a package with internal libraries was erroneously looking for a wrong package corresponding to the internal library and failing to load any module. This has been fixed now and changes to the code in the library and the sublibrary are properly tracked. See <a href="https://github.com/commercialhaskell/stack/issues/3926">#3926</a>.</li>
<li>For packages with internal libraries not depended upon, <code>stack build</code> used to fail the build process since the internal library was not built but it was tried to be registered. This is now fixed by always building internal libraries. See <a href="https://github.com/commercialhaskell/stack/issues/3996">#3996</a>.</li>
<li><code>--no-nix</code> was not respected under NixOS</li>
<li>Fix a regression which might use a lot of RAM. See <a href="https://github.com/commercialhaskell/stack/issues/4027">#4027</a>.</li>
<li>Order of commandline arguments does not matter anymore. See <a href="https://github.com/commercialhaskell/stack/issues/3959">#3959</a></li>
<li>When prompting users about saving their Hackage credentials on upload, flush to stdout before waiting for the response so the prompt actually displays. Also fixes a similar issue with ghci target selection prompt.</li>
<li>If <code>cabal</code> is not on PATH, running <code>stack solver</code> now prompts the user to run <code>stack install cabal-install</code></li>
<li><code>stack build</code> now succeeds in building packages which contain sublibraries which are dependencies of executables, tests or benchmarks but not of the main library. See <a href="https://github.com/commercialhaskell/stack/issues/3959">#3787</a>.</li>
<li>Sublibraries are now properly considered for coverage reports when the test suite depends on the internal library. Before, stack was erroring when trying to generate the coverage report, see <a href="https://github.com/commercialhaskell/stack/issues/4105">#4105</a>.</li>
<li>Sublibraries are now added to the precompiled cache and recovered from there when the snapshot gets updated. Previously, updating the snapshot when there was a package with a sublibrary in the snapshot resulted in broken builds. This is now fixed, see <a href="https://github.com/commercialhaskell/stack/issues/4071">#4071</a>.</li>
<li>[#4114] Stack pretty prints error messages with proper <code>error</code> logging level instead of <code>warning</code> now. This also fixes self-executing scripts not piping plan construction errors from runhaskell to terminal (issue #3942).</li>
<li>Fix invalid “While building Setup.hs” when Cabal calls fail. See: <a href="https://github.com/commercialhaskell/stack/issues/3934">#3934</a></li>
<li><code>stack upload</code> signs the package by default, as documented. <code>--no-signature</code> turns the signing off. <a href="https://github.com/commercialhaskell/stack/issues/3739">#3739</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>time パッケージの使い方</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/09-17-time-package.html</id>
    <published>2018-09-17T00:00:00Z</published>
    <updated>2018-09-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>Haskell で時間や日付を扱う際に良く利用されるのは <a href="https://www.stackage.org/lts-12.9/package/time">time</a> パッケージです。</p>
<p>このパッケージが使いやすいかどうかは人それぞれですが、使い方を知っておくと便利なのでよく使いそうな関数を簡単に解説しようと思います。</p>
<p>これからの例は以下のコマンドを実行していると仮定して話を進めます。</p>
<pre class="shell"><code>$ stack repl --package time --resolver lts-12.9
$ import Data.Time</code></pre>
<!--more-->
<h2 id="time-パッケージのモジュール構造">Time パッケージのモジュール構造</h2>
<p>基本的には <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time.html">Data.Time</a> を import して使います。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">import</span> <span class="dt">Data.Time</span></a></code></pre></div>
<p>Data.Time は以下のモジュールを再エクスポートしています。</p>
<table>
<thead>
<tr class="header">
<th>モジュール名</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html">Data.Time.Calendar</a></td>
<td>日付</td>
</tr>
<tr class="even">
<td><a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html">Data.Time.Clock</a></td>
<td>全然使わないので良くわからない</td>
</tr>
<tr class="odd">
<td><a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-LocalTime.html">Data.Time.LocalTime</a></td>
<td>日本の現在時刻を取得など</td>
</tr>
<tr class="even">
<td><a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html">Data.Time.Format</a></td>
<td>出力の整形</td>
</tr>
</tbody>
</table>
<h3 id="rio-を利用している場合">rio を利用している場合</h3>
<p><a href="https://www.stackage.org/lts-12.9/package/rio">rio</a> を利用している場合は <a href="https://www.stackage.org/haddock/lts-12.9/rio-0.1.5.0/RIO-Time.html">RIO.Time</a> を import します。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">import</span> <span class="dt">RIO.Time</span></a></code></pre></div>
<h2 id="data.time.localtime">Data.Time.LocalTime</h2>
<p>現在時刻を取得する場合にこのモジュールを使います。現在時刻を取得したいからと言って <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:getCurrentTime">getCurrentTime</a> を利用すると日本時間にならないので注意してください。</p>
<h3 id="getzonedtime">getZonedTime</h3>
<p>システムのタイムゾーンに応じた現在時刻を返します。</p>
<pre class="shell"><code>&gt; :t getZonedTime
getZonedTime :: IO ZonedTime

&gt; getZonedTime
2018-09-17 13:41:05.512522063 JST</code></pre>
<h3 id="getcurrenttimezone">getCurrentTimeZone</h3>
<p>システムのタイムゾーンを取得します。このタイムゾーンに基づいて <code>getZonedTime</code> が計算されます。</p>
<pre class="shell"><code>&gt; :t getCurrentTimeZone
getCurrentTimeZone :: IO TimeZone

&gt; getCurrentTimeZone
JST</code></pre>
<h3 id="zonedtimetoutc">zonedTimeToUTC</h3>
<p><code>ZonedTime</code> を <code>UTCTime</code> に変換するために使います。</p>
<pre class="shell"><code>&gt; :t zonedTimeToUTC
zonedTimeToUTC :: ZonedTime -&gt; UTCTime

&gt; zonedTimeToUTC &lt;$&gt; getZonedTime
2018-09-17 04:41:27.907476307 UTC</code></pre>
<h3 id="utctozonedtime">utcToZonedTime</h3>
<p><code>zonedTimeToUTC</code> の逆で <code>UTCTime</code> を <code>ZonedTime</code> に変換する関数です。タイムゾーンのための引数を余分に取ります。</p>
<pre class="shell"><code>&gt; :t utcToZonedTime
utcToZonedTime :: TimeZone -&gt; UTCTime -&gt; ZonedTime

&gt; utcToZonedTime &lt;$&gt; getCurrentTimeZone &lt;*&gt; getCurrentTime
2018-09-17 13:41:37.955641567 JST</code></pre>
<h2 id="日後の時間を計算するには">1日後の時間を計算するには？</h2>
<p>ここで、取得した時間の1日後を計算してみましょう。</p>
<p>そのためには Data.Time.Clock で定義されている <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Clock.html#v:addUTCTime">addUTCTime</a> を使います。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="ot">addUTCTime ::</span> <span class="dt">NominalDiffTime</span> <span class="ot">-&gt;</span> <span class="dt">UTCTime</span> <span class="ot">-&gt;</span> <span class="dt">UTCTime</span></a></code></pre></div>
<p>第一引数に <code>NominalDiffTime</code> という謎の型を取りますが、<code>nominalDay</code> の実装を見れば <code>60 * 60 * 24</code> っぽいことがわかるので、そんな感じで値を作ります。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="ot">nominalDay ::</span> <span class="dt">NominalDiffTime</span></a>
<a class="sourceLine" id="cb9-2" title="2">nominalDay <span class="fu">=</span> <span class="dv">86400</span></a></code></pre></div>
<p>ちなみに、上記の実装でなぜ <code>NominalDiffTime</code> の値になるかと言うと、<code>NominalDiffTime</code> は <code>Num</code> クラスのインスタンスになっているため、自動的に <code>fromInteger</code> が呼ばれて変換されるという仕組みです。</p>
<p>実際に試してみましょう。1日後を計算してみます。</p>
<pre class="shell"><code>&gt; t = addUTCTime nominalDay . zonedTimeToUTC &lt;$&gt; getZonedTime
2018-09-17 10:32:56.880362453 UTC

&gt; getZonedTime
2018-09-17 13:49:09.279378323 JST

&gt; utcToZonedTime &lt;$&gt; getCurrentTimeZone &lt;*&gt; t
2018-09-18 13:49:16.211737218 JST</code></pre>
<p>同様に1時間後も計算してみましょう。</p>
<pre class="shell"><code>&gt; t = addUTCTime (60 * 60) . zonedTimeToUTC &lt;$&gt; getZonedTime

&gt; getZonedTime
2018-09-17 13:49:33.169797528 JST

&gt; t
2018-09-17 05:49:36.757498845 UTC

&gt; utcToZonedTime &lt;$&gt; getCurrentTimeZone &lt;*&gt; t
2018-09-17 14:49:40.930944714 JST</code></pre>
<p>上手くいってますね！</p>
<h2 id="data.time.localtime-1">Data.Time.LocalTime</h2>
<p>時刻の取得・計算ができたら、あとは整形して出力するだけです！</p>
<p>Data.Time.LocalTime モジュールの関数を使って出力を整形してみましょう！</p>
<h3 id="formattime">formatTime</h3>
<p><a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime">formatTime</a> 関数の使い方がわかれば、任意の形式で出力できるようになります。</p>
<pre class="shell"><code>&gt; :t formatTime
formatTime :: FormatTime t =&gt; TimeLocale -&gt; String -&gt; t -&gt; String</code></pre>
<p>ここで <code>FormatTime t</code> の <code>t</code> は <code>UTCTime</code> や <code>ZonedTime</code>、<code>Day</code> などの型が使えます。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="ot">formatTime ::</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">ZonedTime</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb13-2" title="2"><span class="ot">formatTime ::</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">UTCTime</span>   <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb13-3" title="3"><span class="ot">formatTime ::</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Day</span>       <span class="ot">-&gt;</span> <span class="dt">String</span></a></code></pre></div>
<p>型に応じて第三引数が変わるということです。</p>
<p>実際に使えばすぐに慣れます。(第一引数の値は <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:defaultTimeLocale">defaultTimeLocale</a> を指定しておけば良いのですが、自分でカスタマイズしたものを使うこともあります)</p>
<p>第二引数がフォーマット文字列なので、空文字列を与えれば当然結果も空になります。</p>
<pre class="shell"><code>&gt; formatTime defaultTimeLocale &quot;&quot; &lt;$&gt; getZonedTime
&quot;&quot;</code></pre>
<p>フォーマットの指定方法については <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:formatTime">haddock</a> を参照してください。</p>
<pre class="shell"><code>&gt; formatTime defaultTimeLocale &quot;%D&quot; &lt;$&gt; getZonedTime
&quot;09/17/18&quot;

&gt; formatTime defaultTimeLocale &quot;%F&quot; &lt;$&gt; getZonedTime
&quot;2018-09-17&quot;

&gt; formatTime defaultTimeLocale &quot;%x&quot; &lt;$&gt; getZonedTime
&quot;09/17/18&quot;

&gt; formatTime defaultTimeLocale &quot;%Y/%m/%d-%T&quot; &lt;$&gt; getZonedTime
&quot;2018/09/17-13:52:21&quot;

&gt; formatTime defaultTimeLocale rfc822DateFormat &lt;$&gt; getZonedTime
&quot;Sun, 16 Sep 2018 19:53:10 JST&quot;

&gt; formatTime defaultTimeLocale (iso8601DateFormat Nothing) &lt;$&gt; getZonedTime
&quot;2018-09-16&quot;</code></pre>
<h2 id="文字列をパーズして-zonedtime-や-day-の値を作る">文字列をパーズして ZonedTime や Day の値を作る</h2>
<p>ここまでは現在時刻を元に時刻の計算や出力結果の整形を行いました。</p>
<p>しかし、実際のプログラムでは文字列をパーズして <code>ZonedTime</code> や <code>Day</code> の値に変換したいこともあるでしょう。そのような場合は <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Format.html#v:parseTimeM">parseTimeM</a> を使うと便利です。</p>
<pre class="shell"><code>&gt; :t parseTimeM
parseTimeM
  :: (Monad m, ParseTime t) =&gt;
     Bool -&gt; TimeLocale -&gt; String -&gt; String -&gt; m t</code></pre>
<p>型がわかりづらいですが、具体的にはこんな型で利用することができます。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" title="1"><span class="ot">parseTimeM ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Day</span></a>
<a class="sourceLine" id="cb17-2" title="2"><span class="ot">parseTimeM ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ZonedTime</span></a>
<a class="sourceLine" id="cb17-3" title="3"><span class="ot">parseTimeM ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Day</span></a>
<a class="sourceLine" id="cb17-4" title="4"><span class="ot">parseTimeM ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">ZonedTime</span></a></code></pre></div>
<ul>
<li>第一引数は <strong>空白</strong> を許容するかどうかのフラグです (True だと空白OK)</li>
<li>第二引数は気にせず <strong>defaultTimeLocale</strong> を指定しておきましょう</li>
<li>第三引数は <strong>パーズで利用するフォーマット</strong> を指定します</li>
<li>第四引数は <strong>入力の文字列</strong> です</li>
</ul>
<h3 id="具体例">具体例</h3>
<p>実際にいくつか使ってみましょう。以下の通り <code>%F</code> は <code>YYYY-MM-DD</code> の書式になります。</p>
<pre class="shell"><code>&gt; formatTime defaultTimeLocale &quot;%F&quot; &lt;$&gt; getZonedTime
&quot;2018-09-17&quot;</code></pre>
<p>モナドを <code>IO</code> や <code>Maybe</code> などに変化させた基本的な例。</p>
<pre class="shell"><code>&gt; parseTimeM True defaultTimeLocale &quot;%F&quot; &quot;2018-09-17&quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&gt; parseTimeM True defaultTimeLocale &quot;%F&quot; &quot;2018-09-17&quot; :: Maybe ZonedTime
Just 2018-09-17 00:00:00 +0000</code></pre>
<p>第一引数を変化させて、入力文字列の空白の有無について確認する例。</p>
<pre class="shell"><code>&gt; parseTimeM True defaultTimeLocale &quot;%F&quot; &quot; 2018-09-17 &quot; :: IO ZonedTime
2018-09-17 00:00:00 +0000

&gt; parseTimeM False defaultTimeLocale &quot;%F&quot; &quot; 2018-09-17 &quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &quot;2018-09-17 &quot;)</code></pre>
<p>入力文字列とパーズの書式がマッチしない例</p>
<pre class="shell"><code>&gt; parseTimeM False defaultTimeLocale &quot;%x&quot; &quot; 2018-09-17 &quot; :: IO ZonedTime
*** Exception: user error (parseTimeM: no parse of &quot; 2018-09-17 &quot;)</code></pre>
<p>Day 型の値をとしてパーズする例</p>
<pre class="shell"><code>&gt; parseTimeM True defaultTimeLocale &quot;%F&quot; &quot;2018-09-17&quot; :: IO Day
2018-09-17</code></pre>
<p>このようにして日付を取得できれば、今回は説明していませんが <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html">Data.Time.Calendar</a> の <a href="https://www.stackage.org/haddock/lts-12.9/time-1.8.0.2/Data-Time-Calendar.html#v:addDays">addDays</a> 関数などを使って日付の計算を行うこともできるようになります。</p>
<pre class="shell"><code>&gt; d = parseTimeM True defaultTimeLocale &quot;%F&quot; &quot;2018-09-17&quot; :: IO Day

&gt; addDays 1 &lt;$&gt; d
2018-09-18

&gt; addDays 35 &lt;$&gt; d
2018-10-22</code></pre>
<h2 id="まとめ">まとめ</h2>
<ul>
<li>time パッケージを使うと時刻や日付の計算ができる</li>
<li>現在の<strong>日本</strong>時間を取得した場合は <strong>getCurrentTime</strong> ではなく、<strong>getZonedTime</strong> を使う</li>
<li>整形には <strong>formatTime</strong> を使う</li>
<li>文字列から <strong>ZonedTime</strong> や <strong>Day</strong> に変換する際は <strong>parseTimeM</strong> を使う</li>
</ul>
<p>Haskell入門の <strong>7.7 日付・時刻を扱う</strong> にも3ページほど <strong>time</strong> パッケージの解説があるので、気になる人はそちらも確認してみると良いかもしれません。</p>
<p>以上です。</p>
<h2 id="おまけ">おまけ</h2>
<p><code>getZonedTime</code> に対して <code>formatTime defaultTimeLocale &lt;フォーマット文字&gt;</code> の対応表です。</p>
<pre class="shell"><code>&gt; getZonedTime
2018-09-17 14:44:52.052040178 JST</code></pre>
<div class="narrow-table">
<table>
<thead>
<tr class="header">
<th>文字</th>
<th>出力結果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>%-z</code></td>
<td><code>+900</code></td>
</tr>
<tr class="even">
<td><code>%_z</code></td>
<td><code>+ 900</code></td>
</tr>
<tr class="odd">
<td><code>%0z</code></td>
<td><code>+0900</code></td>
</tr>
<tr class="even">
<td><code>%^z</code></td>
<td><code>+0900</code></td>
</tr>
<tr class="odd">
<td><code>%#z</code></td>
<td><code>+0900</code></td>
</tr>
<tr class="even">
<td><code>%8z</code></td>
<td><code>+00000900</code></td>
</tr>
<tr class="odd">
<td><code>%_12z</code></td>
<td><code>+         900</code></td>
</tr>
<tr class="even">
<td><code>%%</code></td>
<td><code>%</code></td>
</tr>
<tr class="odd">
<td><code>%t</code></td>
<td><code>\t</code></td>
</tr>
<tr class="even">
<td><code>%n</code></td>
<td><code>\n</code></td>
</tr>
<tr class="odd">
<td><code>%z</code></td>
<td><code>+0900</code></td>
</tr>
<tr class="even">
<td><code>%Z</code></td>
<td><code>JST</code></td>
</tr>
<tr class="odd">
<td><code>%c</code></td>
<td><code>Mon Sep 17 14:39:34 JST 2018</code></td>
</tr>
<tr class="even">
<td><code>%R</code></td>
<td><code>14:39</code></td>
</tr>
<tr class="odd">
<td><code>%T</code></td>
<td><code>14:40:12</code></td>
</tr>
<tr class="even">
<td><code>%X</code></td>
<td><code>14:40:31</code></td>
</tr>
<tr class="odd">
<td><code>%r</code></td>
<td><code>02:40:55 PM</code></td>
</tr>
<tr class="even">
<td><code>%P</code></td>
<td><code>pm</code></td>
</tr>
<tr class="odd">
<td><code>%p</code></td>
<td><code>PM</code></td>
</tr>
<tr class="even">
<td><code>%H</code></td>
<td><code>14</code></td>
</tr>
<tr class="odd">
<td><code>%k</code></td>
<td><code>14</code></td>
</tr>
<tr class="even">
<td><code>%I</code></td>
<td><code>02</code></td>
</tr>
<tr class="odd">
<td><code>%l</code></td>
<td><code>2</code></td>
</tr>
<tr class="even">
<td><code>%M</code></td>
<td><code>43</code></td>
</tr>
<tr class="odd">
<td><code>%S</code></td>
<td><code>49</code></td>
</tr>
<tr class="even">
<td><code>%q</code></td>
<td><code>903244678000</code></td>
</tr>
<tr class="odd">
<td><code>%Q</code></td>
<td><code>.28084722</code></td>
</tr>
<tr class="even">
<td><code>%s</code></td>
<td><code>1537163079</code></td>
</tr>
<tr class="odd">
<td><code>%D</code></td>
<td><code>09/17/18</code></td>
</tr>
<tr class="even">
<td><code>%F</code></td>
<td><code>2018-09-17</code></td>
</tr>
<tr class="odd">
<td><code>%x</code></td>
<td><code>09/17/18</code></td>
</tr>
<tr class="even">
<td><code>%Y</code></td>
<td><code>2018</code></td>
</tr>
<tr class="odd">
<td><code>%y</code></td>
<td><code>18</code></td>
</tr>
<tr class="even">
<td><code>%C</code></td>
<td><code>20</code></td>
</tr>
<tr class="odd">
<td><code>%B</code></td>
<td><code>September</code></td>
</tr>
<tr class="even">
<td><code>%b</code></td>
<td><code>Sep</code></td>
</tr>
<tr class="odd">
<td><code>%h</code></td>
<td><code>Sep</code></td>
</tr>
<tr class="even">
<td><code>%m</code></td>
<td><code>09</code></td>
</tr>
<tr class="odd">
<td><code>%d</code></td>
<td><code>17</code></td>
</tr>
<tr class="even">
<td><code>%e</code></td>
<td><code>17</code></td>
</tr>
<tr class="odd">
<td><code>%j</code></td>
<td><code>260</code></td>
</tr>
<tr class="even">
<td><code>%f</code></td>
<td><code>20</code></td>
</tr>
<tr class="odd">
<td><code>%V</code></td>
<td><code>38</code></td>
</tr>
<tr class="even">
<td><code>%u</code></td>
<td><code>1</code></td>
</tr>
<tr class="odd">
<td><code>%a</code></td>
<td><code>Mon</code></td>
</tr>
<tr class="even">
<td><code>%A</code></td>
<td><code>Monday</code></td>
</tr>
<tr class="odd">
<td><code>%U</code></td>
<td><code>37</code></td>
</tr>
<tr class="even">
<td><code>%w</code></td>
<td><code>1</code></td>
</tr>
<tr class="odd">
<td><code>%W</code></td>
<td><code>38</code></td>
</tr>
</tbody>
</table>
</div>]]></summary>
</entry>
<entry>
    <title>stack でアプリケーションのバックトレースを取得する (デバッグ)</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/09-01-stack-profile-build.html</id>
    <published>2018-09-01T00:00:00Z</published>
    <updated>2018-09-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>Haskell のデバッグ手法については、以下の記事がとても詳しく参考になります。素晴らしい記事です。</p>
<ul>
<li><a href="https://blog.miz-ar.info/2018/01/debugging-haskell-program">Haskell でのデバッグ手法あれこれ</a></li>
</ul>
<p>今回はHaskellアプリケーションをデバックする際に、バックトレースのとても簡単な取得方法があったのでご紹介したいと思います。</p>
<p>まとめると以下の2行です。</p>
<pre class="shell"><code>$ stack build --profile
$ stack exec -- &lt;exe_name&gt; +RTS -xc</code></pre>
<!--more-->
<h2 id="バックトレースの取得方法">バックトレースの取得方法</h2>
<p>まず、バックトレースを取得するために <a href="https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html">GHC.Stack</a> で定義されている <a href="https://www.stackage.org/haddock/lts-12.8/base-4.11.1.0/GHC-Stack.html#t:HasCallStack">HasCallStack</a> をクラス制約として追加します。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="ot">f1 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-4" title="4">f1 <span class="fu">=</span> f2</a>
<a class="sourceLine" id="cb2-5" title="5"></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="ot">f2 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-7" title="7">f2 <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="ot">f3 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-10" title="10">f3 <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;f3&quot;</span></a></code></pre></div>
<p>上記の例を雛形として、<strong>HasCallStack</strong> を追加するとどうなるのか確認していきましょう。</p>
<p><code>Main.hs</code> はこんな感じで <strong>f1</strong> を呼び出します。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="kw">import</span> <span class="dt">Lib</span></a>
<a class="sourceLine" id="cb3-4" title="4"></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb3-6" title="6">main <span class="fu">=</span> f1</a></code></pre></div>
<p><strong>HasCallStack</strong> を追加しない場合は以下のような出力となります。</p>
<pre class="shell"><code>$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib</code></pre>
<p><strong>f3</strong> でエラーが発生したことはわかりますが、それ以外は何もわかりません。</p>
<h3 id="f1-f2-f3-に-hascallstack-を追加した場合">f1, f2, f3 に HasCallStack を追加した場合</h3>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">import</span> <span class="dt">GHC.Stack</span></a>
<a class="sourceLine" id="cb5-4" title="4"></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="ot">f1 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-6" title="6">f1 <span class="fu">=</span> f2</a>
<a class="sourceLine" id="cb5-7" title="7"></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="ot">f2 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-9" title="9">f2 <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb5-10" title="10"></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="ot">f3 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-12" title="12">f3 <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;f3&quot;</span></a></code></pre></div>
<p>ビルドしてみます。</p>
<pre class="shell"><code>$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f1, called at app/Main.hs:6:8 in main:Main</code></pre>
<p>ちゃんと呼び出しの関係が <code>error</code> -&gt; <code>f3</code> -&gt; <code>f2</code> -&gt; <code>f1</code> と表示されていますね！</p>
<h3 id="f2-f3-にのみ-hascallstack-を追加する">f2, f3 にのみ HasCallStack を追加する</h3>
<p>では、ここで <code>f1</code> の <strong>HasCallStack</strong> 制約を取り除くとどうなるか確認してみます。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="kw">import</span> <span class="dt">GHC.Stack</span></a>
<a class="sourceLine" id="cb7-4" title="4"></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="ot">f1 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-6" title="6">f1 <span class="fu">=</span> f2</a>
<a class="sourceLine" id="cb7-7" title="7"></a>
<a class="sourceLine" id="cb7-8" title="8"><span class="ot">f2 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-9" title="9">f2 <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb7-10" title="10"></a>
<a class="sourceLine" id="cb7-11" title="11"><span class="ot">f3 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-12" title="12">f3 <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;f3&quot;</span></a></code></pre></div>
<p>実行してみます。</p>
<pre class="shell"><code>$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f2, called at src/Lib.hs:6:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib</code></pre>
<p><strong>f1</strong> の <strong>HasCallStack</strong> 制約を取り除いた影響により、先程出力されていた <code>f1, called at app/Main.hs:6:8 in main:Main</code> が出なくなりました。</p>
<p>しかし、依然として <strong>f2</strong> と <strong>f3</strong> のバックトレースは取得できています。そのため、本当に全てのバックトレースを取得したい場合は全ての関数に <strong>HasCallStack</strong> 制約を追加しなけばなりません。</p>
<h3 id="f1-と-f3-にのみ-hascallstack-制約を追加する">f1 と f3 にのみ HasCallStack 制約を追加する</h3>
<p>次に中間の <strong>f2</strong> の <strong>HasCallStack</strong> 制約を取り除いてみましょう。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" title="2"></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="kw">import</span> <span class="dt">GHC.Stack</span></a>
<a class="sourceLine" id="cb9-4" title="4"></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="ot">f1 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb9-6" title="6">f1 <span class="fu">=</span> f2</a>
<a class="sourceLine" id="cb9-7" title="7"></a>
<a class="sourceLine" id="cb9-8" title="8"><span class="ot">f2 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb9-9" title="9">f2 <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb9-10" title="10"></a>
<a class="sourceLine" id="cb9-11" title="11"><span class="ot">f3 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb9-12" title="12">f3 <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;f3&quot;</span></a></code></pre></div>
<p>実行してみます。</p>
<pre class="shell"><code>$ stack build
...
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
  f3, called at src/Lib.hs:9:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib</code></pre>
<p>今度は <strong>f2</strong> と <strong>f1</strong> の両方の情報がが抜け落ちてしまいました。<strong>f2</strong> で <strong>HasCallStack</strong> の伝搬がストップしてしまったということです。</p>
<h3 id="f1-と-f2-のみに-hascallstack-を追加する">f1 と f2 のみに HasCallStack を追加する</h3>
<div class="sourceCode" id="cb11"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-2" title="2"></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="kw">import</span> <span class="dt">GHC.Stack</span></a>
<a class="sourceLine" id="cb11-4" title="4"></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="ot">f1 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb11-6" title="6">f1 <span class="fu">=</span> f2</a>
<a class="sourceLine" id="cb11-7" title="7"></a>
<a class="sourceLine" id="cb11-8" title="8"><span class="ot">f2 ::</span> <span class="dt">HasCallStack</span> <span class="ot">=&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb11-9" title="9">f2 <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb11-10" title="10"></a>
<a class="sourceLine" id="cb11-11" title="11"><span class="ot">f3 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb11-12" title="12">f3 <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;f3&quot;</span></a></code></pre></div>
<pre class="shell"><code>$ stack build
$ stack exec example
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:12:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
...</code></pre>
<p>予想通り <strong>f1</strong>, <strong>f2</strong>, <strong>f3</strong> の全ての情報が途絶えましたね・・・。</p>
<h2 id="hascallstack-を省略したままバックトレースを取りたい">HasCallStack を省略したままバックトレースを取りたい</h2>
<p>先程の結果を見たとおり、正確な情報を取得するためには全ての関数に <strong>HasCallStack</strong> 制約を追加する必要がありそうです。</p>
<p>しかしながら、規模が大きくなってくるとそんなの不可能ですよね。</p>
<p>そんな時には <code>stack</code> の <code>--profile</code> オプションと <code>+RTS -xc</code> オプションを利用します。(<code>--profile</code> オプションは <strong>ghc</strong> のオプションを良い感じに追加してくれます)</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode hs"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" title="2"></a>
<a class="sourceLine" id="cb13-3" title="3"><span class="ot">f1 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb13-4" title="4">f1 <span class="fu">=</span> f2</a>
<a class="sourceLine" id="cb13-5" title="5"></a>
<a class="sourceLine" id="cb13-6" title="6"><span class="ot">f2 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb13-7" title="7">f2 <span class="fu">=</span> f3</a>
<a class="sourceLine" id="cb13-8" title="8"></a>
<a class="sourceLine" id="cb13-9" title="9"><span class="ot">f3 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb13-10" title="10">f3 <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;f3&quot;</span></a></code></pre></div>
<p>上記のような素のコードに対しても、同様にバックトレースが取得できるようになります。</p>
<pre class="shell"><code>$ stack build --profile
...
$ stack exec -- example +RTS -xc
*** Exception (reporting due to +RTS -xc): (THUNK_2_0), stack trace:
  Lib.f3,
  called from Lib.CAF:f3
  --&gt; evaluated by: Lib.CAF:f2
  --&gt; evaluated by: Lib.CAF:f1
  --&gt; evaluated by: Main.CAF:main
example: f3
CallStack (from HasCallStack):
  error, called at src/Lib.hs:10:6 in backtrace-example-0.1.0.0-hgO68xdg85BUcmGsdFId:Lib
CallStack (from -prof):
  Lib.f3 (src/Lib.hs:10:1-15)
  Lib.CAF:f3 (src/Lib.hs:10:1-2)</code></pre>
<p>なんか沢山表示されますが、<code>reporting due to +RTS -xc</code> の部分を見ると、しっかりとバックトレースが取得できています。</p>
<h2 id="まとめ">まとめ</h2>
<ul>
<li><strong>HasCallStack</strong> を使うとバックトレースが取得できる</li>
<li><code>stack build --profile</code> でビルドする</li>
<li><code>stack exec -- &lt;exe&gt; +RTS -xc</code> を使えば、明示的に <strong>HasCallStack</strong> を追加しなくても、バックトレースが取得できる</li>
<li>アプリケーションのコードに対して有効</li>
</ul>
<p>参考</p>
<ul>
<li><a href="https://blog.miz-ar.info/2018/01/debugging-haskell-program/#HasCallStack">Haskell でのデバッグ手法あれこれ</a></li>
<li><a href="https://github.com/commercialhaskell/stack/blob/master/doc/GUIDE.md#debugging">Debugging – stack document</a></li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#rts-flag--xc">-xc option – GHC Users Guide</a></li>
</ul>
<p>以上です。</p>]]></summary>
</entry>
<entry>
    <title>stack-1.11 から location に extra-dep を指定できなくなります。</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/08-31-stack-extradep-legacy-syntax.html</id>
    <published>2018-08-31T00:00:00Z</published>
    <updated>2018-08-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>まだまだ先の話ですが、<code>extra-dep</code> の書き方が <strong>Legacy syntax</strong> になりました。<code>stack-1.11</code> からはビルドできなくなります。</p>
<p>以下の設定例は<a href="https://github.com/commercialhaskell/stack/blob/master/doc/yaml_configuration.md#packages">公式ドキュメント</a>の例を少し変更したものです。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">-</span> <span class="fu">location:</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="fu">git:</span><span class="at"> https://github.com/bitemyapp/esqueleto.git</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="fu">commit:</span><span class="at"> 08c9b4cdf977d5bcd1baba046a007940c1940758</span></a>
<a class="sourceLine" id="cb1-6" title="6">  <span class="fu">extra-dep:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">-</span> <span class="fu">location:</span></a>
<a class="sourceLine" id="cb1-8" title="8">    ./submodules/haskell-lsp</a>
<a class="sourceLine" id="cb1-9" title="9">  <span class="fu">extra-dep:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="fu">subdirs:</span></a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="kw">-</span> .</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="kw">-</span> haskell-lsp-types</a>
<a class="sourceLine" id="cb1-13" title="13"></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb1-15" title="15">  <span class="kw">-</span> streaming-commons-0.2.0.0</a></code></pre></div>
<p>修正方法は、設定ファイルの <code>packages</code> に <code>extra-dep: true</code> と指定している部分を、以下のように <code>extra-deps</code> へ追加するだけです。また、 <code>subdirs</code> を指定している場合は単純に分割して指定します。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb2-5" title="5">  <span class="kw">-</span> <span class="fu">git:</span><span class="at"> https://github.com/bitemyapp/esqueleto.git</span></a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="fu">commit:</span><span class="at"> 08c9b4cdf977d5bcd1baba046a007940c1940758</span></a>
<a class="sourceLine" id="cb2-7" title="7">  <span class="kw">-</span> ./submodules/haskell-lsp</a>
<a class="sourceLine" id="cb2-8" title="8">  <span class="kw">-</span> ./submodules/haskell-lsp/haskell-lsp-types</a>
<a class="sourceLine" id="cb2-9" title="9">  <span class="kw">-</span> streaming-commons-0.2.0.0</a></code></pre></div>
<p><code>extra-deps</code> の構文は従来の <code>stack</code> でも使えるので、今から対応しておいても問題ないと思います。</p>
<p>以上です。</p>
<!--more-->]]></summary>
</entry>
<entry>
    <title>RecordWildCards と Reader モナド</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018/08-26-recordwildcards.html</id>
    <published>2018-08-26T00:00:00Z</published>
    <updated>2018-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p><code>Twitter</code> で <code>RecordWildCards</code> の話が流れて来たので <code>Reader</code> モナドと組み合わせた例を1つご紹介します。</p>
<p>この書き方は <span class="citation" data-cites="fumieval">@fumieval</span> さんが使っていてカッコイイ書き方だなぁと思った記憶があります。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="ot">{-# LANGUAGE RecordWildCards #-}</span></a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb1-4" title="4">  {<span class="ot"> personName ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-5" title="5">  ,<span class="ot"> personAge  ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-6" title="6">  }</a>
<a class="sourceLine" id="cb1-7" title="7"></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="ot">func ::</span> <span class="dt">Reader</span> <span class="dt">Person</span> ()</a>
<a class="sourceLine" id="cb1-9" title="9">func <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \<span class="dt">Person</span> {<span class="fu">..</span>} <span class="ot">-&gt;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="fu">...</span> <span class="co">-- personName, personAge という名前でそのまま値を利用できる</span></a></code></pre></div>
<p><code>RecordWildCards</code> に関しては既に色んな方が記事にしてくれているので、そちらをご参照ください。</p>
<ul>
<li><a href="https://haskell.jp/blog/posts/2018/about-ghc-exts-1.html">GHC拡張ノック(Part 1)</a></li>
<li><a href="http://rf0444.hatenablog.jp/entry/20120617/1339910411">Haskellの言語拡張たち 2</a></li>
<li><a href="http://fumieval.hatenablog.com/entry/2016/12/18/181540">波打たせるものの正体(エクステンシブル・タングル)</a></li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-wildcards">GHC user guide 10.5.5. Record wildcards</a></li>
</ul>
<!--more-->
<h2 id="具体例">具体例</h2>
<p>あまり良い例が思いつかなかったのですが、 <code>Env</code> に必要な情報を持たせておけば任意のタイミングで利用できて便利です。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="ot">#!/usr/bin/env stack</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="co">-- stack script --resolver lts-12.7</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="ot">{-# LANGUAGE RecordWildCards #-}</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></a>
<a class="sourceLine" id="cb2-5" title="5"></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="kw">import</span>           <span class="dt">Control.Monad.IO.Class</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="kw">import</span>           <span class="dt">Control.Monad.Trans.Reader</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="kw">import</span>           <span class="dt">Data.IORef</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="kw">import</span>           <span class="dt">Data.Time.LocalTime</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">import</span>           <span class="dt">Path</span></a>
<a class="sourceLine" id="cb2-11" title="11"></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="kw">data</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Env</span></a>
<a class="sourceLine" id="cb2-13" title="13">  {<span class="ot"> envCounter  ::</span> <span class="dt">IORef</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb2-14" title="14">  ,<span class="ot"> envLogPath  ::</span> <span class="dt">Path</span> <span class="dt">Rel</span> <span class="dt">File</span></a>
<a class="sourceLine" id="cb2-15" title="15">  ,<span class="ot"> envUserName ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb2-16" title="16">  }</a>
<a class="sourceLine" id="cb2-17" title="17"></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-19" title="19">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-20" title="20">  counter <span class="ot">&lt;-</span> newIORef <span class="dv">0</span></a>
<a class="sourceLine" id="cb2-21" title="21">  <span class="kw">let</span> env <span class="fu">=</span> <span class="dt">Env</span></a>
<a class="sourceLine" id="cb2-22" title="22">        { envCounter  <span class="fu">=</span> counter</a>
<a class="sourceLine" id="cb2-23" title="23">        , envLogPath  <span class="fu">=</span> <span class="fu">$</span>(mkRelFile <span class="st">&quot;./output.log&quot;</span>)</a>
<a class="sourceLine" id="cb2-24" title="24">        , envUserName <span class="fu">=</span> <span class="st">&quot;wado&quot;</span></a>
<a class="sourceLine" id="cb2-25" title="25">        }</a>
<a class="sourceLine" id="cb2-26" title="26"></a>
<a class="sourceLine" id="cb2-27" title="27">  runReaderT (access <span class="fu">&gt;&gt;</span> access <span class="fu">&gt;&gt;</span> access) env</a>
<a class="sourceLine" id="cb2-28" title="28"></a>
<a class="sourceLine" id="cb2-29" title="29">  n <span class="ot">&lt;-</span> readIORef counter</a>
<a class="sourceLine" id="cb2-30" title="30">  <span class="fu">putStrLn</span> <span class="fu">$</span> <span class="fu">mconcat</span> [<span class="st">&quot;counter = &quot;</span>, <span class="fu">show</span> n]</a>
<a class="sourceLine" id="cb2-31" title="31"></a>
<a class="sourceLine" id="cb2-32" title="32"><span class="ot">access ::</span> <span class="dt">ReaderT</span> <span class="dt">Env</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb2-33" title="33">access <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \<span class="dt">Env</span> {<span class="fu">..</span>} <span class="ot">-&gt;</span> liftIO <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-34" title="34">  modifyIORef envCounter (<span class="fu">+</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb2-35" title="35">  now <span class="ot">&lt;-</span> getZonedTime</a>
<a class="sourceLine" id="cb2-36" title="36">  <span class="fu">appendFile</span> (toFilePath envLogPath)</a>
<a class="sourceLine" id="cb2-37" title="37">    <span class="fu">$</span> <span class="fu">mconcat</span> [envUserName, <span class="st">&quot;: &quot;</span>, <span class="st">&quot;access&quot;</span>, <span class="st">&quot; (&quot;</span>, <span class="fu">show</span> now, <span class="st">&quot;)&quot;</span>, <span class="st">&quot;\n&quot;</span>]</a>
<a class="sourceLine" id="cb2-38" title="38">  <span class="fu">return</span> ()</a></code></pre></div>
<h3 id="実行結果">実行結果</h3>
<pre class="shell"><code>$ ./Sample.hs
counter = 3

$ cat ./output.log
wado: access (2018-08-26 14:04:07.132813451 JST)
wado: access (2018-08-26 14:04:07.133330363 JST)
wado: access (2018-08-26 14:04:07.133389916 JST)</code></pre>
<h2 id="missing-fields-警告">missing-fields 警告</h2>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="ot">{-# LANGUAGE RecordWildCards #-}</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb4-4" title="4">  {<span class="ot"> personName ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb4-5" title="5">  ,<span class="ot"> personAge  ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb4-6" title="6">  } <span class="kw">deriving</span> <span class="dt">Show</span></a>
<a class="sourceLine" id="cb4-7" title="7"></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="ot">f ::</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb4-9" title="9">f <span class="fu">=</span> <span class="dt">Person</span> { <span class="fu">..</span> }</a>
<a class="sourceLine" id="cb4-10" title="10">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-11" title="11">    personName <span class="fu">=</span> <span class="st">&quot;bigmoon&quot;</span></a></code></pre></div>
<p>上記のようにフィールドが全て初期化されていないコードはコンパイル時に <code>missing-fields</code> 警告が出ます。</p>
<p>この警告を無視すると実行時エラーになる可能性があります。無視せずにしっかり修正しましょう。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1">warning<span class="fu">:</span> [<span class="fu">-</span><span class="dt">Wmissing</span><span class="fu">-</span>fields]</a>
<a class="sourceLine" id="cb5-2" title="2">    • <span class="dt">Fields</span> <span class="kw">of</span> ‘<span class="dt">Person</span>’ <span class="fu">not</span> initialised<span class="fu">:</span> personAge</a>
<a class="sourceLine" id="cb5-3" title="3">    • <span class="dt">In</span> the expression<span class="fu">:</span> <span class="dt">Person</span> {<span class="fu">..</span>}</a>
<a class="sourceLine" id="cb5-4" title="4">      <span class="dt">In</span> an equation for ‘f’<span class="fu">:</span></a>
<a class="sourceLine" id="cb5-5" title="5">          f <span class="fu">=</span> <span class="dt">Person</span> {<span class="fu">..</span>}</a>
<a class="sourceLine" id="cb5-6" title="6">            <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-7" title="7">                personName <span class="fu">=</span> <span class="st">&quot;bigmoon&quot;</span></a>
<a class="sourceLine" id="cb5-8" title="8">   <span class="fu">|</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="dv">46</span> <span class="fu">|</span> f <span class="fu">=</span> <span class="dt">Person</span> { <span class="fu">..</span> }</a>
<a class="sourceLine" id="cb5-10" title="10">   <span class="fu">|</span></a></code></pre></div>
<p>ちなみに、通常のレコード構文でもフィールドが部分的にしか初期化されていない場合は、同様の警告がでます。(<span class="citation" data-cites="fumieval">@fumieval</span> さん、ご指摘ありがとうございます)</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">data</span> <span class="dt">Person</span> <span class="fu">=</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb6-2" title="2">  {<span class="ot"> personName ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb6-3" title="3">  ,<span class="ot"> personAge  ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb6-4" title="4">  } <span class="kw">deriving</span> <span class="dt">Show</span></a>
<a class="sourceLine" id="cb6-5" title="5"></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="ot">f ::</span> <span class="dt">Person</span></a>
<a class="sourceLine" id="cb6-7" title="7">f <span class="fu">=</span> <span class="dt">Person</span> { personName <span class="fu">=</span> <span class="st">&quot;bigmoon&quot;</span> }</a></code></pre></div>
<ul>
<li><a href="https://ghc.haskell.org/trac/ghc/ticket/5334">record wildcards: field not initialised reported as type error</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<ul>
<li>RecordWildCards 言語拡張は現実世界ではとても便利 (レコードのフィールドがかなり沢山あったりするので)</li>
<li>Reader とかと組み合わせるとオシャレ</li>
<li>GHC の <code>missing-fields</code> 警告は絶対に無視しない (実行時エラーが発生する可能性がある)</li>
</ul>
<p>以上です。</p>]]></summary>
</entry>

</feed>

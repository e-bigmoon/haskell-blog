<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>BIG MOON</title>
    <link href="https://haskell.e-bigmoon.com/feed.xml" rel="self" />
    <link href="https://haskell.e-bigmoon.com" />
    <id>https://haskell.e-bigmoon.com/feed.xml</id>
    <author>
        <name>BIG MOON</name>
        <email>it@e-bigmoon.com</email>
    </author>
    <updated>2018-03-01T00:00:00Z</updated>
    <entry>
    <title>Liquid Haskell</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-03-01-liquidhaskell.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-03-01-liquidhaskell.html</id>
    <published>2018-03-01T00:00:00Z</published>
    <updated>2018-03-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>Liquid Haskell で少しハマったのでメモとして残しておきます。</p>
<p>本来なら先に仕様を書いて実装を書くべきだと思いますが、今回の例は既存のコードにリファインメント型をつけるような場合を想定しています。</p>
<pre class="shell"><code>$ liquid
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.</code></pre>
<p>Liquid Haskell を気になってる人向けの記事です。</p>
<!--more-->
<h2 id="やりたいこと">やりたいこと</h2>
<p>データの挿入と更新操作を次のような型で表現します。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Operation</span> <span class="fu">=</span> <span class="dt">Insert</span> <span class="fu">|</span> <span class="dt">Update</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">  <span class="kw">deriving</span> <span class="dt">Eq</span></a></code></pre></div>
<p>上記のデータ型を使って、次のような関数を定義します。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">adjustBound ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">adjustBound op lower upper n <span class="fu">|</span> isInsert op <span class="fu">=</span> upper <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">                             <span class="fu">|</span> otherwise   <span class="fu">=</span> lower <span class="ot">`max`</span> (n <span class="ot">`min`</span> upper)</a>
<a class="sourceLine" id="cb3-4" data-line-number="4"></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="ot">isInsert ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">isInsert <span class="dt">Insert</span> <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">isInsert _      <span class="fu">=</span> <span class="dt">False</span></a></code></pre></div>
<p><code>adjustBound</code> 関数は以下のように動作します。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">&gt;</span> adjustBound <span class="dt">Insert</span> <span class="dv">0</span> <span class="dv">10</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="dv">11</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="fu">&gt;</span> adjustBound <span class="dt">Insert</span> <span class="dv">0</span> <span class="dv">10</span> <span class="dv">100</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="dv">11</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5"><span class="fu">&gt;</span> adjustBound <span class="dt">Insert</span> <span class="dv">0</span> <span class="dv">10</span> (<span class="fu">-</span><span class="dv">100</span>)</a>
<a class="sourceLine" id="cb4-6" data-line-number="6"><span class="dv">11</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"></a>
<a class="sourceLine" id="cb4-8" data-line-number="8"><span class="fu">&gt;</span> adjustBound <span class="dt">Update</span> <span class="dv">0</span> <span class="dv">10</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9"><span class="dv">5</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10"><span class="fu">&gt;</span> adjustBound <span class="dt">Update</span> <span class="dv">0</span> <span class="dv">10</span> <span class="dv">100</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11"><span class="dv">10</span></a>
<a class="sourceLine" id="cb4-12" data-line-number="12"><span class="fu">&gt;</span> adjustBound <span class="dt">Update</span> <span class="dv">0</span> <span class="dv">10</span> (<span class="fu">-</span><span class="dv">100</span>)</a>
<a class="sourceLine" id="cb4-13" data-line-number="13"><span class="dv">0</span></a></code></pre></div>
<p><code>adjustBound</code> のような関数でバグが無いことを確認するためには何をしたら良いでしょうか？</p>
<p>型は非常に強力ですが、値について何も教えてくれません。</p>
<h2 id="バグの少ない世界を目指して">バグの少ない世界を目指して</h2>
<p>僕が Haskell を使う理由は、第一に <code>楽しい</code> からです。そのため、「勉強しても就職する時に役に立たないでしょ？」などと言われても全く気になりません。(そもそも、就職するために勉強するわけじゃないですよね)</p>
<p>また Haskell を使えば、正しいソフトウェアを普通に作ることができます。また、<code>hspec</code> などで単体テストを書いたり、<code>QuichCheck</code> などでランダムテストを書くことで、過去に起こった問題を再発させないようにする努力や、バグを少なくするための取り組みが行われています。</p>
<p>しかしながら、個人的にはどれもまだ不安です。もしかしたら、チェックしてない部分にバグがあるんじゃないの・・・？</p>
<p>そんな心配性の方は <code>Liquid Haskell (LH)</code> を使いましょう！</p>
<h2 id="型をより厳しく">型をより厳しく</h2>
<p>最初に定義した <code>Operation</code> 型と <code>adjustBound</code> を再掲します。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="co">-- LH.hs</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">module</span> <span class="dt">LH</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">data</span> <span class="dt">Operation</span> <span class="fu">=</span> <span class="dt">Insert</span> <span class="fu">|</span> <span class="dt">Update</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  <span class="kw">deriving</span> <span class="dt">Eq</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="ot">adjustBound ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">adjustBound op lower upper n <span class="fu">|</span> isInsert op <span class="fu">=</span> upper <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9">                             <span class="fu">|</span> otherwise   <span class="fu">=</span> lower <span class="ot">`max`</span> (n <span class="ot">`min`</span> upper)</a>
<a class="sourceLine" id="cb5-10" data-line-number="10"></a>
<a class="sourceLine" id="cb5-11" data-line-number="11"><span class="ot">isInsert ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12">isInsert <span class="dt">Insert</span> <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb5-13" data-line-number="13">isInsert _      <span class="fu">=</span> <span class="dt">False</span></a></code></pre></div>
<p>とりあえず、現在のコードを <code>LH</code> にかけてみます。</p>
<pre class="shell"><code>$ liquid LH.hs
LiquidHaskell Version 0.8.2.4, Git revision d641244775cd842776cecf2c5d3e9afa01549e76 (dirty)
Copyright 2013-18 Regents of the University of California. All Rights Reserved.


**** DONE:  A-Normalization ****************************************************


**** DONE:  Extracted Core using GHC *******************************************


**** DONE:  Transformed Core ***************************************************

Working 100% [=================================================================]

**** DONE:  annotate ***********************************************************


**** RESULT: SAFE **************************************************************</code></pre>
<p><code>RESULT: SAFE</code> が表示されれば問題ありません！</p>
<h3 id="入力を自然数に限定させよう">入力を自然数に限定させよう</h3>
<p>例えば <code>lower</code> と <code>upper</code> が自然数 (0含む) しか許容しないという仕様が与えられた時、どうしますか？</p>
<p>よくある対応としては、コメントにその旨を書いたり、テストを作ったりという作業になるでしょう。</p>
<p><code>Liquid Haskell</code> では上記の仕様を <code>事前条件</code> として記述することができます。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="co">{-@ adjustBound :: _ -&gt; Nat -&gt; Nat -&gt; _ -&gt; _ @-}</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="ot">adjustBound ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">adjustBound op lower upper n <span class="fu">|</span> isInsert op <span class="fu">=</span> upper <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">                             <span class="fu">|</span> otherwise   <span class="fu">=</span> lower <span class="ot">`max`</span> (n <span class="ot">`min`</span> upper)</a></code></pre></div>
<p><code>Nat</code> は <a href="https://github.com/ucsd-progsys/liquidhaskell/blob/develop/include/Prelude.spec">Prelude</a> で以下のように定義されています。つまり、0以上の <code>Int</code> のみを含むリファインメント型です。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">{-@ type Nat = {v: Int | v &gt;= 0 } @-}</span></a></code></pre></div>
<p>これだけです。<code>LH</code> で結果を確かめてみましょう。</p>
<pre class="shell"><code>$ liquid LH.hs
...

**** RESULT: SAFE **************************************************************</code></pre>
<p><code>SAFE</code> ですね！</p>
<p>これでもう <code>adjustBound</code> の <code>lower</code> と <code>upper</code> は <code>0</code> 以上の自然数でしか呼び出されていないことが示されました。</p>
<h3 id="もう少し具体例">もう少し具体例</h3>
<p>では、別のプログラマが <code>adjustBound</code> を利用した関数を作ったとしましょう。この関数自体に意味はないですが、<code>LH</code> を理解するためにはとても良い例だと思います。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">f ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">f <span class="fu">=</span> adjustBound <span class="dt">Insert</span> (<span class="fu">-</span><span class="dv">100</span>) (<span class="fu">-</span><span class="dv">50</span>) (<span class="fu">-</span><span class="dv">70</span>)</a></code></pre></div>
<p>この関数 <code>f</code> は、型が正しいため当然コンパイルできます。</p>
<pre class="shell"><code>$ stack repl -- LH.hs
&gt; f
-49</code></pre>
<p>けれども、僕らの仕様では <code>adjustBound</code> の <code>lower</code> と <code>upper</code> には自然数しか適用してはいけないはずです。</p>
<p>次に <code>LH</code> を実行してみましょう。</p>
<pre class="shell"><code>$ liquid LH.hs
**** RESULT: UNSAFE ************************************************************


 LH.hs:18:25-28: Error: Liquid Type Mismatch

 18 | f = adjustBound Insert (-100) (-50) (-70)
                              ^^^^


   Inferred type
    VV : {v : Int | v == (-?a)
                    &amp;&amp; v == ?b}

  not a subtype of Required type
    VV : {VV : Int | VV &gt;= 0}

  In Context
    ?b : {?b : Int | ?b == (-?a)}

    ?a : {?a : Int | ?a == (100 : int)}


 LH.hs:18:32-34: Error: Liquid Type Mismatch

 18 | f = adjustBound Insert (-100) (-50) (-70)
                                     ^^^


   Inferred type
    VV : {v : Int | v == (-?b)
                    &amp;&amp; v == ?a}

  not a subtype of Required type
    VV : {VV : Int | VV &gt;= 0}

  In Context
    ?b : {?b : Int | ?b == (50 : int)}

    ?a : {?a : Int | ?a == (-?b)}</code></pre>
<p><code>UNSAFE</code> になりましたね。こういうことです。</p>
<p>つまり、<strong>自分たちが使っている範囲</strong>で <code>Liquid Haskell</code> のリファインメント型について、正しく整合性が取れているのかということを判定しています。</p>
<h3 id="戻り値の型も厳しくしよう">戻り値の型も厳しくしよう！</h3>
<p>先程、事前条件についてリファインメント型を書きました。</p>
<p>次は事後条件についてリファインメントを書きましょう！</p>
<p>同様に戻り値の型も自然数という仕様にします。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="co">{-@ adjustBound :: _ -&gt; Nat -&gt; Nat -&gt; _ -&gt; Nat @-}</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="ot">adjustBound ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3">adjustBound op lower upper n <span class="fu">|</span> isInsert op <span class="fu">=</span> upper <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4">                             <span class="fu">|</span> otherwise   <span class="fu">=</span> lower <span class="ot">`max`</span> (n <span class="ot">`min`</span> upper)</a></code></pre></div>
<pre class="shell"><code>$ liquid LH.hs
**** RESULT: SAFE **************************************************************</code></pre>
<p>リファインメント型 (Refinement type) は <code>篩 (ふるい) 型</code> と訳されている本 (<a href="https://taimen.jp/f/389">入門LiquidHaskell−篩型による静的コード解析−</a>) もありますが、それは <code>Haskell</code> の型の値が条件によって <code>ふるい</code> 落とされて、新しい型 (リファインメント型) になっているというイメージから来ているのだと思います。(読んだこと無いので間違ってたらすみません・・・。)</p>
<h2 id="もっと仕様を">もっと仕様を</h2>
<p><code>adjustBound</code> 関数はこれで十分なのでしょうか？人によっては十分だね。と答えるかもしれません。</p>
<p>しかし、今回は次のような仕様を与えることにします。</p>
<ol type="1">
<li><code>upper</code> は <code>lower</code> 以上の自然数</li>
<li><code>Insert</code> の操作の場合の戻り値は <code>lower</code> 〜 <code>upper + 1</code> の間の自然数</li>
<li><code>Update</code> の操作の場合の戻り値は <code>lower</code> 〜 <code>lower `max` (n `min` upper)</code> の間の自然数</li>
</ol>
<p>ここからが面白いところです。</p>
<p>まずは前準備として <code>x 〜 y</code> までの間の自然数を表すリファインメント型と述語を定義します。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="co">{-@ type Btwn Lo Hi = {v:Int | Lo &lt;= v &amp;&amp; v &lt;= Hi} @-}</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="co">{-@ predicate BtwnP Lo Hi = Lo &lt;= v &amp;&amp; v &lt;= Hi @-}</span></a></code></pre></div>
<p>では、<code>仕様1</code>を反映させてみましょう。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="co">{-@ adjustBound :: _ -&gt; l:Nat -&gt; {u:Nat | l &lt;= u} -&gt; _ -&gt; Nat @-}</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"><span class="ot">adjustBound ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">adjustBound op lower upper n <span class="fu">|</span> isInsert op <span class="fu">=</span> upper <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4">                             <span class="fu">|</span> otherwise   <span class="fu">=</span> lower <span class="ot">`max`</span> (n <span class="ot">`min`</span> upper)</a></code></pre></div>
<pre class="shell"><code>$ liquid LH.hs
**** RESULT: SAFE **************************************************************</code></pre>
<p>では次に、<code>仕様2</code> と <code>仕様3</code> です。</p>
<p>リファインメント型は以下のようになります。</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="co">{-@ adjustBound ::</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2"><span class="co">      op:Operation -&gt;</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"><span class="co">      l:Nat -&gt;</span></a>
<a class="sourceLine" id="cb18-4" data-line-number="4"><span class="co">      {u:Nat | l &lt;= u} -&gt;</span></a>
<a class="sourceLine" id="cb18-5" data-line-number="5"><span class="co">      _ -&gt;</span></a>
<a class="sourceLine" id="cb18-6" data-line-number="6"><span class="co">      {v:Nat | if (isInsert op) then (BtwnP l (u+1)) else BtwnP l u }</span></a>
<a class="sourceLine" id="cb18-7" data-line-number="7"><span class="co">@-}</span></a>
<a class="sourceLine" id="cb18-8" data-line-number="8"><span class="ot">adjustBound ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb18-9" data-line-number="9">adjustBound op lower upper n <span class="fu">|</span> isInsert op <span class="fu">=</span> upper <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb18-10" data-line-number="10">                             <span class="fu">|</span> otherwise   <span class="fu">=</span> lower <span class="ot">`max`</span> (n <span class="ot">`min`</span> upper)</a>
<a class="sourceLine" id="cb18-11" data-line-number="11"></a>
<a class="sourceLine" id="cb18-12" data-line-number="12"><span class="co">{-@ measure isInsert @-}</span></a>
<a class="sourceLine" id="cb18-13" data-line-number="13"><span class="ot">isInsert ::</span> <span class="dt">Operation</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb18-14" data-line-number="14">isInsert <span class="dt">Insert</span> <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb18-15" data-line-number="15">isInsert _      <span class="fu">=</span> <span class="dt">False</span></a></code></pre></div>
<pre class="shell"><code>$ liquid LH.hs
**** RESULT: SAFE **************************************************************</code></pre>
<h2 id="はまったポイント">はまったポイント</h2>
<p><code>if (isInsert op) then (BtwnP l (u+1)) else BtwnP l u</code> の部分でかなりはまりました。</p>
<p>例えば <code>if</code> の括弧を外した場合は次のようなエラーになります。</p>
<p><code>if isInsert op then (BtwnP l (u+1)) else BtwnP l u</code></p>
<pre class="shell"><code>**** RESULT: ERROR *************************************************************


 LH.hs:10:73: Error: Cannot parse specification:

 10 | {-@ adjustBound :: op:Operation -&gt; l:Nat -&gt; {u:Nat | l &lt;= u}  -&gt; _ -&gt; {v:Nat | if isInsert op then (BtwnP l (u+1)) else BtwnP l u } @-}
                                                                              ^

     unexpected &quot;:&quot;
     expecting operator, white space or &quot;}&quot;</code></pre>
<p>また、同様に <code>then</code> の括弧を外してもエラーになります。</p>
<p><code>if (isInsert op) then BtwnP l (u+1) else BtwnP l u</code></p>
<pre class="shell"><code>**** RESULT: ERROR *************************************************************


 LH.hs:10:73: Error: Cannot parse specification:

 10 | {-@ adjustBound :: op:Operation -&gt; l:Nat -&gt; {u:Nat | l &lt;= u}  -&gt; _ -&gt; {v:Nat | if (isInsert op) then BtwnP l (u+1) else BtwnP l u } @-}
                                                                              ^

     unexpected &quot;:&quot;
     expecting operator, white space or &quot;}&quot;</code></pre>
<p><code>else</code> については括弧があっても無くても <code>SAFE</code> です。</p>
<p>この挙動が本当にわからなくてつらかったです・・・。</p>
<p>ちなみに、以下のような場合も同様にはまるので、ご注意ください。</p>
<pre><code>-- UNSAFE
{-@ adjustBound :: _ -&gt; l:Nat -&gt; {u:Nat | l &lt;= u}  -&gt; _ -&gt; Btwn l (u+1) @-}
{-@ adjustBound :: _ -&gt; l:Nat -&gt; {u:Nat | l &lt;= u}  -&gt; _ -&gt; Btwn l {u+1} @-}

-- SAFE
{-@ adjustBound :: _ -&gt; l:Nat -&gt; {u:Nat | l &lt;= u}  -&gt; _ -&gt; Btwn {l} {u+1} @-}</code></pre>
<h2 id="まとめ">まとめ</h2>
<ul>
<li><code>if</code> を使う場合は多めに括弧を付けておいた方が良さそう。</li>
<li><code>{}</code> で囲むと上手くいく場合もある</li>
<li><code>LiquidHaskell</code> はすごい</li>
</ul>
<p>この良くわからない挙動について一緒に考えてくれた友人の tkg さんありがとうございました。</p>
<p>以上です。</p>]]></summary>
</entry>
<entry>
    <title>debug パッケージのアナウンス (翻訳)</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-02-26-Announcing-the-debug-package.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-02-26-Announcing-the-debug-package.html</id>
    <published>2018-02-26T00:00:00Z</published>
    <updated>2018-02-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="debug-パッケージのアナウンス-翻訳">debug パッケージのアナウンス (翻訳)</h2>
<p>Original post: <a href="http://neilmitchell.blogspot.jp/2017/12/announcing-debug-package.html">Announcing the ‘debug’ package</a></p>
<p>Haskell は素晴らしい言語ですが、Haskell のデバッグは間違いなく弱い部分です。この問題をどうにかするために、<a href="https://hackage.haskell.org/package/debug">debug ライブラリ</a> をリリースしました。このライブラリは全てのことを解決するのではなく、一般的なデバッグのタスクに対してシンプルで簡単に使えるような設計を目指しました。デバッグをするにあたって、みなさんが興味を持ってくれるような関数を例に取って見てみましょう。</p>
<!--more-->
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">module</span> <span class="dt">QuickSort</span>(quicksort) <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.List</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="ot">quicksort ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]</a>
<a class="sourceLine" id="cb1-5" data-line-number="5">quicksort [] <span class="fu">=</span> []</a>
<a class="sourceLine" id="cb1-6" data-line-number="6">quicksort (x<span class="fu">:</span>xs) <span class="fu">=</span> quicksort lt <span class="fu">++</span> [x] <span class="fu">++</span> quicksort gt</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="kw">where</span> (lt, gt) <span class="fu">=</span> partition (<span class="fu">&lt;=</span> x) xs</a></code></pre></div>
<p><code>TemplateHaskell</code> と <code>ViewPatterns</code> を有効にしてから、<code>Debug</code> をインポートし、コードをインデントして <code>debug</code> の引数に渡してやりましょう。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">{-# LANGUAGE TemplateHaskell, ViewPatterns #-}</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">module</span> <span class="dt">QuickSort</span>(quicksort) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.List</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Debug</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">debug [d|</a>
<a class="sourceLine" id="cb2-7" data-line-number="7">   quicksort :: Ord a =&gt; [a] -&gt; [a]</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">   quicksort [] = []</a>
<a class="sourceLine" id="cb2-9" data-line-number="9">   quicksort (x:xs) = quicksort lt ++ [x] ++ quicksort gt</a>
<a class="sourceLine" id="cb2-10" data-line-number="10">       where (lt, gt) = partition (&lt;= x) xs</a>
<a class="sourceLine" id="cb2-11" data-line-number="11">   |]</a></code></pre></div>
<p>以下のコマンドでデバッガを走らせることができます。</p>
<pre class="shell"><code>$ ghci QuickSort.hs
GHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling QuickSort        ( QuickSort.hs, interpreted )
Ok, 1 module loaded.
*QuickSort&gt; quicksort &quot;haskell&quot;
&quot;aehklls&quot;
*QuickSort&gt; debugView</code></pre>
<p><code>debugView</code> を呼ぶと Webブラウザが起動して、記録されたデバッグの結果を見ることができます。こんな感じです。</p>
<figure>
<img src="https://cdn.rawgit.com/ndmitchell/debug/f6e8dbc9/debug.png" alt="debugView の実行結果" /><figcaption>debugView の実行結果</figcaption>
</figure>
<p>ここから、計算の経過をクリックしつつ探すことができます。</p>
<p>私は <code>debug</code> を使った感想や、これを改善できるようなアイディアを求めています。そのため、フィードバックや<a href="https://github.com/ndmitchell/debug/issues">バグトラッカー</a>経由のお手伝いなどをお待ちしています。</p>
<p>また別の Haskell のデバッガに興味があるのなら、<a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-debugger">GHCi デバッガ</a>や <a href="https://hackage.haskell.org/package/Hoed">Hood/Hoed</a> などを試してみるべきでしょう。</p>]]></summary>
</entry>
<entry>
    <title>SLURP (翻訳)</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-02-25-SLURP.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-02-25-SLURP.html</id>
    <published>2018-02-25T00:00:00Z</published>
    <updated>2018-02-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="slurp">SLURP</h2>
<p>Great original post: <a href="https://www.snoyman.com/blog/2018/01/slurp">SLURP</a></p>
<p>すでにコミュニティの多くの人々が SLURP の提案を見ていると思います。何人かの人たちに私の意見を聞かれたり、私が議論に参加しないことについて、まぁいろいろな意見をもらいました。この議題を私が避けてきた理由を今ここで書かせてください。作者はその提案をリリース前に教えてくれましたが、その時はサポートしないことを伝えました。私はまた、失礼にならないような形で SLURP へのコメントを控えていることも伝えました。残念ながら、その結果2つのことが起こりました。</p>
<ul>
<li>人によっては、とても良くない影響を与えてしまいました。</li>
<li>“fork” という用語の使い方の誤解、そして残念ながら作者はその間違いを訂正していません。</li>
</ul>
<p>つまりまとめると: 提案は私のものではなく、変更を頼んだわけでも、誰かの頭に銃を向けているわけでもありません。この説明は間違っています。他に出すことができるコメントはいくらでもありますが、正直価値はないでしょう。</p>
<p>間違ってはいないことは、私は日常的に多くの人や Haskell のコミュニティやエコシステムマネジメントチームと直面している問題についてコミュニケーションを取っています。仕事で幅広いユーザーと交流し、不満を聞けばそれを誰かに伝えます。私も不満を持つことがあって、それを誰かに聞いてもらいます。この不満の中には、全てが同じようなものを指しているものもあります。</p>
<p>私が公開できる情報というのは限られています。なぜなら、私に寄せられるかなり多くのコメントが、公にされることを嫌うようなプライベートなメールで書かれているからです。そして経験上、私のことを嘘つきだと誹謗中傷する人たちがいることも分かっています。この絶え間ない誹謗中傷を理由に発言を避けてきましたが、私はここに残しておくべきだと決断しました。わかったのは次の2つのことです。</p>
<ul>
<li>私のやること成すこと全てが悪だと信じている人は、私が何か根拠を持っていてもそれを見ようとはしません。</li>
<li>私が悪魔ではないという可能性を否定しない人は、もしかしたら私の声明をその通りに受け取ってくれるかもしれないということです。</li>
</ul>
<p>以前の私は、アーキテクチャとエコシステム開発についてオープンに議論していました。これはオープンソースコミュニティを作る唯一無二の方法だと私は信じています。Stack 対 cabal の時代の緊張が最も高まったときに、多くの人がオープンな議論に異論を唱えたため、私はより静かなコミュニケーションのチャネルに移ることにしました。これはとても残念なことだったと感じています。私はエコシステムの計画についてもっとオープンに、声高に議論をしたいと思っています。他の人たちが簡単に情報にたどり着けるようにしたいと思っています。私は閉じた扉の裏側で全てを議論することを強く反対します。オープンな議論が再開できるかどうかはいずれわかることでしょう。</p>
<!--more-->
<h2 id="fork-ってなに">“fork” ってなに?</h2>
<p>SLURP に関する議論の大部分が SLURP そのものとはなんの関係もないことは明らかですが、fork に関するコメントは関係があります。作者がドキュメントの中で fork という言葉を使うつもりだったのなら、まずは fork についてしっかりと説明することが望ましかったのではないでしょうか。これから Stackage と Stack の世界で使われている fork という言葉の意味について、私が知っていることをお話しようと思います。この話が本当に作者たちの意図を反映しているのかどうか、それは作者たちの発言を待って確認するしかありません。</p>
<p>ここでいう “fork” という用語は、「何かソフトウェアのプロジェクトを取ってきて、ソースコードを他の場所にホストして、別名で開発を続ける」といった文字通りの意味で使われているわけではありません (私の定義ですが)。この用語は、より一般的なものです。例えば、Stack はコードなんて何も共有していないのに、多くの人に cabal-install の fork だと言われています (もちろん、Cabal のようなベースとなるライブラリは共有していますが)。</p>
<p>誰もが固執していることについて、明確に言及しておきましょう。誰もが考えるような Hackage の直接の競争相手を作ろうとするやりとりには、全く関わっていません。私が知っている人で、こういうことをしたい人はいませんし、私もしたくありません。なぜなら、今日の Stackage と Stack は Hackage あってこそのものだからです。そして私の知人で、この構図を変えたい人は誰一人としていません。Hackage をコントロールしたいなどと考えている人はいないのです。</p>
<p>Hackage の “fork” というと、論理的にそういう結論に至るかもしれませんが、そうではないのです。</p>
<p>次に、この “fork” に関する具体的な頭痛のタネについてお話しましょう。</p>
<h2 id="hackage-のリビジョン">Hackage のリビジョン</h2>
<p>多くの人が Hackage のリビジョンについて嫌悪感を示しています。私も Hackage リビジョンは嫌いです。そして、他の誰よりも嫌悪感を抱く理由を持っています。私は数週間から数ヶ月ほどの自分の人生を使って、いくつかのツールにリビジョンをサポートさせたことがあります。この凄惨な歴史を辿ることもできますが、プログラマの戦記になるだけで価値はないでしょう。それよりも今に向き合うことにします。</p>
<p>私はついに Stack 1.6 で、リビジョンの指定 (pinning) を完全にサポートしました。Stackage は既に長い間リビジョンの指定をサポートし続けています。Stackage にはいくつかのパッケージのリビジョンを無視しているものとしてリストアップする機能があります。</p>
<p>もし仮に、今聞かれたら私はリビジョンが悪いアイディアで、無効にすべきだと答えるでしょう。そして、依存関係の解決に関する問題について、より良い解決方法があると依然として答えるでしょう (これらについては、過去に長々と議論したことがあります)。同時に、そのコストは下がっています。ユーザーが extra-deps に特定のリビジョンを付けていないこと、そして Hackage におけるリビジョンのルールが緩すぎることについては実際、いまだに心配です。これについて懸念を抱いていることは確かですが、私の中の最優先事項ではありません。</p>
<p>ところが他の人は違う考えを持っているようです。私は Hackage Truestee が強制的に cabalファイルを編集することについて腹を立てている多くの人を知っています。彼らに反対することはありませんが、この話題に情熱を持っているわけでもありません。コミュニティのリーダーとの会話の中で、私はこの区別を明確に強調しました (少なくともそうしようとはしました)。</p>
<p>リビジョンに関する最大の懸念は、それの持つ社会的な影響です。すなわち、誰か別のものが自分のビルドの安定性を担うということです。これまでに何度も言及してきましたが、社会的緊張の原因の最たるものに、ビルドがいきなり止まったので上流の開発者に文句を言う、というものがあります。これは大惨事への第一歩で、PVP (Package Versioning Policy) + 依存解決という手法が持つ原理的な欠陥でした。そのため、固定ビルドプランに焦点を当てたツールが必要となるのです。私はこれを何年も主張してきましたが、結局は上流を説得することができなかったので Stack を大々的に作りました。</p>
<p>以上のことから、リビジョンとはフォークのような何かなのでしょうか? 違います。</p>
<h2 id="キュレーション">キュレーション</h2>
<p>数週間前、私はこんなツイートをしました。</p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
I did that initially. When collaborating on GPS Haskell, I removed that functionality as a requirement of the Hackage, Cabal, and Haskell Platform teams. Then GPS died and we're stuck unable to work around upstream breakage like this.
</p>
— Michael Snoyman (<span class="citation" data-cites="snoyberg">@snoyberg</span>) <a href="https://twitter.com/snoyberg/status/949385673982730240?ref_src=twsrc%5Etfw">January 5, 2018</a>
</blockquote>
<p>Stackage のオリジナルデザインは、標準的な Linux ディストリビューションモデルに準拠していました。Hackage は私たちの上流でしたが、バージョンの境界が大きく壊れるのを防ぐために一連のパッチを整備し、あまりありませんでしたが時折 (たとえそうでも、正直覚えていませんが)、バグを修正するためにソースを編集したりしました。</p>
<p>2014年に Stackage を cabal と Haskell のプラットフォームに組み込む計画 (GPS Haskell のコードネームで開発していました。それが地面から飛び立つことは一度もありませんでしたが) について議論をしたとき、cabal, Hackage, そして Haskell Platform のメンテナに、ローカルの変更を Stackage が整備しないことを要求されました。なので私はその機能を削除したのですが、それは私たちが今までいた世界の話です。</p>
<p>この機能を復活させるかどうかは再検討中です。その理由を簡潔に説明しますと、これはフォークと捉えることができます。ソフトフォークと呼ぶ人もいるかもしれません。正直なところ、一連のパッチを整備するのは重労働なので Stackage に追加し直したい機能ではありません。しかし、多くのコミュニティがこの作業を必要としています。私がこのことを理解しているように、Nix も理解しています。もしもこれをフォークと言うのなら、私たちのエコシステムに広く浸透しているフォークなんでしょう。</p>
<p>このキュレーションで扱う理由としては、新しい依存バージョンへの更新が遅いパッケージを避けるため、というものがあります。Stackage のパッケージメンテナにとって、誰か他の人がその上限に満足しないからといって、自分のパッケージのバージョンを下げるのはかなりイライラするものがあるでしょう。キュレーションはこの辺の問題を何とかできるかもしれません。私はこれをおまけの特典のように考えていますが、必要なものではないです。</p>
<p>しかし、キュレーションには cabal-install 界隈では問題になっていないものの、Stackage や Stack 界隈で問題を引き起こしているパッケージをどうにかする、というもっと重要な理由があります。ここ数ヶ月の間に何回も問題が起こるまで、私は本当の問題だとは認識していませんでした。<a href="https://github.com/haskell-hvr/cassava/pull/155">例えばこんな例があります</a></p>
<p>私はこの記事で、作者の誰かに何かを要求するつもりはありません。でも私は結局、これらの類の問題に多くの自分の時間を費やして対処してきています。これが現実です。私の友達や同僚は、緊急のリリースポイントを切ったり、様々な持ち越し作業に巻き込まれています。Cabal のライブラリの仕様に明記されているべきだが文書化されていないような何かのために、多くの時間を割いて Stack を変更しなければならないような現状に私の人生を浪費したくはありません。</p>
<p>Hackage は cabal-install を壊さないために、既に大きな苦労をしています。多くの人が、 <code>^&gt;=</code> 演算子の導入がどのように Stack 1.5 を破壊したか聞いたことがあるのではないでしょうか。しかし、実はこの演算子の導入は cabal-install 1.24 も壊していたのです。この事実を知っている人がいないのは、<a href="https://github.com/haskell/cabal/issues/4624">Hackage がこれらのファイルを古いバージョンの cabal-install から隠すような措置を導入した</a>からです。このキュレーションのアイディアは Stack の破壊に対応する術を Stackage に対して提供するものです。Hackage も同じ方法で cabal-install へのダメージに対処するでしょう。</p>
<p>そして、私は同じ類の処置を、Hackage から Stack へしてもらえないかとお願いしました。このお願いは、優先的な処置を求める声に後押しされています。この記事の読者は、各々の判断で自分がどう感じるか考えてください。</p>
<p>まとめると: 私は Stackage に上流のパッケージのパッチを当てられるようにしようとしています。他の人はフォークという言葉を使うかもしれませんが、私はこれをフォークではなくキュレーションだと考えています。</p>
<h2 id="hackage-へのアップロードを避ける">Hackage へのアップロードを避ける</h2>
<p>まず、これは私の好みですが、私のパッケージは Hackage に上げ続けたいと考えています。conduit や yesod, その他鋭意 Hackage でメンテ中の 80 を超えるパッケージの更新をやめるつもりも、そうしたいという願望もありません。そうは言っても、全員が全員同じように感じているわけではありません。</p>
<p>現在 Stackage は Hackage の下流になっています。最初にパッケージが Hackage にアップロードされない限り、そのパッケージを Stackage に入れることはできません。しかし、この状況は終わりを告げようとしています。およそ、現状を変えようとしているグループは以下の 3 パターンに分けられるでしょう。</p>
<ol type="1">
<li>少なくとも一部の PVP 支持者は、PVP に従わないパッケージ作成者に対して、そのパッケージを Hackage にアップロードしないように要請 (要求) しています。これは私が幾度となく指摘してきたように、Hackage 公式のガイドラインと完全に矛盾しているにも関わらず、彼らはしつこく同じ趣旨の発言を続けています。</li>
<li>PVP に反対する人の中には、基本的に (1) の理由で、Hackage にアップロードしたくない、という人もいます。PVP の遵守という観点で、たくさんの張りつめた議論がありました。これを避けるための最も簡単な方法は Hackage にアップロードしない、というものでした。私はこういった事情があって Hackage や Stackage にコードをリリースしない人たちを知っています。しぶしぶこうしている人もいますが、その全員が同じ理由で Hackage を避けたがっています。</li>
<li>技術的に見て、中央リポジトリに手作業で tarball をアップロードするようなモデルは、時代遅れになってきていると感じる人もいます。そういった人たちは、タグやリリースブランチを使って自動化された、Git ベースのリリースに基づいたワークフローを考えています。これによる社会的な影響は何もなく、どちらかと言うと Hackage が現在サポートしていない、技術的に違うものを探してみたいという願望です。</li>
</ol>
<ol type="1">
<li>番目の状況は、私の大きな頭痛の種でした。私は Hackage Trustee のガイドラインと Hackage のルールを変更して、彼らの言動 (Hackage にアップロードしないように私的なメールで要求したり、個人や企業に対して PVP に従っていないことを公に批判したり) について明確に禁止するように要望を出していました。実際、私が思うに、この要望は究極的には SLURP に結びつくものです。私は変更しなければフォークするぞと脅したりしたでしょうか? あー、そう思いたいならそれでもいいでしょう。私は Hackage を使うのをやめようと言い続けてきました。完全にです。私はこのような Hackage の使い方が許可されるように、公式のポリシーに対して変更を求めました。</li>
</ol>
<p>現状を見たらわかりますが、Hackage のポリシーにそんな変更はされませんでした。私は (2) と (3) のグループに対して何を思うのか、言及していませんでしたね。しかし (3) の主張からもわかるように、Hackage とは別の代替パッケージリポジトリをホストしたりするのは全くもって意味がありません。なので、私はまたここで保証します。最も文字通りの Hackage の fork は、私も私が話しかけているあなたも誰も望んでいないものになるでしょう。</p>
<p>また他の選択肢は Stackage に Hackage に加え、Git リポジトリから直接パッケージをプルできるようにする、というものです。これは先に挙げた 問題 (1) に対するワークアラウンドとして議論されています。あることを主張して、一度離れてもう一度それを主張するようになる… なんてことはありません。私はむしろ、Hackage が全員からパッケージのアップロードを受け付けることを明確にすることを望んでいますし、それと比べれば Stackage を別のソースに対して解放するような要求は少なくなります (3 番目のグループは純粋に技術的な観点から実験したいと思っているようですが)。</p>
<p>私は銃で誰かの頭を狙っているでしょうか? それはあなたが決めることです。これが私が知る限りの本当の物語です。</p>
<p>まとめると、これは潜在的な fork に最も近いもので、Git リポジトリが Hackage の代替のソースとして許可されたらこうなります。</p>
<h2 id="まとめ">まとめ</h2>
<p>私は上記の問題を解決するための努力をするにあたって、複数の人と長く非公開な議論をしてきました。先ほども話したように、私はいつも公の場で行われる議論が好きです。SLURP の提案がどうなったかを鑑み、私はやはり公の議論はより良いという立場を取ろうと思います。“fork” という言葉を使って、とても多くの人を怖がらせてしまったことは申し訳なく思っています。本当に怖がっていた人に対して、私は鬼のようなことをしてしまっていたようです。説明に 2 日間待たせてしまい、申し訳ありませんでした。</p>]]></summary>
</entry>
<entry>
    <title>stack でどうしてもビルドできないとき</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-02-23-stack-build-failure.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-02-23-stack-build-failure.html</id>
    <published>2018-02-23T00:00:00Z</published>
    <updated>2018-02-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>僕は <code>stack</code>, <code>hlint</code>, <code>liquidhaskell</code> などのパッケージを毎日なんとなくビルドしてインストールしているのですが、ある時 <code>stack</code> のビルドで <code>GHC panic</code> が発生し、ビルドができなくなってしまいました。</p>
<p>数日放置していたのですが、直らず・・・。そればかりか別のPCでは問題なくビルドができているため <code>stack</code> の問題だな！と意気揚々と <a href="https://github.com/commercialhaskell/stack/issues/3876">issue</a> を作ったのですが、結局は自分の環境の問題でした・・・。</p>
<p>僕は英語が得意ではありませんが、こういった時に批判だけするのは良くないと思っているので、頑張って <code>issue</code> や <code>PR</code> を投げるようにしています。Google 翻訳とかもありますし、誰か助けてくれますよ、きっと。 (放置されたり却下されることもありますが、気にせずコツコツ続けると楽しいです)</p>
<!--more-->
<h2 id="stack-のビルドがどうしてもできない時">Stack のビルドがどうしてもできない時</h2>
<p>ちゃんと <code>stack clean --full</code> を行った上でビルドコマンドを叩いたら、以下のような <code>ghc panic</code> エラーになりました。</p>
<pre class="shell"><code>$ stack build
...

ghc: panic! (the &#39;impossible&#39; happened)
      (GHC version 8.2.2 for x86_64-apple-darwin):
    	Loading temp shared object failed: dlopen(/var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib, 5): Symbol not found: _hackagezmsecurityzm0zi5zi2zi2zm9BfzzLHvNB6mEIMD9YTAK2zz_HackageziSecurityziUtilziChecked_zdwthrowChecked_closure
      Referenced from: /var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib
      Expected in: flat namespace
     in /var/folders/ky/8g7fv32j4js337c85sy5gy0h0000gn/T/ghc43457_0/libghc_437.dylib

    Please report this as a GHC bug:  http://www.haskell.org/ghc/reportabug</code></pre>
<p><code>ghc panic</code> は、言語拡張とか最新の機能とかを触っていれば良く見るエラーですが、なぜこれが起きたのか全くわかりません・・・。</p>
<p><code>issue</code> のアドバイス通り <code>stack exec -- ghc-pkg unregister hackage-security</code> も試してみたのですがダメでした。</p>
<p>なので最終手段の <code>~/.stack</code> を削除することになったんですが、今までどのフォルダを削除したら良いのかイマイチわかっていませんでした。</p>
<p>しかし <code>stack</code> の中の人は違います！ <code>precompiled</code>, <code>snapshots</code> を削除しなよ！と優しく教えてくれたので、指示通りこんな感じで削除したところ、無事にビルドが通るようになりました！</p>
<pre class="shell"><code>$ stack path --stack-root
~/.stack

$ rm -rf $(stack path --stack-root)/precompiled
$ rm -rf $(stack path --stack-root)/snapshots</code></pre>
<p>もう知ってるよ・・・。という話かもしれませんが、どうしてもビルドできない人は試してみてはいかがでしょうか。</p>
<p>以上です。</p>]]></summary>
</entry>
<entry>
    <title>stack 1.6.5 がリリースされました。</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-02-21-stack165.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-02-21-stack165.html</id>
    <published>2018-02-21T00:00:00Z</published>
    <updated>2018-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>先日 Stack version 1.6.5 が<a href="https://github.com/commercialhaskell/stack/blob/master/ChangeLog.md#v165">リリース</a>されました。</p>
<p>バグフィックスのみです。</p>
<p>いくつか前回の <a href="https://haskell.e-bigmoon.com/posts/2017-12-24-stack163.html">1.6.3</a> に含まれていた内容が 1.6.5 に移動してますね。</p>
<!--more-->
<h2 id="更新方法">更新方法</h2>
<pre class="shell"><code>$ stack upgrade

$ stack --version
Version 1.6.5, Git revision 24ab0d6ff07f28276e082c3ce74dfdeb1a2ca9e9 (5514 commits) x86_64 hpack-0.20.0</code></pre>
<h2 id="バグフィックス">バグフィックス</h2>
<ul>
<li>Windows でプリコンパイルされたキャッシュファイルのパス名が長過ぎる場合にビルドが失敗する問題を修正しました (<a href="https://github.com/commercialhaskell/stack/issues/3649">#3649</a>)</li>
</ul>
<p>僕は Windows ユーザではないので、どのぐらいこのバグが深刻なのかわかりません。</p>
<p><code>stack</code> の内部的には <a href="https://github.com/commercialhaskell/stack/blob/v1.6.5/src/Stack/Build/Cache.hs#L372">pathTooLong</a> が新しく定義され、以前まではただの <code>length</code> で比較していたところを <code>utf16StringLength</code> の比較に修正したようです。</p>
<hr />
<ul>
<li>スクリプトインタプリタ形式で暗黙的に渡されるファイル引数を他の引数より先に処理するようにしました (<a href="https://github.com/commercialhaskell/stack/issues/3658">#3658</a>)。この修正により、スクリプト実行時に <code>-- +RTS ... -RTS</code> を渡せるようになりました。</li>
</ul>
<p>以下のような <code>RTS</code> オプションの指定が適切に処理できるようになりました。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">#!/usr/bin/env stack</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="co">{- stack</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="co">  script</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="co">  --resolver lts-6.25</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="co">  --package turtle</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="co">  --</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="co">  +RTS -s -RTS</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8"><span class="co">-}</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9"></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"><span class="ot">main ::</span> <span class="dt">IO</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">main <span class="fu">=</span> putStrLn <span class="st">&quot;Hello, world!&quot;</span></a></code></pre></div>
<hr />
<ul>
<li>stack 設定ファイルで <code>year</code> パラメータが設定できるようになりました。それに伴い、ドキュメントもわかりやすくしました。 (<a href="https://github.com/commercialhaskell/stack/issues/2275">#2275</a>)。</li>
</ul>
<p>こんな感じで指定できるようです。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="fu">templates:</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">  <span class="fu">params:</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">    <span class="fu">author-email:</span><span class="at"> 415fox@gmail.com</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">    <span class="fu">author-name:</span><span class="at"> michael fox</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">    <span class="fu">category:</span><span class="at"> Application</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">    <span class="fu">copyright:</span><span class="at"> copytright michael fox 2016</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">    <span class="fu">github-username:</span><span class="at"> gitfoxi</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">    <span class="fu">year:</span><span class="at"> 2016</span></a></code></pre></div>
<p>ドキュメントを見る限り <code>copyright</code> を省略した場合は <code>author-name</code> と <code>year</code> を使って <code>copyright</code> が生成されるようです。</p>
<p>また <code>year</code> を省略した場合は現在の年が設定されるとのことなので、設定しなくても良さそうですね。</p>
<hr />
<ul>
<li>ベンチーマークが別のベンチマークやビルドステップと並行して実行されてしまう問題を修正しました。これは別のプロセスのCPU利用がベンチマークに悪影響を及ぼすと思われるので理想的ではありません。また、デフォルトでベンチマークの出力が表示されないようになっていた件も同様に修正しました (<a href="https://github.com/commercialhaskell/stack/issues/3663">#3663</a>)</li>
</ul>
<p><a href="https://github.com/commercialhaskell/stack/pull/3666">Never run benchmarks concurrently, always output to console #3663 #3666</a>が修正のPRです。</p>
<p>良くわかりませんが <code>Actiontype</code> 型に <code>ConcurrencyDisallowed</code> というデータコンストラクタを追加し <code>bench</code> が呼ばれた際はこの値を <code>Action</code> 型の <code>actionConcurrency</code> フィールドに設定することで処理を切り替えるようにしているっぽいです。</p>
<hr />
<ul>
<li>パッケージのコンポーネントごとに別々のビルドキャッシュを持つことによって、未変更のファイルについて不要なリビルドを回避するようになりました (<a href="https://github.com/commercialhaskell/stack/issues/3732">#3732</a>)</li>
</ul>
<p><code>issue</code> にあがっている具体例だと <code>foo</code> と <code>bar</code> の2つのパッケージを作り、<code>bar</code> は <code>foo</code> に依存しているという関係です。</p>
<pre class="shell"><code>$ stack test --no-run-tests
$ stack test --no-run-tests bar</code></pre>
<p>この時、1回目でテストが終わってるので2回目で <code>bar</code> を指定した時に何も起こらないはずです。</p>
<p>しかし、実際にはこうなります。</p>
<pre class="shell"><code>$ stack test --no-run-tests bar
bar-0.1.0.0: unregistering (missing dependencies: foo)
foo-0.1.0.0: unregistering (local file changes: app/Main.hs test/Spec.hs)
foo-0.1.0.0: build (lib + exe)
foo-0.1.0.0: copy/register
bar-0.1.0.0: configure (lib + exe + test)</code></pre>
<p><a href="https://github.com/commercialhaskell/stack/pull/3750">Use a separate build cache for each component of a package #3750</a>で修正されています。</p>
<p>実装を見る感じ、コンポーネントというのは <code>lib</code>, <code>exe</code>, <code>test</code>, <code>bench</code> のことで、それぞれを接頭辞にしたビルドキャッシュを持つようになったみたい？です。</p>
<hr />
<ul>
<li>スナップショットからローカルパッケージにパッケージを反映させる処理の動作を修正しました。これはスナップショットのバージョン境界が衝突する時に発生する問題なので、古いパッケージの Hackage リビジョンによって引き起こされます。同様にカスタムスナップショットでも、問題の起きないパッケージの衝突するバージョンが定義できるようになりました。(<a href="https://github.com/fpco/stackage/issues/3185">Stackage issue #3185</a>)</li>
</ul>
<p><a href="https://github.com/commercialhaskell/stack/pull/3758/">Fix package promotion to snapshot #3758</a> で修正されました。コードの差分は以下の1行です。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot"># 変更前</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="dt">Just</span> version <span class="ot">-&gt;</span> version <span class="ot">`withinIntervals`</span> intervals</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"></a>
<a class="sourceLine" id="cb6-4" data-line-number="4"><span class="ot"># 変更後</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="dt">Just</span> _version <span class="ot">-&gt;</span> <span class="dt">True</span></a></code></pre></div>
<p>このようにローカルパッケージ反映時？にバージョンチェックを行わないようになりました。</p>
<p>以下のようにカスタムスナップショットに追加する場合はビルドできます。(<code>async-2.1.1.1</code> には <code>stm &gt;= 2.2 &amp;&amp; &lt; 2.5</code> の依存関係が設定されています。<a href="https://hackage.haskell.org/package/async-2.1.1.1/src/async.cabal">async.cabal</a>)</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="co"># stack.yaml</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="fu">resolver:</span><span class="at"> snapshot.yaml</span></a></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co"># snapshot.yaml</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="fu">resolver:</span><span class="at"> ghc-8.0.2</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"><span class="fu">name:</span><span class="at"> hackage-revisions-are-annoying</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5"><span class="kw">-</span> async-2.1.1.1</a>
<a class="sourceLine" id="cb8-6" data-line-number="6"><span class="kw">-</span> stm-2.1.2.2</a></code></pre></div>
<p>実行結果。</p>
<pre class="shell"><code>$ stack build --stack-yaml as-snapshot.yaml
WARNING: Ignoring out of range dependency (trusting snapshot over Hackage revisions): stm-2.1.2.2. async requires: &gt;=2.2 &amp;&amp; &lt;2.5

...

Process exited with code: ExitFailure 1
    Logs have been written to: /home/bm12/Desktop/testProj/test/.stack-work/logs/async-2.1.1.1.log

    Configuring async-2.1.1.1...
    Cabal-simple_mPHDZzAJ_1.24.2.0_ghc-8.0.2: Encountered missing dependencies:
    stm &gt;=2.2 &amp;&amp; &lt;2.5 &amp;&amp; ==2.1.2.2</code></pre>
<p>また、以下のように <code>extra-deps</code> に追加する場合はビルドが実行される前にバージョンエラーになります。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="co"># stack.yaml</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="fu">resolver:</span><span class="at"> ghc-8.0.2</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="kw">-</span> async-2.1.1.1</a>
<a class="sourceLine" id="cb10-5" data-line-number="5"><span class="kw">-</span> stm-2.1.2.2</a></code></pre></div>
<p>実行結果</p>
<pre class="shell"><code>$ stack build --stack-yaml as-extra-dep.yaml

Error: While constructing the build plan, the following exceptions were encountered:

In the dependencies for async-2.1.1.1:
    stm-2.1.2.2 from stack configuration does not match &gt;=2.2 &amp;&amp; &lt;2.5  (latest matching version is 2.4.5.0)
needed due to test-0.1.0.0 -&gt; async-2.1.1.1

Some different approaches to resolving this:

  * Set &#39;allow-newer: true&#39; to ignore all version constraints and build anyway.

  * Consider trying &#39;stack solver&#39;, which uses the cabal-install solver to attempt to find some working build configuration. This can be convenient when
    dealing with many complicated constraint errors, but results may be unpredictable.

  * Recommended action: try adding the following to your extra-deps in /home/bm12/Desktop/testProj/test/as-extra-dep.yaml:

- stm-2.4.5.0

Plan construction failed.</code></pre>
<hr />
<ul>
<li><code>stack ghci</code> で複数のパッケージで定義されている同名のモジュールを読み込めるようになりました (<a href="https://github.com/commercialhaskell/stack/pull/3776">#3776</a>)。</li>
</ul>
<p>あんまりわかってないですが、<code>issue</code> の内容は <code>stack</code> と <code>rio</code> の両方のパッケージで同名のモジュールがある場合でも、ちゃんと読み込めるようになったみたいです。</p>
<pre><code>Path.Extra (in stack, rio)
RIO (in stack, rio)
RIO.Logger (in stack, rio)
RIO.Prelude (in stack, rio)
RIO.Process (in stack, rio)</code></pre>
<p><a href="https://github.com/commercialhaskell/stack/pull/3779">With ghci, allow multiple packages to use the same module #3776 #3779</a> で修正されました。</p>
<p><code>ghciPkgModules</code> の型を <code>Set ModuleName</code> から <code>ModuleMap</code> に変更しています。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">type</span> <span class="dt">ModuleMap</span> <span class="fu">=</span> <span class="dt">Map</span> <span class="dt">ModuleName</span> (<span class="dt">Map</span> (<span class="dt">Path</span> <span class="dt">Abs</span> <span class="dt">File</span>) (<span class="dt">Set</span> (<span class="dt">PackageName</span>, <span class="dt">NamedComponent</span>)))</a></code></pre></div>
<p><code>モジュール名</code> → <code>ファイルの絶対パス</code> の順番で探して、その中を <code>Set (PackageName, NamedComponent)</code> で持つようになっています。今まではモジュール名の <code>Set</code> だったので確かに複数のパッケージでも上手く処理できそうな感じがします。</p>
<hr />
<ul>
<li><code>stack ghci</code> で <code>base</code> の依存関係を追加する必要が無くなりました。これはローカルターゲットが存在しない場合に自動的に追加されるためです。これにより、<code>base</code> を置き換えているコードも同様に読み込めるようになります (<a href="https://github.com/commercialhaskell/stack/issues/3589">#3589</a>)</li>
</ul>
<p>修正の<a href="https://github.com/commercialhaskell/stack/commit/196bdbae986ddf887f92999b26129085a8ed0be5">コミット</a>を見ると <code>&quot;-package&quot; : &quot;base&quot;</code> が明示的に追加されています。</p>
<hr />
<ul>
<li><code>--no-rerun-tests</code> が修正されました。今まではテストを実行した後に結果の記録を忘れていました。そのため、前回テストにパスしていたとしても、常に全てのテストが実行されていました (<a href="https://github.com/commercialhaskell/stack/pull/3770">#3770</a>)</li>
</ul>
<hr />
<ul>
<li><code>hackage-security</code> のパッチを当てたバージョンを含めるようにしました。このパッチには機械故障や <code>SIGKILL</code> に対して更新処理が正しく復帰できるように、非同期例外処理に関する問題とディレクトリロックからファイルロックへの変更の2つが含まれます (<a href="https://github.com/haskell/hackage-security/issues/187">hackage-security #187</a>, <a href="https://github.com/commercialhaskell/stack/issues/3073">#3073</a>)</li>
</ul>
<p>この問題よくわかってないのですが、<code>stack</code> のコミットは <code>extra-deps</code> にパッチの当たっている <code>hackage-security</code> を追加しただけです。(<a href="https://github.com/commercialhaskell/stack/commit/4bf68f02d901a6ffc7f4b81a22985d98435fbb14">コミット</a>)</p>
<p>実際のパッチは以下の2つです。</p>
<ul>
<li><a href="https://github.com/haskell/hackage-security/pull/202">Detect asynchronous exceptions via their types #187 #202</a></li>
<li><a href="https://github.com/haskell/hackage-security/pull/203">Use file instead of dir locking #187 #203</a></li>
</ul>
<h2 id="bug-fix-オリジナル">Bug fix (オリジナル)</h2>
<ul>
<li>1.6.1 introduced a change that made some precompiled cache files use longer paths, sometimes causing builds to fail on windows. This has been fixed. See <a href="https://github.com/commercialhaskell/stack/issues/3649">#3649</a></li>
<li>The script interpreter’s implicit file arguments are now passed before other arguments. See <a href="https://github.com/commercialhaskell/stack/issues/3658">#3658</a>. In particular, this makes it possible to pass <code>-- +RTS ... -RTS</code> to specify RTS arguments used when running the script.</li>
<li>Don’t ignore the template <code>year</code> parameter in config files, and clarify the surrounding documentation. See <a href="https://github.com/commercialhaskell/stack/issues/2275">#2275</a>.</li>
<li>Benchmarks used to be run concurrently with other benchmarks and build steps. This is non-ideal because CPU usage of other processes may interfere with benchmarks. It also prevented benchmark output from being displayed by default. This is now fixed. See <a href="https://github.com/commercialhaskell/stack/issues/3663">#3663</a>.</li>
<li>Some unnecessary rebuilds when no files were changed are now avoided, by having a separate build cache for each component of a package. See <a href="https://github.com/commercialhaskell/stack/issues/3732">#3732</a>.</li>
<li>Correct the behavior of promoting a package from snapshot to local package. This would get triggered when version bounds conflicted in a snapshot, which could be triggered via Hackage revisions for old packages. This also should allow custom snapshots to define conflicting versions of packages without issue. See <a href="https://github.com/fpco/stackage/issues/3185">Stackage issue #3185</a>.</li>
<li>When promoting packages from snapshot to local, we were occassionally discarding the actual package location content and instead defaulting to pulling the package from the index. We now correctly retain this information. Note that if you were affected by this bug, you will likely need to delete the binary build cache associated with the relevant custom snapshot. See <a href="https://github.com/commercialhaskell/stack/issues/3714">#3714</a>.</li>
<li><code>stack ghci</code> now allows loading multiple packages with the same module name, as long as they have the same filepath. See <a href="https://github.com/commercialhaskell/stack/pull/3776">#3776</a>.</li>
<li><code>stack ghci</code> no longer always adds a dependency on <code>base</code>. It is now only added when there are no local targets. This allows it to be to load code that uses replacements for <code>base</code>. See <a href="https://github.com/commercialhaskell/stack/issues/3589#issuecomment">#3589</a></li>
<li><code>--no-rerun-tests</code> has been fixed. Previously, after running a test we were forgetting to record the result, which meant that all tests always ran even if they had already passed before. See <a href="https://github.com/commercialhaskell/stack/pull/3770">#3770</a>.</li>
<li>Includes a patched version of <code>hackage-security</code> which fixes both some issues around asynchronous exception handling, and moves from directory locking to file locking, making the update mechanism resilient against SIGKILL and machine failure. See <a href="https://github.com/haskell/hackage-security/issues/187">hackage-security #187</a> and <a href="https://github.com/commercialhaskell/stack/issues/3073">#3073</a>.</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<ul>
<li><code>stack ghci</code> 周りのバグフィックスもいくつかあったので <code>ghci</code> を多用する人にとっては嬉しいですね。</li>
<li>古い <code>LTS</code> を使っているプロジェクトでビルドができなくて困っている人は <code>1.6.5</code> にアップデートすると直るかもしれません。</li>
</ul>
<p>以上です。</p>]]></summary>
</entry>
<entry>
    <title>Pattern Synonyms で DEPRECATED</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-02-12-pattern-synonyms.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-02-12-pattern-synonyms.html</id>
    <published>2018-02-12T00:00:00Z</published>
    <updated>2018-02-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p><code>persistent</code> ライブラリで <code>SomeField</code> を <code>CopyField</code> に置き換える際の<a href="https://github.com/yesodweb/persistent/pull/760">PR</a>で、パターンシノニム (Pattern Synonyms) の面白い使い方を見つけました。</p>
<p>もしかしたら良く知られた技なのかもしれませんが、ご紹介したいと思います。</p>
<p>パターンシノニムが何かについての説明は、今回全くしていませんのでわかる人向けです。</p>
<!--more-->
<h2 id="モチベーション">モチベーション</h2>
<p>パターンシノニムはパターンの再利用を可能にするための言語拡張です。詳しくは <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#pattern-synonyms">User’s Guide 10.7. Pattern synonyms</a> をご確認ください。</p>
<p>使いみちは色々あると思いますが、今回はコンストラクタを <code>DEPRECATED</code> にするために利用する例をご紹介します。（実際のコードは<a href="https://github.com/parsonsmatt/persistent/blob/c882203c9cc09ba28b2012b58b4cd0fdc415e6ce/persistent-mysql/Database/Persist/MySQL.hs#L1080">このあたり</a>です)</p>
<p><code>Persistent</code> ライブラリの <code>3.0.0</code> から <code>SomeField</code> が廃止され <code>HandleUpdateCollision</code> 型が導入されました。</p>
<p><code>SomeField</code> 型は <code>Persistent</code> の中でも結構重要な型 (<code>SomeException</code> と同じような雰囲気の型) です。また <code>Yesod</code> のプロジェクトでは多数のユーザがいるため、このような変更に対しては、いきなり削除するのではなく <code>DEPRECATED</code> プラグマを利用して、新しい関数への移行を促しています。</p>
<p>今回の場合、<strong>関数</strong>ではなく<strong>データ型</strong>を変更する必要があるためパターンシノニムが利用されています。</p>
<h2 id="実際のコード">実際のコード</h2>
<p>コメント等を適宜削除しましたが、実際にはこんな感じで利用されています。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">HandleUpdateCollision</span> record <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="dt">CopyField</span><span class="ot"> ::</span> <span class="dt">EntityField</span> record typ <span class="ot">-&gt;</span> <span class="dt">HandleUpdateCollision</span> record</a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="dt">CopyUnlessEq</span><span class="ot"> ::</span> <span class="dt">PersistField</span> typ <span class="ot">=&gt;</span> <span class="dt">EntityField</span> record typ <span class="ot">-&gt;</span> typ <span class="ot">-&gt;</span> <span class="dt">HandleUpdateCollision</span> record</a>
<a class="sourceLine" id="cb1-4" data-line-number="4"></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="kw">type</span> <span class="dt">SomeField</span> <span class="fu">=</span> <span class="dt">HandleUpdateCollision</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="ot">#if MIN_VERSION_base(4,8,0)</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">pattern <span class="dt">SomeField</span><span class="ot"> ::</span> <span class="dt">EntityField</span> record typ <span class="ot">-&gt;</span> <span class="dt">SomeField</span> record</a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="ot">#endif</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">pattern <span class="dt">SomeField</span> x <span class="fu">=</span> <span class="dt">CopyField</span> x</a>
<a class="sourceLine" id="cb1-11" data-line-number="11"><span class="ot">{-# DEPRECATED SomeField &quot;The type SomeField is deprecated. Use the type HandleUpdateCollision instead, and use the function copyField instead of the data constructor.&quot; #-}</span></a></code></pre></div>
<p>重要な部分はここですね。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">pattern <span class="dt">SomeField</span> x <span class="fu">=</span> <span class="dt">CopyField</span> x</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="ot">{-# DEPRECATED SomeField &quot;...&quot; #-}</span></a></code></pre></div>
<p><code>Haskell</code> には<strong>型シノニム</strong>があるのに<strong>データシノニム</strong>って無いんですね。。。って思った人はパターンシノニムを使えばこんな感じで実現可能です。</p>
<p>通常、パターンシノニムを利用するモチベーションはパターンマッチの再利用にあると思うのですが、単純にデータコンストラクタのエイリアスにしておいて <code>DEPRECATED</code> を促すやり方も結構使えるなーと思いました。</p>
<p>以上です。</p>]]></summary>
</entry>
<entry>
    <title>素晴らしき HLint を使いこなす</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-01-29-awesome-hlint.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-01-29-awesome-hlint.html</id>
    <published>2018-01-29T00:00:00Z</published>
    <updated>2018-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p><a href="https://github.com/ndmitchell/hlint">HLint</a> は <a href="https://www.stackage.org/package/haskell-src-exts">haskell-src-exts</a> を使って実装されている静的解析ツールです。</p>
<p><code>HLint</code> を使えば <code>github</code> などを使って <code>PR</code> ベースで開発する場合のコードレビューでこんな事を言わなくて済みます。</p>
<ul>
<li><code>fromJust</code> とかの部分関数は使わないで！</li>
<li><code>maybe</code> 関数って知ってる？</li>
<li>この言語拡張って本当に使ってるの？</li>
<li><code>undefined</code> まだ残ってるじゃん！</li>
</ul>
<p>嬉しいことに <code>Travis CI</code> や <code>CircleCI</code> などで一度設定するだけなので導入もお手軽です！ また、最近知ったのですが、プロジェクト内で使って欲しくない関数なども <code>HLint</code> によって検出可能です。</p>
<p>さらに、独学で <code>Haskell</code> の学習を進めている人は <code>HLint</code> が素晴らしい教師役となってくれるでしょう。</p>
<ul>
<li><a href="https://github.com/waddlaw/blog-example-hlint">利用したコード</a></li>
</ul>
<!--more-->
<h2 id="hlint-の参考記事">HLint の参考記事</h2>
<p><code>HLint</code> は割と有名なので日本語の解説記事がいくつかありました。</p>
<ul>
<li><a href="https://qiita.com/suzuki-hoge/items/6d101e523620178c6f7b">Haskellの静的解析ツール HLint を使おう</a></li>
<li><a href="https://www.ncaq.net/2017/10/07/">Haskellを書くときはstylish-haskellとhlintを使って労せずして綺麗なコードを書きましょう</a></li>
<li><a href="https://qiita.com/VoQn/items/fe7953aec010d8f68a59">OverloadedStringsとANNプラグマが干渉する場合の回避方法</a></li>
</ul>
<p>ちゃんと使おうとすると上記の解説記事では少し物足りません。具体的には以下の点が不足しています。</p>
<ul>
<li>カスタムヒントの設定方法</li>
<li>関数の利用制限方法</li>
<li>関数・モジュール・ファイル単位でヒントを無視する方法</li>
<li><code>CI</code> で利用するための設定方法</li>
</ul>
<p>本記事では、これらの内容について解説を行います。<code>HLint</code> でどんなことが出来るかについては、上記の記事または<a href="https://github.com/ndmitchell/hlint">公式リポジトリ</a>をご参考ください。</p>
<p>また、内部の仕組みについては、作者の <code>Neil Mitchell</code> さんの解説記事が参考になります。</p>
<ul>
<li><a href="https://qiita.com/rounddelta/items/4584f5486c1061c93f0b">HLint のルールを理解する (和訳)</a></li>
</ul>
<h2 id="hlint-の導入">HLint の導入</h2>
<p><code>HLint</code> は以下のコマンドで簡単に導入できます。</p>
<pre class="shell"><code>$ stack install hlint

$ hlint --version
HLint v2.0.15, (C) Neil Mitchell 2006-2018</code></pre>
<p>現在の最新版は <code>v2.0.15</code> となっています。<code>HLint</code> のバージョンによって出力内容が異なることが良くありますのでご注意ください。</p>
<p>また、お試しで使ってみたい人は以下のコマンドを実行してみましょう。カレントディレクトリ以下のファイルが検査されます。</p>
<pre class="shell"><code>$ curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .</code></pre>
<h2 id="hlint-の実行方法">HLint の実行方法</h2>
<p><code>HLint</code> はディレクトリを指定すると再帰的に解析を行ってくれます。</p>
<h3 id="プロジェクト全体に対して再帰的に実行">プロジェクト全体に対して再帰的に実行</h3>
<pre class="shell"><code>$ hlint .</code></pre>
<h3 id="特定のディレクトリ-src-に対して再帰的に実行">特定のディレクトリ (src) に対して再帰的に実行</h3>
<pre class="shell"><code>$ hlint src</code></pre>
<h3 id="複数のディレクトリ-src-test-に対して再帰的に実行">複数のディレクトリ (src, test) に対して再帰的に実行</h3>
<pre class="shell"><code>$ hlint src test</code></pre>
<h3 id="単一のファイル-appmain.hs-にのみ実行">単一のファイル (app/Main.hs) にのみ実行</h3>
<pre class="shell"><code>$ hlint app/Main.hs</code></pre>
<h2 id="hlint-のヒント">HLint のヒント</h2>
<p>以下のように <code>stack new</code> で新規プロジェクトを作ってすぐの状態では <code>HLint</code> は何もヒントを出してくれません。</p>
<p>つまり、とても良い状態ということです。</p>
<pre class="shell"><code>$ stacke new test-proj
$ cd test-proj

$ hlint .
No hints</code></pre>
<p>ここで、ファイルを少し修正して <code>HLint</code> に働いてもらいましょう！</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- src/Lib.hs</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb8-5" data-line-number="5">someFunc <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">  <span class="kw">let</span> x1 <span class="fu">=</span> concat (map toUpper [<span class="ch">&#39;a&#39;</span> <span class="fu">..</span> <span class="ch">&#39;z&#39;</span>])</a>
<a class="sourceLine" id="cb8-7" data-line-number="7">      x2 <span class="fu">=</span> maybe <span class="st">&quot;&quot;</span> id <span class="st">&quot;abc&quot;</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  putStrLn <span class="st">&quot;someFunc&quot;</span></a></code></pre></div>
<p>上記のコードは以下のようなヒントを2つ提案してくれます。</p>
<pre class="shell"><code>$ hlint .
./src/Lib.hs:7:12: Warning: Use concatMap
Found:
  concat (map toUpper [&#39;a&#39; .. &#39;z&#39;])
Why not:
  concatMap toUpper [&#39;a&#39; .. &#39;z&#39;]

./src/Lib.hs:8:12: Warning: Use fromMaybe
Found:
  maybe &quot;&quot; id
Why not:
  Data.Maybe.fromMaybe &quot;&quot;

2 hints</code></pre>
<p>これは、このような意味になります。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="co"># 1つ目のヒント</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="kw">-</span> <span class="fu">ヒントレベル:</span><span class="at"> 警告</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="kw">-</span> <span class="fu">ヒント:</span><span class="at"> Use concatMap</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="kw">-</span> <span class="fu">出力の意味:</span><span class="at"> concat (map toUpper [&#39;a&#39; .. &#39;z&#39;]) を見つけたけど、どうして concatMap toUpper [&#39;a&#39; .. &#39;z&#39;] と書かないんだい？</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5"></a>
<a class="sourceLine" id="cb10-6" data-line-number="6"><span class="co"># 2つ目のヒント</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7"><span class="kw">-</span> <span class="fu">ヒントレベル:</span><span class="at"> 警告</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8"><span class="kw">-</span> <span class="fu">ヒント:</span><span class="at"> Use fromMaybe</span></a>
<a class="sourceLine" id="cb10-9" data-line-number="9"><span class="kw">-</span> <span class="fu">出力の意味:</span><span class="at"> maybe &quot;&quot; id は Data.Maybe モジュールにある fromMaybe 関数を使えば fromMaybe &quot;&quot; と同じですよ</span></a></code></pre></div>
<p>素晴らしいですね。とてもわかりやすいです。また、<code>--report</code> オプションを利用することで結果を <code>HTML</code> として出力することも可能です。</p>
<pre class="shell"><code>$ hlint . --report</code></pre>
<p>とても素晴らしいのですが、<code>HLint</code> の提案するヒントに賛成できない時はどうしましょう? もし <code>HLint</code> の言うとおりにしかできないのであれば、とても使いづらいツールになってしまいます。</p>
<p>そういった場合のためにルールを無視する方法も用意されています。また、プロジェクト固有のカスタムヒントについても同様に設定方法が用意されています。</p>
<h2 id="hlint-のヒントについて">HLint のヒントについて</h2>
<p>デフォルトで適用されるヒントの一覧は <a href="https://github.com/ndmitchell/hlint/blob/master/data/hlint.yaml">hlint.yaml</a> で確認できます。この中に無いヒントについては、自分でカスタムヒントを追加して対応することになります。</p>
<h3 id="カスタムヒントファイルの生成">カスタムヒントファイルの生成</h3>
<p>まずは、カスタムヒントファイルの雛形を生成するために、プロジェクトのルートで以下のコマンドを実行しましょう。</p>
<pre class="shell"><code>$ hlint --default &gt; .hlint.yaml</code></pre>
<p>中身はこんな感じで、ヒントの書き方について具体例が載っています。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="co"># HLint configuration file</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="co"># https://github.com/ndmitchell/hlint</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="co">##########################</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="co"># This file contains a template configuration file, which is typically</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6"><span class="co"># placed as .hlint.yaml in the root of your project</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7"></a>
<a class="sourceLine" id="cb13-8" data-line-number="8"></a>
<a class="sourceLine" id="cb13-9" data-line-number="9"><span class="co"># Specify additional command line arguments</span></a>
<a class="sourceLine" id="cb13-10" data-line-number="10"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-11" data-line-number="11"><span class="co"># - arguments: [--color, --cpp-simple, -XQuasiQuotes]</span></a>
<a class="sourceLine" id="cb13-12" data-line-number="12"></a>
<a class="sourceLine" id="cb13-13" data-line-number="13"></a>
<a class="sourceLine" id="cb13-14" data-line-number="14"><span class="co"># Control which extensions/flags/modules/functions can be used</span></a>
<a class="sourceLine" id="cb13-15" data-line-number="15"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-16" data-line-number="16"><span class="co"># - extensions:</span></a>
<a class="sourceLine" id="cb13-17" data-line-number="17"><span class="co">#   - default: false # all extension are banned by default</span></a>
<a class="sourceLine" id="cb13-18" data-line-number="18"><span class="co">#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used</span></a>
<a class="sourceLine" id="cb13-19" data-line-number="19"><span class="co">#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module</span></a>
<a class="sourceLine" id="cb13-20" data-line-number="20"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-21" data-line-number="21"><span class="co"># - flags:</span></a>
<a class="sourceLine" id="cb13-22" data-line-number="22"><span class="co">#   - {name: -w, within: []} # -w is allowed nowhere</span></a>
<a class="sourceLine" id="cb13-23" data-line-number="23"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-24" data-line-number="24"><span class="co"># - modules:</span></a>
<a class="sourceLine" id="cb13-25" data-line-number="25"><span class="co">#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as &#39;Set&#39;</span></a>
<a class="sourceLine" id="cb13-26" data-line-number="26"><span class="co">#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely</span></a>
<a class="sourceLine" id="cb13-27" data-line-number="27"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-28" data-line-number="28"><span class="co"># - functions:</span></a>
<a class="sourceLine" id="cb13-29" data-line-number="29"><span class="co">#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules</span></a>
<a class="sourceLine" id="cb13-30" data-line-number="30"></a>
<a class="sourceLine" id="cb13-31" data-line-number="31"></a>
<a class="sourceLine" id="cb13-32" data-line-number="32"><span class="co"># Add custom hints for this project</span></a>
<a class="sourceLine" id="cb13-33" data-line-number="33"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-34" data-line-number="34"><span class="co"># Will suggest replacing &quot;wibbleMany [myvar]&quot; with &quot;wibbleOne myvar&quot;</span></a>
<a class="sourceLine" id="cb13-35" data-line-number="35"><span class="co"># - error: {lhs: &quot;wibbleMany [x]&quot;, rhs: wibbleOne x}</span></a>
<a class="sourceLine" id="cb13-36" data-line-number="36"></a>
<a class="sourceLine" id="cb13-37" data-line-number="37"></a>
<a class="sourceLine" id="cb13-38" data-line-number="38"><span class="co"># Turn on hints that are off by default</span></a>
<a class="sourceLine" id="cb13-39" data-line-number="39"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-40" data-line-number="40"><span class="co"># Ban &quot;module X(module X) where&quot;, to require a real export list</span></a>
<a class="sourceLine" id="cb13-41" data-line-number="41"><span class="co"># - warn: {name: Use explicit module export list}</span></a>
<a class="sourceLine" id="cb13-42" data-line-number="42"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-43" data-line-number="43"><span class="co"># Replace a $ b $ c with a . b $ c</span></a>
<a class="sourceLine" id="cb13-44" data-line-number="44"><span class="co"># - group: {name: dollar, enabled: true}</span></a>
<a class="sourceLine" id="cb13-45" data-line-number="45"><span class="co">#</span></a>
<a class="sourceLine" id="cb13-46" data-line-number="46"><span class="co"># Generalise map to fmap, ++ to &lt;&gt;</span></a>
<a class="sourceLine" id="cb13-47" data-line-number="47"><span class="co"># - group: {name: generalise, enabled: true}</span></a>
<a class="sourceLine" id="cb13-48" data-line-number="48"></a>
<a class="sourceLine" id="cb13-49" data-line-number="49"></a>
<a class="sourceLine" id="cb13-50" data-line-number="50"><span class="co"># Ignore some builtin hints</span></a>
<a class="sourceLine" id="cb13-51" data-line-number="51"><span class="co"># - ignore: {name: Use let}</span></a>
<a class="sourceLine" id="cb13-52" data-line-number="52"><span class="co"># - ignore: {name: Use const, within: SpecialModule} # Only within certain modules</span></a>
<a class="sourceLine" id="cb13-53" data-line-number="53"></a>
<a class="sourceLine" id="cb13-54" data-line-number="54"></a>
<a class="sourceLine" id="cb13-55" data-line-number="55"><span class="co"># Define some custom infix operators</span></a>
<a class="sourceLine" id="cb13-56" data-line-number="56"><span class="co"># - fixity: infixr 3 ~^#^~</span></a>
<a class="sourceLine" id="cb13-57" data-line-number="57"></a>
<a class="sourceLine" id="cb13-58" data-line-number="58"></a>
<a class="sourceLine" id="cb13-59" data-line-number="59"><span class="co"># To generate a suitable file for HLint do:</span></a>
<a class="sourceLine" id="cb13-60" data-line-number="60"><span class="co"># $ hlint --default &gt; .hlint.yaml</span></a></code></pre></div>
<p><code>HLint</code> はデフォルトヒントが記述されている <code>hlint.yaml</code> と、カスタムヒントが記述されている <code>.hlint.yaml</code> の両方のヒント使って検査を行うため、プロジェクト固有のヒントについては、<code>.hlint.yaml</code> に記述していくことになります。</p>
<h3 id="カスタムヒントの追加">カスタムヒントの追加</h3>
<p>ここでは説明のため以下のような <code>tshow</code> という関数があるとしましょう。この関数は <code>show :: Show a =&gt; a -&gt; String</code> の <code>Text</code> バージョンです。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Text</span> (pack)</a>
<a class="sourceLine" id="cb14-2" data-line-number="2"></a>
<a class="sourceLine" id="cb14-3" data-line-number="3"><span class="ot">tshow ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">tshow <span class="fu">=</span> pack <span class="fu">.</span> show</a></code></pre></div>
<p>目的としてはプロジェクトのコード中で <code>pack . show</code> となっている部分を <code>tshow</code> に直すようにヒントを出させることです。まだヒントを追加していないため、当然ながら現時点では <code>pack . show</code> というコードが使われていたとしても何も起こりません。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="co">-- src/Lib.hs</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"></a>
<a class="sourceLine" id="cb15-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Data.Text</span> (pack)</a>
<a class="sourceLine" id="cb15-5" data-line-number="5"></a>
<a class="sourceLine" id="cb15-6" data-line-number="6"><span class="ot">intToText ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7">intToText <span class="fu">=</span> pack <span class="fu">.</span> show</a></code></pre></div>
<pre class="shell"><code>$ hlint .
No hints</code></pre>
<p>それでは <code>.hlint.yaml</code> に <code>tshow = pack . show</code> を検出するためのヒントを追記しましょう。以下の1行を追記するだけです。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">-</span> <span class="fu">error:</span><span class="at"> </span><span class="kw">{</span><span class="fu">lhs:</span><span class="at"> pack (show x)</span><span class="kw">,</span> <span class="fu">rhs:</span><span class="at"> tshow x</span><span class="kw">}</span></a></code></pre></div>
<p><code>lhs</code>, <code>rhs</code> はそれぞれ <code>Left Hand Side (左辺)</code>, <code>Right Hand Side (右辺)</code> の略です。またヒントのレベルは <code>error</code> 以外にも <code>warm</code>, <code>suggest (hint キーワードはただのエイリアスです)</code> も指定できるため、好きなレベルを指定しましょう。(ヒントレベルの使い分けについては <a href="https://github.com/ndmitchell/hlint#what-is-the-difference-between-errorwarningsuggestion">What is the difference between error/warning/suggestion?</a> をご参照ください)</p>
<p>では、実行してみましょう。</p>
<pre class="shell"><code>$ hlint .
./src/Lib.hs:14:13: Error: Use tshow
Found:
  pack . show
Why not:
  tshow

1 hint</code></pre>
<p>無事に <code>Error</code> として <code>tshow</code> のためのヒントが表示されました！</p>
<p>ヒントの修正方法は、先程定義した <code>intToText</code> 関数の実装をヒント通りに書き換えるだけです。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="ot">intToText ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2">intToText <span class="fu">=</span> tshow</a></code></pre></div>
<pre class="shell"><code>$ hlint .
No hints</code></pre>
<h3 id="ヒントの定義方法について">ヒントの定義方法について</h3>
<p>さきほど定義したヒントはこのようにポイントフリー形式で書くこともできます。</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="kw">-</span> <span class="fu">error:</span><span class="at"> </span><span class="kw">{</span><span class="fu">lhs:</span><span class="at"> pack . show</span><span class="kw">,</span> <span class="fu">rhs:</span><span class="at"> tshow</span><span class="kw">}</span></a></code></pre></div>
<p>上記のヒント形式で次の内容を解析してみましょう。</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="co">-- src/Lib.hs</span></a>
<a class="sourceLine" id="cb22-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3"></a>
<a class="sourceLine" id="cb22-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Data.Text</span> (pack)</a>
<a class="sourceLine" id="cb22-5" data-line-number="5"></a>
<a class="sourceLine" id="cb22-6" data-line-number="6"><span class="ot">intToText ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb22-7" data-line-number="7">intToText <span class="fu">=</span> pack <span class="fu">.</span> show</a>
<a class="sourceLine" id="cb22-8" data-line-number="8"></a>
<a class="sourceLine" id="cb22-9" data-line-number="9"><span class="ot">intToText2  ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb22-10" data-line-number="10">intToText2 x <span class="fu">=</span> pack <span class="fu">$</span> show x</a></code></pre></div>
<pre class="shell"><code>$ hlint .
./src/Lib.hs:6:13: Error: Use tshow
Found:
  pack . show
Why not:
  tshow

1 hint</code></pre>
<p><code>intToText</code> と <code>intToText2</code> どちらも検出して欲しいですが <code>intToText</code> しか検出できていません。<code>HLint</code> では自動的に η-簡約 (eta-reduction) が行われるため <code>error: {lhs: pack (show x), rhs: tshow x}</code> というように定義しておいた方が良いです。</p>
<h2 id="プロジェクトで利用を禁止している関数を検出する">プロジェクトで利用を禁止している関数を検出する</h2>
<p>プロジェクト内で部分関数 (例: <code>fromJust</code>) を使わせないようにさせたり、<code>undefined</code> が残っていないかなどのチェックをレビュー時に人間が行っていたりしませんか？</p>
<p>人間が介入するということは必ずミスが起こります。人間が気をつければミスは起こらないと思っていたり、精神力でなんとかしようとしている場合は能力不足を疑われても仕方がありません。</p>
<p>また、そのようなつまらない間違い探しのような非クリエイティブな作業に大切な時間を割いてしまうのはとても良くないことです。</p>
<p><code>HLint</code> を使えば、そのような関数を検出することが可能です。実際には <code>関数</code> だけでなく <code>言語拡張</code>, <code>フラグ</code>, <code>モジュール</code> も指定することができます。</p>
<h3 id="関数を指定する方法">関数を指定する方法</h3>
<p><code>.hlint.yaml</code> に以下の内容を追記します。今回は <code>undefined</code> を検出してみたいと思います。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="co"># .hlint.yaml</span></a>
<a class="sourceLine" id="cb24-2" data-line-number="2"><span class="kw">-</span> <span class="fu">functions:</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3">  <span class="kw">-</span> <span class="kw">{</span><span class="fu">name:</span><span class="at"> undefined</span><span class="kw">,</span> <span class="fu">within:</span><span class="at"> </span><span class="kw">[]}</span></a></code></pre></div>
<p>現状はどこにも使われていないためヒントは表示されません。</p>
<pre class="shell"><code>$ hlint .
No hints</code></pre>
<p>では、以下の関数を追加してみましょう。このように型レベルで設計して、実装を <code>undefined</code> にしておくことは良くあります。</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1"><span class="co">-- src/Lib.hs</span></a>
<a class="sourceLine" id="cb26-2" data-line-number="2"><span class="ot">doubleToText ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3">doubleToText <span class="fu">=</span> undefined</a></code></pre></div>
<p>忘れずに実装してしまえば問題無いのですが、たまには忘れることもあります。しかし、<code>HLint</code> があれば安心です。</p>
<pre class="shell"><code>$ hlint .
./src/Lib.hs:18:16: Warning: Avoid restricted function
Found:
  undefined
Note: may break the code

1 hint</code></pre>
<p><code>Lib</code> モジュールのみを検査対象とする場合は <code>within</code> キーワードを次のようにします。</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="co"># .hlint.yaml</span></a>
<a class="sourceLine" id="cb28-2" data-line-number="2"><span class="kw">-</span> <span class="fu">functions:</span></a>
<a class="sourceLine" id="cb28-3" data-line-number="3">  <span class="kw">-</span> <span class="kw">{</span><span class="fu">name:</span><span class="at"> undefined</span><span class="kw">,</span> <span class="fu">within:</span><span class="at"> </span><span class="kw">[</span>Lib<span class="kw">]}</span></a></code></pre></div>
<h2 id="hlint-のヒントを無視する方法">HLint のヒントを無視する方法</h2>
<p><code>HLint</code> のヒントを無視する方法には以下の2種類があります。</p>
<ul>
<li><code>.hlint.yaml</code> ファイルで指定する (<strong>全てのファイル</strong>に影響)</li>
<li>ファイルに直接 <code>{-# ANN -#}</code> アノテーションを記述する (<strong>アノテーションの範囲</strong>にのみ影響)</li>
</ul>
<p>書式がちょっとわかりづらいので、実際に色々試してみましょう。</p>
<h3 id="関数単位で全てのヒントを無視する">関数単位で全てのヒントを無視する</h3>
<p>最初に定義した <code>someFunc</code> 関数はヒントを2つ提案してくれていました。</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1"><span class="co">-- src/Lib.hs</span></a>
<a class="sourceLine" id="cb29-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb29-3" data-line-number="3"></a>
<a class="sourceLine" id="cb29-4" data-line-number="4"><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb29-5" data-line-number="5">someFunc <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb29-6" data-line-number="6">  <span class="kw">let</span> x1 <span class="fu">=</span> concat (map toUpper [<span class="ch">&#39;a&#39;</span> <span class="fu">..</span> <span class="ch">&#39;z&#39;</span>])</a>
<a class="sourceLine" id="cb29-7" data-line-number="7">      x2 <span class="fu">=</span> maybe <span class="st">&quot;&quot;</span> id <span class="st">&quot;abc&quot;</span></a>
<a class="sourceLine" id="cb29-8" data-line-number="8">  putStrLn <span class="st">&quot;someFunc&quot;</span></a></code></pre></div>
<pre class="shell"><code>$ hlint .
./src/Lib.hs:6:12: Warning: Use concatMap
Found:
  concat (map toUpper [&#39;a&#39; .. &#39;z&#39;])
Why not:
  concatMap toUpper [&#39;a&#39; .. &#39;z&#39;]

./src/Lib.hs:7:12: Warning: Use fromMaybe
Found:
  maybe &quot;&quot; id
Why not:
  Data.Maybe.fromMaybe &quot;&quot;

2 hints</code></pre>
<p>提案されているヒントは以下の2つです。</p>
<ul>
<li>Warning: <code>Use concatMap</code></li>
<li>Warning: <code>Use fromMaybe</code></li>
</ul>
<p>とりあえず <code>someFunc</code> のヒントを全て無視するようにしてしまいましょう。</p>
<p>こんな感じで <code>{-# ANN someFunc &quot;HLint: ignore&quot; #-}</code> というアノテーションをつけます。</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb31-1" data-line-number="1"><span class="co">-- src/Lib.hs</span></a>
<a class="sourceLine" id="cb31-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Lib</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb31-3" data-line-number="3"></a>
<a class="sourceLine" id="cb31-4" data-line-number="4"><span class="ot">{-# ANN someFunc &quot;HLint: ignore&quot; #-}</span></a>
<a class="sourceLine" id="cb31-5" data-line-number="5"><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb31-6" data-line-number="6">someFunc <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb31-7" data-line-number="7">  <span class="kw">let</span> x1 <span class="fu">=</span> concat (map toUpper [<span class="ch">&#39;a&#39;</span> <span class="fu">..</span> <span class="ch">&#39;z&#39;</span>])</a>
<a class="sourceLine" id="cb31-8" data-line-number="8">      x2 <span class="fu">=</span> maybe <span class="st">&quot;&quot;</span> id <span class="st">&quot;abc&quot;</span></a>
<a class="sourceLine" id="cb31-9" data-line-number="9">  putStrLn <span class="st">&quot;someFunc&quot;</span></a></code></pre></div>
<pre class="shell"><code>$ hlint .
No hints</code></pre>
<p>これで <code>src/Lib.hs</code> に記述されている <code>someFunc</code> 関数のみ <code>HLint</code> のヒントを無視できるようになりました。</p>
<h3 id="ヒントを無視する様々な方法">ヒントを無視する様々な方法</h3>
<p>ヒントレベルは <code>ignore</code> 以外にも <code>suggest</code>, <code>warn</code>, <code>error</code> が利用可能です。これらの値を利用した場合は出力時のヒントレベルが強制的にそのレベルに上書きされます。つまり、ヒントファイルに <code>warn</code> で定義されていたとしても <code>error</code> や <code>ignore</code> として処理されることになります。</p>
<h4 id="関数単位で全てのヒントを無視する方法">関数単位で全てのヒントを無視する方法</h4>
<p><code>ANN</code> のあとに対象の関数名を書きます。</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb33-1" data-line-number="1"><span class="ot">{-# ANN someFunc &quot;HLint: ignore&quot; #-}</span></a></code></pre></div>
<h4 id="関数単位で特定のヒントのみを無視する方法">関数単位で特定のヒントのみを無視する方法</h4>
<p><code>HLint: ignore</code> の後にヒント名を書きます。</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb34-1" data-line-number="1"><span class="ot">{-# ANN someFunc &quot;HLint: ignore Use fromMaybe&quot; #-}</span></a>
<a class="sourceLine" id="cb34-2" data-line-number="2"><span class="ot">{-# ANN someFunc &quot;HLint: ignore Use concatMap&quot; #-}</span></a></code></pre></div>
<h4 id="モジュール単位で無視する方法">モジュール単位で無視する方法</h4>
<p><code>module</code> キーワードを使う場合はアノテーションを <code>import</code> 文の後に設置しないと上手く動かないので、その点のみ注意が必要です。</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb35-1" data-line-number="1"><span class="ot">{-# ANN module &quot;HLint: ignore&quot; #-}</span></a>
<a class="sourceLine" id="cb35-2" data-line-number="2"></a>
<a class="sourceLine" id="cb35-3" data-line-number="3"><span class="ot">{-# ANN module &quot;HLint: ignore Use fromMaybe&quot; #-}</span></a>
<a class="sourceLine" id="cb35-4" data-line-number="4"><span class="ot">{-# ANN module &quot;HLint: ignore Use concatMap&quot; #-}</span></a></code></pre></div>
<h3 id="overloadedstrings-言語拡張">OverloadedStrings 言語拡張</h3>
<p>言語拡張の <code>OverloadedStrings</code> を有効化している場合は上手く動かないため、明示的に <code>String</code> の型注釈を指定する必要があります。</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb36-1" data-line-number="1"><span class="ot">{-# ANN someFunc (&quot;HLint: ignore&quot; :: String) #-}</span></a></code></pre></div>
<h3 id="ヒントファイルを使って無視する方法">ヒントファイルを使って無視する方法</h3>
<p>プロジェクト全体で無視したいヒントについては <code>.hint.yaml</code> に追記します。</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb37-1" data-line-number="1"><span class="co"># .hint.yaml</span></a>
<a class="sourceLine" id="cb37-2" data-line-number="2"><span class="kw">-</span> <span class="fu">ignore:</span><span class="at"> </span><span class="kw">{</span><span class="fu">name:</span><span class="at"> Use fromMaybe</span><span class="kw">}</span></a>
<a class="sourceLine" id="cb37-3" data-line-number="3"><span class="kw">-</span> <span class="fu">ignore:</span><span class="at"> </span><span class="kw">{</span><span class="fu">name:</span><span class="at"> Use concatMap</span><span class="kw">}</span></a></code></pre></div>
<p><code>within</code> キーワードでヒントを適用するモジュールを指定できます。</p>
<p>例として <code>Lib</code> モジュールのみを対象とする場合は次のようになります。(この場合は <code>ignore</code> が指定されているので <code>Lib</code> モジュールのみヒントを無視します)</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb38-1" data-line-number="1"><span class="co"># .hlint.yaml</span></a>
<a class="sourceLine" id="cb38-2" data-line-number="2"><span class="kw">-</span> <span class="fu">ignore:</span><span class="at"> </span><span class="kw">{</span><span class="fu">name:</span><span class="at"> Use fromMaybe</span><span class="kw">,</span> <span class="fu">within:</span><span class="at"> </span><span class="kw">[</span>Lib<span class="kw">]}</span></a>
<a class="sourceLine" id="cb38-3" data-line-number="3"><span class="kw">-</span> <span class="fu">ignore:</span><span class="at"> </span><span class="kw">{</span><span class="fu">name:</span><span class="at"> Use concatMap</span><span class="kw">,</span> <span class="fu">within:</span><span class="at"> </span><span class="kw">[</span>Lib<span class="kw">]}</span></a></code></pre></div>
<h2 id="ci-を回す">CI を回す！</h2>
<p><code>Haskell</code> のプロジェクトでよく見る <code>CI</code> ツールといえば以下の2つでしょう。</p>
<ul>
<li><a href="https://travis-ci.org/">Travis CI</a></li>
<li><a href="https://circleci.com/">CircleCI 2.0</a></li>
</ul>
<p>個人的には以下の点で <code>CircleCI</code> が好きです。</p>
<ul>
<li>プライベートリポジトリも無料で使える</li>
<li><code>Docker</code>, <code>docker-compose</code> と親和性が高い</li>
</ul>
<p>ここでは <code>HLint</code> の内容にしか言及しませんが、機会があれば <code>CI</code> については別途記事にしたいと思います。</p>
<h3 id="travis-ci">Travis CI</h3>
<p><code>.travis.yml</code> に以下の内容を記述するだけです。</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb39-1" data-line-number="1"><span class="co"># .travis.yml</span></a>
<a class="sourceLine" id="cb39-2" data-line-number="2"><span class="fu">sudo:</span><span class="at"> false</span></a>
<a class="sourceLine" id="cb39-3" data-line-number="3"><span class="fu">language:</span><span class="at"> generic</span></a>
<a class="sourceLine" id="cb39-4" data-line-number="4"><span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb39-5" data-line-number="5">  <span class="fu">include:</span></a>
<a class="sourceLine" id="cb39-6" data-line-number="6">    <span class="kw">-</span> <span class="fu">stage:</span><span class="at"> Run hlint</span></a>
<a class="sourceLine" id="cb39-7" data-line-number="7">      <span class="fu">script:</span><span class="at"> curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .</span></a></code></pre></div>
<h3 id="circleci-2.0">CircleCI 2.0</h3>
<p><code>.circleci/config.yml</code> に以下の内容を記述するだけです。</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb40-1" data-line-number="1"><span class="fu">version:</span><span class="at"> 2</span></a>
<a class="sourceLine" id="cb40-2" data-line-number="2"><span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb40-3" data-line-number="3">  <span class="fu">hlint:</span></a>
<a class="sourceLine" id="cb40-4" data-line-number="4">    <span class="fu">docker:</span></a>
<a class="sourceLine" id="cb40-5" data-line-number="5">      <span class="kw">-</span> <span class="fu">image:</span><span class="at"> ubuntu:16.04</span></a>
<a class="sourceLine" id="cb40-6" data-line-number="6">    <span class="fu">steps:</span></a>
<a class="sourceLine" id="cb40-7" data-line-number="7">      <span class="kw">-</span> checkout</a>
<a class="sourceLine" id="cb40-8" data-line-number="8">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb40-9" data-line-number="9">          <span class="fu">name:</span><span class="at"> Run hlint</span></a>
<a class="sourceLine" id="cb40-10" data-line-number="10">          <span class="fu">command:</span><span class="at"> |</span></a>
<a class="sourceLine" id="cb40-11" data-line-number="11">            apt update</a>
<a class="sourceLine" id="cb40-12" data-line-number="12">            apt install -y curl</a>
<a class="sourceLine" id="cb40-13" data-line-number="13">            <span class="fu">curl -sL https:</span><span class="at">//raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .</span></a>
<a class="sourceLine" id="cb40-14" data-line-number="14"><span class="fu">workflows:</span></a>
<a class="sourceLine" id="cb40-15" data-line-number="15">  <span class="fu">version:</span><span class="at"> 2</span></a>
<a class="sourceLine" id="cb40-16" data-line-number="16">  <span class="fu">hlint:</span></a>
<a class="sourceLine" id="cb40-17" data-line-number="17">    <span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb40-18" data-line-number="18">      <span class="kw">-</span> hlint</a></code></pre></div>
<h2 id="まとめ">まとめ</h2>
<p>今回は紹介していませんが <code>HLint</code> のヒントを自動的に適用してくれる <a href="https://github.com/mpickering/apply-refact">apply-refact</a> というツールもあります。使い方については各種ドキュメントをご確認ください。</p>
<ul>
<li><a href="https://github.com/ndmitchell/hlint#automatically-applying-hints">Automatically Applying Hints</a></li>
</ul>
<p>今回は <code>Haskell</code> の静的解析ツール <code>HLint</code> について説明を行いました。需要があれば <code>LiquidHaskell</code> などの他の静的解析ツールについても、チュートリアル的な解説記事を書いていきたいところです。</p>]]></summary>
</entry>
<entry>
    <title>Yesod の破壊的変更予定</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-01-27-Upcoming-Yesod-breaking-changes.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-01-27-Upcoming-Yesod-breaking-changes.html</id>
    <published>2018-01-27T00:00:00Z</published>
    <updated>2018-01-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Original post: <a href="https://www.yesodweb.com/blog/2018/01/upcoming-yesod-breaking-changes">Upcoming Yesod breaking changes</a></p>
<p>2018年 1月 11日 Michael Snoyman</p>
<p>私が作ったライブラリの破壊的変更点について話をしてきましたが、Yesod をその変更から取り残したくはありませんでした。yesod-core は 2014年からバージョン1.4 で安定しています。しかし、私のパッケージエコシステムにおける <code>MonadUnliftIO</code> の変更は Yesod にも影響してくるでしょう。問題は、どの程度かということです。</p>
<!--more-->
<p>知らない人のために補足しておくと、<code>MonadUnliftIO</code> は <code>monad-control</code> と <code>exceptions</code> にそれぞれ存在する <code>MonadBaseControl</code> と <code>MonadCatch/MonadMask</code> クラスの代替となる型クラスです。私はこれまでこの新しいアプローチのメリットを至る所で言及してきましたが、おそらく一番良い資料は<a href="https://www.fpcomplete.com/blog/2017/07/announcing-new-unliftio-library">リリースアナウンスのブログ記事</a>でしょう。</p>
<p>予定されている Yesod の変更点を簡潔に述べると:</p>
<ul>
<li><code>WidgetT</code> の内部表現を変更する。現在は <code>WriterT</code> として実装されているので変更が必要です。<code>MonadUnliftIO</code> とマッチさせるために、<code>IORef</code> を持つ <code>ReaderT</code> にする必要があります。この変更は内部モジュールにしか影響しないため、私の想像ではかなり小さな変更になります (非破壊的変更と言い換えることもできる)。</li>
<li><code>MonadBaseControl</code> と <code>MonadCatch/MonadMask</code> のインスタンスを削除する。これは厳密には必要ないですが、2つのアドバンテージがあります: 依存関係の数を少なくし、<code>HandlerT</code> の上に <code>StateT</code> を乗せた状態で <code>concurrently</code> を使うような危険な振る舞いを避けることができます。</li>
<li>依存しているライブラリを、変更後の新しいバージョンに切り替える。特に conduit や resourcet など。これも厳密には破壊的変更ではないですが、私は依存関係のメジャーバージョンへのサポートを打ち切ることを半破壊的変更だと捉えています。</li>
<li>破壊的変更に伴う、いくつもの小さなお片付け。いくつかの場所に正格化のためのアノテーションを追加するとか、死んでいる <code>GoogleEmail</code> や <code>BrowserId</code> 等のモジュールの削除などです。</li>
</ul>
<p>これは完全に筋の通った変更で、Yesod 1.5 (2.0) としてリリースします。私が実験しているもう少し大きな変更があるので、それをここで共有しておきます。この変更が Yesod のユーザーにとって価値があるかどうか、フィードバックをお願いしたいです。</p>
<h2 id="トランスフォーマーから離れろ">トランスフォーマーから離れろ!</h2>
<p>以下の説明は、こういう議論ではいつもそうであるように、仕方なく <code>IO</code> に入れなければならないコードについて言及したものです。純粋なコードは今回はパスです。</p>
<p>(実際の変更よりも大きく見えますが) 変更は <a href="https://github.com/yesodweb/yesod/pull/1466">no-transformer ブランチ</a> で確認できます。まぁすぐに嘘だと分かると思いますが、意図を正確に表しています。ここ 1年間のブログ記事の雰囲気と推奨しているベストプラクティスについての私の議論を見れば、次の簡単な主張に帰結します: モダンな Haskell はモナドトランスフォーマーを使いすぎなのです</p>
<p>この主張に対して最も過激な反応をするなら、全てのトランスフォーマーを削除し、全てのコードを <code>IO</code> に入れる、というものになります。私はちょっと妥協して、reader の機能は残す価値があると判断しました。なぜなら、<code>logInfo</code> のような単純な関数に何かを追加で渡すのは、かなりの苦痛だからです。Yesod の核となっている型は <code>HandlerT</code> で、<code>getHomeR :: HandlerT App IO Html</code> のように使われます。内部では、<code>HandlerT</code> は以下のようになっています:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">HandlerT</span> site m a <span class="fu">=</span> <span class="dt">HandlerT</span> (<span class="dt">HandlerData</span> site <span class="ot">-&gt;</span> m a)</a></code></pre></div>
<p>簡単な質問をしましょう: <code>HandlerT</code> は本当にトランスフォーマーである必要があるのでしょうか?</p>
<p>なぜシンプルにこんな風に書かないのでしょうか:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">HandlerFor</span> site a <span class="fu">=</span> <span class="dt">HandlerFor</span> (<span class="dt">HandlerData</span> site <span class="ot">-&gt;</span> <span class="dt">IO</span> a)</a></code></pre></div>
<p><code>m</code> という型引数を <code>IO</code> という具体的なものに変えただけです。どんな場所でもハンドラはベースモナドとして <code>IO</code> を持つ、という前提がすでにあるので、汎用性が無くなるわけではありません。</p>
<p>しかしこの結果得られるものは:</p>
<ul>
<li>少し分かりやすいエラーメッセージ</li>
<li>より少ない型制約。思い浮かぶのは <code>MonadUnliftIO m</code> みたいな</li>
<li>内部で、型族周りの汚い部分をかなりシンプルにできる。</li>
</ul>
<p>ヘルパー型シノニムを導入すれば、多くの後方互換性を得ることができます:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">type</span> <span class="dt">HandlerT</span> site m <span class="fu">=</span> <span class="dt">HandlerFor</span> site</a></code></pre></div>
<p>さらに、Template Haskell によって生成された <code>Handler</code> という型シノニムを使っているなら、新しいバージョンの Yesod は正しいものを生成してくれるでしょう。全体として、これはほんの少しの改善です。この変更によって得られる利益と破壊のコストを天秤にかける必要があります。ただ、まだ折衷案が残っています。</p>
<h2 id="サブサイトを扱う-ええトランスフォーマーです">サブサイトを扱う (ええ、トランスフォーマーです)</h2>
<p>私は 2回嘘をつきました: さっきのブランチはトランスフォーマーを使っています。そして <code>HandlerT</code> は <code>HandlerFor</code> よりも一般的です。いずれの場合もサブサイトをどうにかする必要がありますが、これは歴史的に苦痛を伴う作業です (使う分にはひどすぎることもないです)。実は、今日 <code>HandlerT</code> が存在する唯一の理由に、サブサイトを綺麗に層に分けるやり方で実装しようとした、というものがあります (失敗しましたが)。Yesod を長く使っている人は <code>GHandler</code> という前回のアプローチを覚えているかもしれません。そして、サブサイトを書いたことがあって <code>defaultLayout</code> を使う時に起こる地獄を知っている人は、現在の状況は良くないということに同意してくれると思います。</p>
<p>なので、問題を全て解決するため: サブサイトを書く時、ほとんど全てが普通の handler のコードを書くのと同じです。以下の点が違いますが:</p>
<ul>
<li><code>getYesod</code> を呼ぶ時、マスターサイトの app データを受け取る (例えば、スキャフォールドサイトの <code>App</code>)。サブサイトのデータを入手する方法も必要になります (例えば、<code>yesod-static</code> の <code>Static</code> という値)。</li>
<li><code>getCurrentRoute</code> を呼ぶと、マスターサイトのルートを返してくれます。例えば、<code>yesod-auth</code> の中にいる時、親サイトの取りうる全てのルートを扱いたくはないでしょう。その代わりに、サブサイト自身のルートを知りたいはずです。</li>
<li>URL を生成する時、サブサイトのルートを親サイトのルートに変換する手段が必要になります。</li>
</ul>
<p>今日の Yesod では、これらの違いを <code>HandlerT</code> の中で提供しています。こうすると、ベースケースの <code>m</code> を <code>IO</code> にする時に、やけに複雑になります。その代わりに、新しいブランチでは <code>HandlerFor</code> の上に <code>ReaderT</code> 1層を置き、これら 3つの機能を提供しています。詳しく知りたい方は<a href="https://github.com/yesodweb/yesod/blob/3e06942449cad0b52e218cb7e9f2c06b45b85e69/yesod-core/Yesod/Core/Class/Dispatch.hs#L38">コードを見てください</a>。</p>
<h2 id="何をすべきか">何をすべきか?</h2>
<p>全体的に、私はこの設計をエレガントで、理解しやすく、コードを綺麗にしてくれるものだと思っています。現実問題、昔のものから大きく離れたわけでも大きく改善されたわけでもありませんし、私はトランスフォーマーを無くすような変更の道半ばで進めなくなっています。</p>
<p>近い将来、Yesod には破壊的変更が行われますが、必ずしもこの変更を含む必要はありません。もしこの変更が追加されないのなら、破壊的変更は上で言及した、かなりマイナーなものになるでしょう。この変更が好ましいという一般のコンセンサスが得られたなら、同時に追加した方がいいでしょうね。</p>]]></summary>
</entry>
<entry>
    <title>最近遭遇した stack build 時の ld (pthread, -fPIC) エラー</title>
    <link href="https://haskell.e-bigmoon.com/posts/2018-01-06-stack-ld-errors.html" />
    <id>https://haskell.e-bigmoon.com/posts/2018-01-06-stack-ld-errors.html</id>
    <published>2018-01-06T00:00:00Z</published>
    <updated>2018-01-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>ここ最近、プロジェクトのビルド時に謎のエラーが発生するようになりました。</p>
<p>以下の2種類のエラーに遭遇したので、今後のために記録しておきます。</p>
<ul>
<li><code>pthread link error</code></li>
<li><code>-fPIC error</code></li>
</ul>
<pre class="shell"><code>$ stack --version
Version 1.7.0, Git revision 19e3460496f8fd2c462fb35a5825301e5c3c4eb0 (5527 commits) x86_64 hpack-0.20.0</code></pre>
<!--more-->
<h2 id="pthread-link-error">pthread link error</h2>
<p>このエラーは <code>Hakyll</code> を利用しているサイトをビルドしている時に発生したものです。</p>
<p>関連する <code>issue</code> は以下の通りです。</p>
<ul>
<li><a href="https://github.com/jgm/pandoc/issues/4130">pthread link errors on linux with GHC 8.2 #4130</a></li>
<li><a href="https://github.com/jgm/pandoc-citeproc/issues/311">Error building on Ubuntu 16 #311</a></li>
</ul>
<p><code>issue</code> に掲載されているエラーメッセージですが、以下のように <code>pthread</code> 系のエラーが表示され、結果として <code>gcc failed in phase Linker. (Exit code: 1)</code> となります。</p>
<pre class="shell"><code>    Linking .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/pandoc-citeproc/pandoc-citeproc ...

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:137:0: error:
         error: undefined reference to &#39;pthread_create&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:139:0: error:
         error: undefined reference to &#39;pthread_detach&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:141:0: error:
         error: undefined reference to &#39;pthread_setname_np&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:184:0: error:
         error: undefined reference to &#39;pthread_key_create&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:192:0: error:
         error: undefined reference to &#39;pthread_getspecific&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:203:0: error:
         error: undefined reference to &#39;pthread_setspecific&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:212:0: error:
         error: undefined reference to &#39;pthread_key_delete&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/rts/posix/OSThreads.c:371:0: error:
         error: undefined reference to &#39;pthread_kill&#39;

    /tmp/stack11451/pandoc-citeproc-0.12.1.1/includes/rts/OSThreads.h:59:0: error:
         error: undefined reference to &#39;pthread_mutex_trylock&#39;
    collect2: error: ld returned 1 exit status
    `gcc&#39; failed in phase `Linker&#39;. (Exit code: 1)</code></pre>
<p>修正方法は簡単で <code>package.yaml</code> や <code>cabal</code> ファイルの <code>ghc-options</code> に <code>-threaded</code> を追記するだけです。</p>
<p>具体的にはこんな感じで修正しました。</p>
<ul>
<li><a href="https://github.com/jaspervdj/hakyll/pull/601/files">Added -threaded to ghc-options. pthread link errors on linux with GHC 8.2 #601</a></li>
</ul>
<p>なぜこのエラーが発生したのかはわからないのですが <code>lts-10</code> 系にしたタイミングで遭遇しました。</p>
<h2 id="fpic-error">-fPIC error</h2>
<p><code>Mac</code> では確認できなかったのですが <code>Ubuntu 17.10</code> で以下のエラーに遭遇しました。</p>
<pre class="shell"><code>    /usr/bin/ld: /home/bm12/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/rts/libHSrts_thr.a(Arena.thr_o): relocation R_X86_64_32 against .rodata.str1.1 can not be used when making a shared object。 -fPIC を付けて再コンパイルしてください。
    /usr/bin/ld: /home/bm12/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/rts/libCffi.a(closures.o): relocation R_X86_64_32 against .rodata can not be used when making a shared object。 -fPIC を付けて再コンパイルしてください。
    /usr/bin/ld: /home/bm12/.stack/programs/x86_64-linux/ghc-8.0.2/lib/ghc-8.0.2/rts/libCffi.a(ffi64.o): relocation R_X86_64_32S against .rodata can not be used when making a shared object。 -fPIC を付けて再コンパイルしてください。
    /usr/bin/ld: 最終リンクに失敗しました: 出力に対応するセクションがありません
    collect2: error: ld returned 1 exit status
    gcc failed in phase Linker. (Exit code: 1)</code></pre>
<p><code>stack</code> の <code>issue</code> でも話題になってました。</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/3518">Stack 1.6 linking issues on Arch Linux #3518</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/2712">Linker error makes it impossible to use a stack-provided ghc #2712</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3630">Benchmarks can no longer be built with Stack 1.6.1 #3630</a></li>
<li><a href="https://github.com/commercialhaskell/stack/issues/3648">ghc-tinfo6-nopie-8.2.2 requires changes to its settings file to work on Arch Linux #3648</a></li>
</ul>
<p>解決策がまとまり <code>faq</code> に追加されたので、同じエラーで悩んでいる人は一度ご確認ください。</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/pull/3725">faq update: ld errors about recompiling with -fPIC #3725</a></li>
</ul>
<p>解決方法がとても簡単で、以下のコマンドを実行して <code>ghc</code> を再インストールするだけです。</p>
<pre class="shell"><code>$ stack setup --reinstall</code></pre>
<h2 id="まとめ">まとめ</h2>
<p>突然ビルドできなくなることもあるんですね・・・。</p>]]></summary>
</entry>
<entry>
    <title>travis-ci の初回ビルドで OUT OF MEMORY が出た時の対処法</title>
    <link href="https://haskell.e-bigmoon.com/posts/2017-12-31-travis-out-of-memory.html" />
    <id>https://haskell.e-bigmoon.com/posts/2017-12-31-travis-out-of-memory.html</id>
    <published>2017-12-31T00:00:00Z</published>
    <updated>2017-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p><code>travis-ci</code> の初回ビルド時に以下のようなエラーメッセージが表示されてビルドに失敗してしまうことがあります。</p>
<pre class="shell"><code>The command &quot;stack --no-terminal test --only-dependencies&quot; failed and exited with 1 during .

Your build has been stopped.</code></pre>
<p>結論から言えば、初回ビルド時はキャッシュが働かないため、多くの依存関係をビルドする必要があり、その過程でメモリ不足になってしまっていました。</p>
<p>この問題をどうすれば解決できるか、メモ程度に残しておこうと思います。</p>
<!--more-->
<h2 id="travis.yml">.travis.yml</h2>
<p>今回は以下のような <code>.travis.yml</code> を用意しました。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">{</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">  <span class="fu">&quot;sudo&quot;:</span><span class="at"> false</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">  <span class="fu">&quot;language&quot;:</span><span class="at"> </span><span class="st">&quot;generic&quot;</span><span class="er">,</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4">  <span class="fu">&quot;cache&quot;:</span><span class="at"> </span><span class="kw">{</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">    <span class="fu">&quot;directories&quot;:</span><span class="at"> </span><span class="kw">[</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">      <span class="st">&quot;$HOME/.stack/&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">      <span class="st">&quot;$HOME/.local/bin/&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8">      <span class="st">&quot;.stack-work/&quot;</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">    <span class="kw">]</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">  <span class="kw">}</span><span class="at">,</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">  <span class="fu">&quot;before_install&quot;:</span><span class="at"> </span><span class="kw">[</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12">    <span class="st">&quot;mkdir -p ~/.local/bin&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13">    <span class="st">&quot;export PATH=$HOME/.local/bin:$PATH&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb2-14" data-line-number="14">    <span class="st">&quot;travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &#39;*/stack&#39;&quot;</span></a>
<a class="sourceLine" id="cb2-15" data-line-number="15">  <span class="kw">]</span><span class="at">,</span></a>
<a class="sourceLine" id="cb2-16" data-line-number="16">  <span class="fu">&quot;install&quot;:</span><span class="at"> </span><span class="kw">[</span></a>
<a class="sourceLine" id="cb2-17" data-line-number="17">    <span class="st">&quot;stack --no-terminal test --only-dependencies&quot;</span></a>
<a class="sourceLine" id="cb2-18" data-line-number="18">  <span class="kw">]</span><span class="at">,</span></a>
<a class="sourceLine" id="cb2-19" data-line-number="19">  <span class="fu">&quot;group&quot;:</span><span class="at"> </span><span class="st">&quot;stable&quot;</span><span class="er">,</span></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  <span class="fu">&quot;dist&quot;:</span><span class="at"> </span><span class="st">&quot;trusty&quot;</span><span class="er">,</span></a>
<a class="sourceLine" id="cb2-21" data-line-number="21">  <span class="fu">&quot;os&quot;:</span><span class="at"> </span><span class="st">&quot;linux&quot;</span></a>
<a class="sourceLine" id="cb2-22" data-line-number="22">}</a></code></pre></div>
<p>問題の行は <code>stack --no-terminal test --only-dependencies</code> です。</p>
<p>この記述は<a href="https://github.com/commercialhaskell/stack/blob/master/doc/travis_ci.md">公式ドキュメント</a>の<a href="https://raw.githubusercontent.com/commercialhaskell/stack/stable/doc/travis-simple.yml">The simple Travis configuration</a> として紹介されています。</p>
<p>基本的には特に気にしなくても良いのですが <code>Hakyll</code> などの依存関係が多いプロジェクトでは <code>OUT OF MEMORY</code> が発生することがあります。</p>
<h2 id="エラーメッセージ">エラーメッセージ</h2>
<ul>
<li>実際の<a href="https://travis-ci.org/wataru86/haskell-blog/builds/323115071">ログ</a></li>
</ul>
<p>ちょっと長いですが、エラー部分のログを載せます。</p>
<pre class="shell"><code>regex-tdfa-1.2.2: copy/register
aeson-1.2.3.0: copy/register
JuicyPixels-3.2.9.1: copy/register
--  While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)
    Logs have been written to: /home/travis/build/wataru86/haskell-blog/.stack-work/logs/Cabal-2.0.1.1.log
    Configuring Cabal-2.0.1.1...
    Preprocessing library for Cabal-2.0.1.1..
    Building library for Cabal-2.0.1.1..
    [  1 of 168] Compiling Distribution.Compat.Binary ( Distribution/Compat/Binary.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Binary.o )
    [  2 of 168] Compiling Distribution.Compat.Exception ( Distribution/Compat/Exception.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Exception.o )
    [  3 of 168] Compiling Distribution.Compat.Internal.TempFile ( Distribution/Compat/Internal/TempFile.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Internal/TempFile.o )
    [  4 of 168] Compiling Distribution.Compat.Map.Strict ( Distribution/Compat/Map/Strict.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Map/Strict.o )
    [  5 of 168] Compiling Distribution.Compat.MonadFail ( Distribution/Compat/MonadFail.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/MonadFail.o )
    [  6 of 168] Compiling Distribution.Compat.Semigroup ( Distribution/Compat/Semigroup.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Semigroup.o )
    [  7 of 168] Compiling Distribution.Compat.Stack ( Distribution/Compat/Stack.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Stack.o )
    [  8 of 168] Compiling Distribution.Compat.Prelude ( Distribution/Compat/Prelude.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Prelude.o )
    [  9 of 168] Compiling Distribution.Compat.SnocList ( Distribution/Compat/SnocList.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/SnocList.o )
    [ 10 of 168] Compiling Distribution.Compat.ReadP ( Distribution/Compat/ReadP.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/ReadP.o )
    [ 11 of 168] Compiling Distribution.Compat.Prelude.Internal ( Distribution/Compat/Prelude/Internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Prelude/Internal.o )
    [ 12 of 168] Compiling Distribution.Compat.Graph ( Distribution/Compat/Graph.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Graph.o )
    [ 13 of 168] Compiling Distribution.Compat.GetShortPathName ( Distribution/Compat/GetShortPathName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/GetShortPathName.o )
    [ 14 of 168] Compiling Distribution.Compat.DList ( Distribution/Compat/DList.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/DList.o )
    [ 15 of 168] Compiling Distribution.Compat.CopyFile ( Distribution/Compat/CopyFile.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/CopyFile.o )
    [ 16 of 168] Compiling Distribution.Compat.Environment ( Distribution/Compat/Environment.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/Environment.o )
    [ 17 of 168] Compiling Distribution.Compat.CreatePipe ( Distribution/Compat/CreatePipe.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compat/CreatePipe.o )
    [ 18 of 168] Compiling Distribution.GetOpt ( Distribution/GetOpt.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/GetOpt.o )
    [ 19 of 168] Compiling Distribution.Lex ( Distribution/Lex.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Lex.o )
    [ 20 of 168] Compiling Distribution.PackageDescription.Utils ( Distribution/PackageDescription/Utils.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/PackageDescription/Utils.o )
    [ 21 of 168] Compiling Distribution.ReadE ( Distribution/ReadE.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/ReadE.o )
    [ 22 of 168] Compiling Distribution.Simple.CCompiler ( Distribution/Simple/CCompiler.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/CCompiler.o )
    [ 23 of 168] Compiling Distribution.Simple.PreProcess.Unlit ( Distribution/Simple/PreProcess/Unlit.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/PreProcess/Unlit.o )
    [ 24 of 168] Compiling Distribution.Simple.Program.Internal ( Distribution/Simple/Program/Internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Internal.o )
    [ 25 of 168] Compiling Distribution.TestSuite ( Distribution/TestSuite.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/TestSuite.o )
    [ 26 of 168] Compiling Distribution.Text ( Distribution/Text.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Text.o )
    [ 27 of 168] Compiling Distribution.System ( Distribution/System.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/System.o )
    [ 28 of 168] Compiling Distribution.Types.BuildType ( Distribution/Types/BuildType.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/BuildType.o )
    [ 29 of 168] Compiling Distribution.Types.Condition ( Distribution/Types/Condition.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Condition.o )
    [ 30 of 168] Compiling Distribution.Types.CondTree ( Distribution/Types/CondTree.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/CondTree.o )
    [ 31 of 168] Compiling Distribution.Types.ExecutableScope ( Distribution/Types/ExecutableScope.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ExecutableScope.o )
    [ 32 of 168] Compiling Distribution.Types.ForeignLibOption ( Distribution/Types/ForeignLibOption.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ForeignLibOption.o )
    [ 33 of 168] Compiling Distribution.Types.ForeignLibType ( Distribution/Types/ForeignLibType.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ForeignLibType.o )
    [ 34 of 168] Compiling Distribution.Types.SourceRepo ( Distribution/Types/SourceRepo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/SourceRepo.o )
    [ 35 of 168] Compiling Distribution.Utils.Base62 ( Distribution/Utils/Base62.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/Base62.o )
    [ 36 of 168] Compiling Distribution.Utils.MapAccum ( Distribution/Utils/MapAccum.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/MapAccum.o )
    [ 37 of 168] Compiling Distribution.Utils.Progress ( Distribution/Utils/Progress.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/Progress.o )
    [ 38 of 168] Compiling Distribution.Utils.String ( Distribution/Utils/String.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/String.o )
    [ 39 of 168] Compiling Distribution.Utils.ShortText ( Distribution/Utils/ShortText.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/ShortText.o )
    [ 40 of 168] Compiling Distribution.Types.PkgconfigName ( Distribution/Types/PkgconfigName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/PkgconfigName.o )
    [ 41 of 168] Compiling Distribution.Types.ComponentId ( Distribution/Types/ComponentId.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ComponentId.o )
    [ 42 of 168] Compiling Distribution.Types.AbiHash ( Distribution/Types/AbiHash.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/AbiHash.o )
    [ 43 of 168] Compiling Distribution.ModuleName ( Distribution/ModuleName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/ModuleName.o )
    [ 44 of 168] Compiling Distribution.Types.ModuleRenaming ( Distribution/Types/ModuleRenaming.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ModuleRenaming.o )
    [ 45 of 168] Compiling Distribution.Types.IncludeRenaming ( Distribution/Types/IncludeRenaming.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/IncludeRenaming.o )
    [ 46 of 168] Compiling Distribution.Utils.Generic ( Distribution/Utils/Generic.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/Generic.o )
    [ 47 of 168] Compiling Distribution.Utils.UnionFind ( Distribution/Utils/UnionFind.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/UnionFind.o )
    [ 48 of 168] Compiling Distribution.Verbosity ( Distribution/Verbosity.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Verbosity.o )
    [ 49 of 168] Compiling Distribution.Version ( Distribution/Version.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Version.o )
    [ 50 of 168] Compiling Distribution.Types.TestType ( Distribution/Types/TestType.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/TestType.o )
    [ 51 of 168] Compiling Distribution.Types.TestSuiteInterface ( Distribution/Types/TestSuiteInterface.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/TestSuiteInterface.o )
    [ 52 of 168] Compiling Distribution.Types.PkgconfigDependency ( Distribution/Types/PkgconfigDependency.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/PkgconfigDependency.o )
    [ 53 of 168] Compiling Distribution.Types.BenchmarkType ( Distribution/Types/BenchmarkType.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/BenchmarkType.o )
    [ 54 of 168] Compiling Distribution.Types.BenchmarkInterface ( Distribution/Types/BenchmarkInterface.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/BenchmarkInterface.o )
    [ 55 of 168] Compiling Distribution.License ( Distribution/License.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/License.o )
    [ 56 of 168] Compiling Language.Haskell.Extension ( Language/Haskell/Extension.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Language/Haskell/Extension.o )
    [ 57 of 168] Compiling Distribution.Compiler ( Distribution/Compiler.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Compiler.o )
    [ 58 of 168] Compiling Distribution.PrettyUtils ( Distribution/PrettyUtils.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/PrettyUtils.o )
    [ 59 of 168] Compiling Distribution.ParseUtils ( Distribution/ParseUtils.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/ParseUtils.o )
    [ 60 of 168] Compiling Distribution.Types.PackageName ( Distribution/Types/PackageName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/PackageName.o )
    [ 61 of 168] Compiling Distribution.Types.UnqualComponentName ( Distribution/Types/UnqualComponentName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/UnqualComponentName.o )
    [ 62 of 168] Compiling Distribution.Types.ComponentName ( Distribution/Types/ComponentName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ComponentName.o )
    [ 63 of 168] Compiling Distribution.Types.PackageId ( Distribution/Types/PackageId.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/PackageId.o )
    [ 64 of 168] Compiling Distribution.Types.UnitId ( Distribution/Types/UnitId.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/UnitId.o )
    [ 65 of 168] Compiling Distribution.Types.Module ( Distribution/Types/Module.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Module.o )
    [ 66 of 168] Compiling Distribution.Backpack ( Distribution/Backpack.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack.o )
    [ 67 of 168] Compiling Distribution.Backpack.ModSubst ( Distribution/Backpack/ModSubst.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/ModSubst.o )
    [ 68 of 168] Compiling Distribution.Backpack.FullUnitId ( Distribution/Backpack/FullUnitId.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/FullUnitId.o )
    [ 69 of 168] Compiling Distribution.Types.ModuleReexport ( Distribution/Types/ModuleReexport.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ModuleReexport.o )
    [ 70 of 168] Compiling Distribution.Types.Mixin ( Distribution/Types/Mixin.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Mixin.o )
    [ 71 of 168] Compiling Distribution.Types.ExeDependency ( Distribution/Types/ExeDependency.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ExeDependency.o )
    [ 72 of 168] Compiling Distribution.Types.Dependency ( Distribution/Types/Dependency.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Dependency.o )
    [ 73 of 168] Compiling Distribution.Types.SetupBuildInfo ( Distribution/Types/SetupBuildInfo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/SetupBuildInfo.o )
    [ 74 of 168] Compiling Distribution.Types.DependencyMap ( Distribution/Types/DependencyMap.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/DependencyMap.o )
    [ 75 of 168] Compiling Distribution.Simple.GHC.IPIConvert ( Distribution/Simple/GHC/IPIConvert.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/GHC/IPIConvert.o )
    [ 76 of 168] Compiling Distribution.Backpack.ModuleScope ( Distribution/Backpack/ModuleScope.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/ModuleScope.o )
    [ 77 of 168] Compiling Distribution.Types.MungedPackageName ( Distribution/Types/MungedPackageName.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/MungedPackageName.o )
    [ 78 of 168] Compiling Distribution.Types.MungedPackageId ( Distribution/Types/MungedPackageId.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/MungedPackageId.o )
    [ 79 of 168] Compiling Distribution.Package ( Distribution/Package.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Package.o )
    [ 80 of 168] Compiling Distribution.Types.AnnotatedId ( Distribution/Types/AnnotatedId.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/AnnotatedId.o )
    [ 81 of 168] Compiling Distribution.Types.ComponentInclude ( Distribution/Types/ComponentInclude.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ComponentInclude.o )
    [ 82 of 168] Compiling Distribution.Simple.InstallDirs ( Distribution/Simple/InstallDirs.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/InstallDirs.o )
    [ 83 of 168] Compiling Distribution.Types.LegacyExeDependency ( Distribution/Types/LegacyExeDependency.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/LegacyExeDependency.o )
    [ 84 of 168] Compiling Distribution.Types.BuildInfo ( Distribution/Types/BuildInfo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/BuildInfo.o )
    [ 85 of 168] Compiling Distribution.Types.TestSuite ( Distribution/Types/TestSuite.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/TestSuite.o )
    [ 86 of 168] Compiling Distribution.Types.Library ( Distribution/Types/Library.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Library.o )
    [ 87 of 168] Compiling Distribution.Types.HookedBuildInfo ( Distribution/Types/HookedBuildInfo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/HookedBuildInfo.o )
    [ 88 of 168] Compiling Distribution.Types.ForeignLib ( Distribution/Types/ForeignLib.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ForeignLib.o )
    [ 89 of 168] Compiling Distribution.Types.Executable ( Distribution/Types/Executable.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Executable.o )
    [ 90 of 168] Compiling Distribution.Types.Benchmark ( Distribution/Types/Benchmark.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Benchmark.o )
    [ 91 of 168] Compiling Distribution.Types.Component ( Distribution/Types/Component.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/Component.o )
    [ 92 of 168] Compiling Distribution.Types.ComponentRequestedSpec ( Distribution/Types/ComponentRequestedSpec.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ComponentRequestedSpec.o )
    [ 93 of 168] Compiling Distribution.Types.PackageDescription ( Distribution/Types/PackageDescription.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/PackageDescription.o )
    [ 94 of 168] Compiling Distribution.Types.GenericPackageDescription ( Distribution/Types/GenericPackageDescription.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/GenericPackageDescription.o )
    [ 95 of 168] Compiling Distribution.PackageDescription ( Distribution/PackageDescription.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/PackageDescription.o )
    [ 96 of 168] Compiling Distribution.Simple.BuildToolDepends ( Distribution/Simple/BuildToolDepends.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/BuildToolDepends.o )
    [ 97 of 168] Compiling Distribution.InstalledPackageInfo ( Distribution/InstalledPackageInfo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/InstalledPackageInfo.o )
    [ 98 of 168] Compiling Distribution.Types.ComponentLocalBuildInfo ( Distribution/Types/ComponentLocalBuildInfo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/ComponentLocalBuildInfo.o )
    [ 99 of 168] Compiling Distribution.Types.TargetInfo ( Distribution/Types/TargetInfo.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Types/TargetInfo.o )
    [100 of 168] Compiling Distribution.Simple.GHC.IPI642 ( Distribution/Simple/GHC/IPI642.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/GHC/IPI642.o )
    [101 of 168] Compiling Distribution.Backpack.ModuleShape ( Distribution/Backpack/ModuleShape.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/ModuleShape.o )
    [102 of 168] Compiling Distribution.Backpack.UnifyM ( Distribution/Backpack/UnifyM.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/UnifyM.o )
    [103 of 168] Compiling Distribution.Backpack.MixLink ( Distribution/Backpack/MixLink.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/MixLink.o )
    [104 of 168] Compiling Distribution.Backpack.PreExistingComponent ( Distribution/Backpack/PreExistingComponent.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Backpack/PreExistingComponent.o )
    [105 of 168] Compiling Paths_Cabal      ( .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/autogen/Paths_Cabal.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Paths_Cabal.o )
    [106 of 168] Compiling Distribution.Simple.Utils ( Distribution/Simple/Utils.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Utils.o )
    [107 of 168] Compiling Distribution.Utils.NubList ( Distribution/Utils/NubList.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/NubList.o )
    [108 of 168] Compiling Distribution.Utils.LogProgress ( Distribution/Utils/LogProgress.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Utils/LogProgress.o )
    [109 of 168] Compiling Distribution.Simple.Program.Find ( Distribution/Simple/Program/Find.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Find.o )
    [110 of 168] Compiling Distribution.Simple.Program.Types ( Distribution/Simple/Program/Types.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Types.o )
    [111 of 168] Compiling Distribution.Simple.Program.Run ( Distribution/Simple/Program/Run.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Run.o )
    [112 of 168] Compiling Distribution.Simple.Program.Script ( Distribution/Simple/Program/Script.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Script.o )
    [113 of 168] Compiling Distribution.Simple.Program.Ld ( Distribution/Simple/Program/Ld.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Ld.o )
    [114 of 168] Compiling Distribution.Simple.Program.Hpc ( Distribution/Simple/Program/Hpc.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Hpc.o )
    [115 of 168] Compiling Distribution.Simple.Program.Builtin ( Distribution/Simple/Program/Builtin.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Builtin.o )
    [116 of 168] Compiling Distribution.Simple.Program.Db ( Distribution/Simple/Program/Db.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Db.o )
    [117 of 168] Compiling Distribution.Simple.Program ( Distribution/Simple/Program.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program.o )
    [118 of 168] Compiling Distribution.Simple.Program.Strip ( Distribution/Simple/Program/Strip.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Program/Strip.o )
    [119 of 168] Compiling Distribution.Simple.PackageIndex ( Distribution/Simple/PackageIndex.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/PackageIndex.o )
    [120 of 168] Compiling Distribution.Simple.Compiler ( Distribution/Simple/Compiler.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Distribution/Simple/Compiler.o )
The command &quot;stack --no-terminal build --only-dependencies&quot; failed and exited with 1 during .
Your build has been stopped.</code></pre>
<p>これ、一瞬見ただけだと良くわからないのですが、注目するのは以下の部分です。</p>
<pre class="shell"><code>While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)</code></pre>
<p>以下の2点が今回のエラーに対処するために必要な情報になります。</p>
<ul>
<li><code>While building custom Setup.hs for package Cabal-2.0.1.1 using</code></li>
<li><code>ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)</code></li>
</ul>
<h2 id="解決策その1--j-1-オプションを利用する">解決策その1 -j 1 オプションを利用する</h2>
<p><code>stack build</code> 時に <code>-j 1</code> オプションを指定することで並列ビルドを抑制することができます。(<code>stack</code> はデフォルトで並列ビルドが有効になってます)</p>
<pre class="shell"><code>$ stack --no-terminal build --only-dependencies -j 1</code></pre>
<p>この方法で解決することもできますが、ビルド時間が増大するというデメリットもあります。</p>
<p>そうすると <code>travis-ci</code> の <code>50分制限</code> にひっかかり、やはりビルドが失敗してしまうのです。こんな感じのエラーが出ます。</p>
<pre class="shell"><code>The job exceeded the maximum time limit for jobs, and has been terminated.</code></pre>
<h2 id="解決策その2-問題のパッケージのみ先にビルドする">解決策その2 問題のパッケージのみ先にビルドする</h2>
<p>過去に同じような <code>issue</code> (<a href="https://github.com/commercialhaskell/stack/issues/859">Building with stack on Travis CI - dependency compilation fails sometimes #859</a>) が立っており、そこに解決策がありました。</p>
<p><code>-j 1</code> を全体に適用するとビルド時間がかかりすぎてしまうので、問題のパッケージのみ <code>-j 1</code> でビルドするという方法です。</p>
<p>先程のエラーメッセージから問題のパッケージを特定することができます。</p>
<pre class="shell"><code>While building custom Setup.hs for package Cabal-2.0.1.1 using</code></pre>
<p>上記メッセージを読むと、悪いのは <code>Cabal</code> だということがわかります。</p>
<p>そのため、以下のように <code>.travis.yml</code> の設定を変更します。</p>
<pre class="shell"><code>stack --no-terminal build -j 1 Cabal
stack --no-terminal test --only-dependencies</code></pre>
<p>この時に <code>stack --no-terminal build -j 1 Cabal --only-dependencies</code> としてしまうとパッケージはビルドされないのでご注意ください。</p>
<p><code>.travis.yml</code> 全体はこうなります。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">{</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  <span class="fu">&quot;sudo&quot;:</span><span class="at"> false</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  <span class="fu">&quot;language&quot;:</span><span class="at"> </span><span class="st">&quot;generic&quot;</span><span class="er">,</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">  <span class="fu">&quot;cache&quot;:</span><span class="at"> </span><span class="kw">{</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">    <span class="fu">&quot;directories&quot;:</span><span class="at"> </span><span class="kw">[</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6">      <span class="st">&quot;$HOME/.stack/&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">      <span class="st">&quot;$HOME/.local/bin/&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">      <span class="st">&quot;.stack-work/&quot;</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9">    <span class="kw">]</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">  <span class="kw">}</span><span class="at">,</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11">  <span class="fu">&quot;before_install&quot;:</span><span class="at"> </span><span class="kw">[</span></a>
<a class="sourceLine" id="cb9-12" data-line-number="12">    <span class="st">&quot;mkdir -p ~/.local/bin&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb9-13" data-line-number="13">    <span class="st">&quot;export PATH=$HOME/.local/bin:$PATH&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb9-14" data-line-number="14">    <span class="st">&quot;travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &#39;*/stack&#39;&quot;</span></a>
<a class="sourceLine" id="cb9-15" data-line-number="15">  <span class="kw">]</span><span class="at">,</span></a>
<a class="sourceLine" id="cb9-16" data-line-number="16">  <span class="fu">&quot;install&quot;:</span><span class="at"> </span><span class="kw">[</span></a>
<a class="sourceLine" id="cb9-17" data-line-number="17">    <span class="st">&quot;stack --no-terminal build -j 1 Cabal&quot;</span><span class="kw">,</span></a>
<a class="sourceLine" id="cb9-18" data-line-number="18">    <span class="st">&quot;stack --no-terminal test --only-dependencies&quot;</span></a>
<a class="sourceLine" id="cb9-19" data-line-number="19">  <span class="kw">]</span><span class="at">,</span></a>
<a class="sourceLine" id="cb9-20" data-line-number="20">  <span class="fu">&quot;group&quot;:</span><span class="at"> </span><span class="st">&quot;stable&quot;</span><span class="er">,</span></a>
<a class="sourceLine" id="cb9-21" data-line-number="21">  <span class="fu">&quot;dist&quot;:</span><span class="at"> </span><span class="st">&quot;trusty&quot;</span><span class="er">,</span></a>
<a class="sourceLine" id="cb9-22" data-line-number="22">  <span class="fu">&quot;os&quot;:</span><span class="at"> </span><span class="st">&quot;linux&quot;</span></a>
<a class="sourceLine" id="cb9-23" data-line-number="23">}</a></code></pre></div>
<h2 id="まとめ">まとめ</h2>
<p><code>travis</code> の <code>OUT OF MEMORY</code> エラーは噂には聞いていましたが、実際に自分が遭遇するのは初めてでした。</p>
<p>対処法としてはエラーの原因となるパッケージのみを <code>-j 1</code> オプションで先にビルドしてしまえば良いということがわかりました。</p>]]></summary>
</entry>

</feed>
